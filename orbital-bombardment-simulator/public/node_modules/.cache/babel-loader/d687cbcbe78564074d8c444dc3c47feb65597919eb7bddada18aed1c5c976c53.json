{"ast":null,"code":"/*!\n * @pixi/app - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/app is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Container } from '@pixi/display';\nimport { autoDetectRenderer } from '@pixi/core';\n\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n *\n * @class\n * @memberof PIXI\n */\nvar Application = /** @class */function () {\n  /**\n   * @param {object} [options] - The optional renderer parameters.\n   * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n   *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n   *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n   * @param {number} [options.width=800] - The width of the renderers view.\n   * @param {number} [options.height=600] - The height of the renderers view.\n   * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n   * @param {boolean} [options.transparent=false] - If the render view is transparent.\n   * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n   *   resolutions other than 1.\n   * @param {boolean} [options.antialias=false] - Sets antialias\n   * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n   *  need to call toDataUrl on the WebGL context.\n   * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2.\n   * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n   *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n   *   it is ignored.\n   * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n   *  (shown if not transparent).\n   * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n   *   not before the new render pass.\n   * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n   *  for devices with dual graphics card. **(WebGL only)**.\n   * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n   *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n   *  The system ticker will always run before both the shared ticker and the app ticker.\n   * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n   * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n   */\n  function Application(options) {\n    var _this = this;\n    // The default options\n    options = Object.assign({\n      forceCanvas: false\n    }, options);\n    /**\n     * WebGL renderer if available, otherwise CanvasRenderer.\n     * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n     */\n    this.renderer = autoDetectRenderer(options);\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    this.stage = new Container();\n    // install plugins here\n    Application._plugins.forEach(function (plugin) {\n      plugin.init.call(_this, options);\n    });\n  }\n  /**\n   * Register a middleware plugin for the application\n   * @static\n   * @param {PIXI.Application.Plugin} plugin - Plugin being installed\n   */\n  Application.registerPlugin = function (plugin) {\n    Application._plugins.push(plugin);\n  };\n  /**\n   * Render the current stage.\n   */\n  Application.prototype.render = function () {\n    // TODO: Since CanvasRenderer has not been converted this function thinks it takes DisplayObject & PIXI.DisplayObject\n    // This can be fixed when CanvasRenderer is converted.\n    this.renderer.render(this.stage);\n  };\n  Object.defineProperty(Application.prototype, \"view\", {\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get: function () {\n      return this.renderer.view;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Application.prototype, \"screen\", {\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get: function () {\n      return this.renderer.screen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Destroy and don't use after this.\n   * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.\n   * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'stageOptions' will be passed on to those calls.\n   * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the texture of the child sprite\n   * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the base texture of the child sprite\n   */\n  Application.prototype.destroy = function (removeView, stageOptions) {\n    var _this = this;\n    // Destroy plugins in the opposite order\n    // which they were constructed\n    var plugins = Application._plugins.slice(0);\n    plugins.reverse();\n    plugins.forEach(function (plugin) {\n      plugin.destroy.call(_this);\n    });\n    this.stage.destroy(stageOptions);\n    this.stage = null;\n    this.renderer.destroy(removeView);\n    this.renderer = null;\n  };\n  return Application;\n}();\n/**\n * @memberof PIXI.Application\n * @typedef {object} Plugin\n * @property {function} init - Called when Application is constructed, scoped to Application instance.\n *  Passes in `options` as the only argument, which are Application constructor options.\n * @property {function} destroy - Called when destroying Application, scoped to Application instance\n */\n/**\n * Collection of installed plugins.\n * @static\n * @private\n * @type {PIXI.Application.Plugin[]}\n */\nApplication._plugins = [];\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nvar ResizePlugin = /** @class */function () {\n  function ResizePlugin() {}\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  ResizePlugin.init = function (options) {\n    var _this = this;\n    /**\n     * The HTML element or window to automatically resize the\n     * renderer's view element to match width and height.\n     * @type {Window|HTMLElement}\n     * @name resizeTo\n     * @memberof PIXI.Application#\n     */\n    Object.defineProperty(this, 'resizeTo', {\n      set: function (dom) {\n        window.removeEventListener('resize', this.queueResize);\n        this._resizeTo = dom;\n        if (dom) {\n          window.addEventListener('resize', this.queueResize);\n          this.resize();\n        }\n      },\n      get: function () {\n        return this._resizeTo;\n      }\n    });\n    /**\n     * Resize is throttled, so it's\n     * safe to call this multiple times per frame and it'll\n     * only be called once.\n     * @method PIXI.Application#queueResize\n     */\n    this.queueResize = function () {\n      if (!_this._resizeTo) {\n        return;\n      }\n      _this.cancelResize();\n      // // Throttle resize events per raf\n      _this._resizeId = requestAnimationFrame(function () {\n        return _this.resize();\n      });\n    };\n    /**\n     * Cancel the resize queue.\n     * @method PIXI.Application#cancelResize\n     * @private\n     */\n    this.cancelResize = function () {\n      if (_this._resizeId) {\n        cancelAnimationFrame(_this._resizeId);\n        _this._resizeId = null;\n      }\n    };\n    /**\n     * Execute an immediate resize on the renderer, this is not\n     * throttled and can be expensive to call many times in a row.\n     * Will resize only if `resizeTo` property is set.\n     * @method PIXI.Application#resize\n     */\n    this.resize = function () {\n      if (!_this._resizeTo) {\n        return;\n      }\n      // clear queue resize\n      _this.cancelResize();\n      var width;\n      var height;\n      // Resize to the window\n      if (_this._resizeTo === window) {\n        width = window.innerWidth;\n        height = window.innerHeight;\n      }\n      // Resize to other HTML entities\n      else {\n        var _a = _this._resizeTo,\n          clientWidth = _a.clientWidth,\n          clientHeight = _a.clientHeight;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      _this.renderer.resize(width, height);\n    };\n    // On resize\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  };\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  ResizePlugin.destroy = function () {\n    this.cancelResize();\n    this.cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  };\n  return ResizePlugin;\n}();\nApplication.registerPlugin(ResizePlugin);\nexport { Application };","map":{"version":3,"names":["Application","options","_this","Object","assign","forceCanvas","renderer","autoDetectRenderer","stage","Container","_plugins","forEach","plugin","init","call","registerPlugin","push","prototype","render","defineProperty","get","view","screen","destroy","removeView","stageOptions","plugins","slice","reverse","ResizePlugin","set","dom","window","removeEventListener","queueResize","_resizeTo","addEventListener","resize","cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","innerWidth","innerHeight","_a","clientWidth","clientHeight","resizeTo"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/app/src/Application.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/app/src/ResizePlugin.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/app/src/index.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { autoDetectRenderer } from '@pixi/core';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Renderer, IRendererOptionsAuto, AbstractRenderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nexport interface IApplicationPlugin {\n    init: (...params: any[]) => any;\n    destroy: (...params: any[]) => any;\n}\n\nexport interface IApplicationOptions extends IRendererOptionsAuto {\n    autoStart?: boolean;\n    sharedTicker?: boolean;\n    sharedLoader?: boolean;\n    resizeTo?: Window | HTMLElement;\n    resizeThrottle?: number;\n}\n\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n *\n * @class\n * @memberof PIXI\n */\nexport class Application\n{\n    public static _plugins: IApplicationPlugin[];\n\n    public stage: Container;\n    public renderer: Renderer|AbstractRenderer;\n\n    /**\n     * @param {object} [options] - The optional renderer parameters.\n     * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n     *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n     *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n     * @param {number} [options.width=800] - The width of the renderers view.\n     * @param {number} [options.height=600] - The height of the renderers view.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.transparent=false] - If the render view is transparent.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n     *  need to call toDataUrl on the WebGL context.\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2.\n     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n     *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n     *   it is ignored.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *   not before the new render pass.\n     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n     *  for devices with dual graphics card. **(WebGL only)**.\n     * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n     *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n     * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n     */\n    constructor(options?: IApplicationOptions)\n    {\n        // The default options\n        options = Object.assign({\n            forceCanvas: false,\n        }, options);\n\n        /**\n         * WebGL renderer if available, otherwise CanvasRenderer.\n         * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n         */\n        this.renderer = autoDetectRenderer(options);\n\n        /**\n         * The root display container that's rendered.\n         * @member {PIXI.Container}\n         */\n        this.stage = new Container();\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /**\n     * Register a middleware plugin for the application\n     * @static\n     * @param {PIXI.Application.Plugin} plugin - Plugin being installed\n     */\n    static registerPlugin(plugin: IApplicationPlugin): void\n    {\n        Application._plugins.push(plugin);\n    }\n\n    /**\n     * Render the current stage.\n     */\n    public render(): void\n    {\n        // TODO: Since CanvasRenderer has not been converted this function thinks it takes DisplayObject & PIXI.DisplayObject\n        // This can be fixed when CanvasRenderer is converted.\n        this.renderer.render(this.stage as any);\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get view(): HTMLCanvasElement\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen(): Rectangle\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    public destroy(removeView?: boolean, stageOptions?: IDestroyOptions|boolean): void\n    {\n        // Destroy plugins in the opposite order\n        // which they were constructed\n        const plugins = Application._plugins.slice(0);\n\n        plugins.reverse();\n        plugins.forEach((plugin) =>\n        {\n            plugin.destroy.call(this);\n        });\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n    }\n}\n\n/**\n * @memberof PIXI.Application\n * @typedef {object} Plugin\n * @property {function} init - Called when Application is constructed, scoped to Application instance.\n *  Passes in `options` as the only argument, which are Application constructor options.\n * @property {function} destroy - Called when destroying Application, scoped to Application instance\n */\n\n/**\n * Collection of installed plugins.\n * @static\n * @private\n * @type {PIXI.Application.Plugin[]}\n */\nApplication._plugins = [];\n","import type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { Renderer } from '@pixi/core';\nimport type { IApplicationOptions } from './Application';\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    public static resizeTo: Window|HTMLElement;\n    public static resize: () => void;\n    public static renderer: Renderer|CanvasRenderer;\n    public static queueResize: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window|HTMLElement;\n    private static cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: IApplicationOptions): void\n    {\n        /**\n         * The HTML element or window to automatically resize the\n         * renderer's view element to match width and height.\n         * @type {Window|HTMLElement}\n         * @name resizeTo\n         * @memberof PIXI.Application#\n         */\n        Object.defineProperty(this, 'resizeTo',\n            {\n                set(dom: Window|HTMLElement)\n                {\n                    window.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        window.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's\n         * safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @method PIXI.Application#queueResize\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this.cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @method PIXI.Application#cancelResize\n         * @private\n         */\n        this.cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @method PIXI.Application#resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this.cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === window)\n            {\n                width = window.innerWidth;\n                height = window.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        this.cancelResize();\n        this.cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { Application } from './Application';\nimport { ResizePlugin } from './ResizePlugin';\n\nApplication.registerPlugin(ResizePlugin);\n\nexport * from './Application';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}