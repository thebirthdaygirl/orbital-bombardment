{"ast":null,"code":"/*!\n * @pixi/accessibility - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/accessibility is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nvar accessibleTarget = {\n  /**\n   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n   *   shadow div with attributes set\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessible: false,\n  /**\n   * Sets the title attribute of the shadow div\n   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n   *\n   * @member {?string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleTitle: null,\n  /**\n   * Sets the aria-label attribute of the shadow div\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleHint: null,\n  /**\n   * @member {number}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   * @todo Needs docs.\n   */\n  tabIndex: 0,\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleActive: false,\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleDiv: null,\n  /**\n   * Specify the type of div the accessible layer is. Screen readers treat the element differently\n   * depending on this type. Defaults to button.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'button'\n   */\n  accessibleType: 'button',\n  /**\n   * Specify the pointer-events the accessible div will use\n   * Defaults to auto.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'auto'\n   */\n  accessiblePointerEvents: 'auto',\n  /**\n   * Setting to false will prevent any children inside this container to\n   * be accessible. Defaults to true.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @default true\n   */\n  accessibleChildren: true,\n  renderId: -1\n};\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nvar AccessibilityManager = /** @class */function () {\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   */\n  function AccessibilityManager(renderer) {\n    /**\n     * @type {?HTMLElement}\n     * @private\n     */\n    this._hookDiv = null;\n    if (isMobile.tablet || isMobile.phone) {\n      this.createTouchHook();\n    }\n    // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n    var div = document.createElement('div');\n    div.style.width = DIV_TOUCH_SIZE + \"px\";\n    div.style.height = DIV_TOUCH_SIZE + \"px\";\n    div.style.position = 'absolute';\n    div.style.top = DIV_TOUCH_POS_X + \"px\";\n    div.style.left = DIV_TOUCH_POS_Y + \"px\";\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    /**\n     * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n     *\n     * @type {HTMLElement}\n     * @private\n     */\n    this.div = div;\n    /**\n     * A simple pool for storing divs.\n     *\n     * @type {*}\n     * @private\n     */\n    this.pool = [];\n    /**\n     * This is a tick used to check if an object is no longer being rendered.\n     *\n     * @type {Number}\n     * @private\n     */\n    this.renderId = 0;\n    /**\n     * Setting this to true will visually show the divs.\n     *\n     * @type {boolean}\n     */\n    this.debug = false;\n    /**\n     * The renderer this accessibility manager works for.\n     *\n     * @member {PIXI.AbstractRenderer}\n     */\n    this.renderer = renderer;\n    /**\n     * The array of currently active accessible items.\n     *\n     * @member {Array<*>}\n     * @private\n     */\n    this.children = [];\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n    this._onKeyDown = this._onKeyDown.bind(this);\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this._isActive = false;\n    this._isMobileAccessibility = false;\n    /**\n     * count to throttle div updates on android devices\n     * @type number\n     * @private\n     */\n    this.androidUpdateCount = 0;\n    /**\n     * the frequency to update the div elements ()\n     * @private\n     */\n    this.androidUpdateFrequency = 500; // 2fps\n    // let listen for tab.. once pressed we can fire up and show the accessibility layer\n    window.addEventListener('keydown', this._onKeyDown, false);\n  }\n  Object.defineProperty(AccessibilityManager.prototype, \"isActive\", {\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._isActive;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessibilityManager.prototype, \"isMobileAccessibility\", {\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._isMobileAccessibility;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates the touch hooks.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.createTouchHook = function () {\n    var _this = this;\n    var hookDiv = document.createElement('button');\n    hookDiv.style.width = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.height = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.position = 'absolute';\n    hookDiv.style.top = DIV_HOOK_POS_X + \"px\";\n    hookDiv.style.left = DIV_HOOK_POS_Y + \"px\";\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n    hookDiv.style.backgroundColor = '#FF0000';\n    hookDiv.title = 'select to enable accessability for this content';\n    hookDiv.addEventListener('focus', function () {\n      _this._isMobileAccessibility = true;\n      _this.activate();\n      _this.destroyTouchHook();\n    });\n    document.body.appendChild(hookDiv);\n    this._hookDiv = hookDiv;\n  };\n  /**\n   * Destroys the touch hooks.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.destroyTouchHook = function () {\n    if (!this._hookDiv) {\n      return;\n    }\n    document.body.removeChild(this._hookDiv);\n    this._hookDiv = null;\n  };\n  /**\n   * Activating will cause the Accessibility layer to be shown.\n   * This is called when a user presses the tab key.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.activate = function () {\n    if (this._isActive) {\n      return;\n    }\n    this._isActive = true;\n    window.document.addEventListener('mousemove', this._onMouseMove, true);\n    window.removeEventListener('keydown', this._onKeyDown, false);\n    // TODO: Remove casting when CanvasRenderer is converted\n    this.renderer.on('postrender', this.update, this);\n    if (this.renderer.view.parentNode) {\n      this.renderer.view.parentNode.appendChild(this.div);\n    }\n  };\n  /**\n   * Deactivating will cause the Accessibility layer to be hidden.\n   * This is called when a user moves the mouse.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.deactivate = function () {\n    if (!this._isActive || this._isMobileAccessibility) {\n      return;\n    }\n    this._isActive = false;\n    window.document.removeEventListener('mousemove', this._onMouseMove, true);\n    window.addEventListener('keydown', this._onKeyDown, false);\n    // TODO: Remove casting when CanvasRenderer is converted\n    this.renderer.off('postrender', this.update);\n    if (this.div.parentNode) {\n      this.div.parentNode.removeChild(this.div);\n    }\n  };\n  /**\n   * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n   *\n   * @private\n   * @param {PIXI.Container} displayObject - The DisplayObject to check.\n   */\n  AccessibilityManager.prototype.updateAccessibleObjects = function (displayObject) {\n    if (!displayObject.visible || !displayObject.accessibleChildren) {\n      return;\n    }\n    if (displayObject.accessible && displayObject.interactive) {\n      if (!displayObject._accessibleActive) {\n        this.addChild(displayObject);\n      }\n      displayObject.renderId = this.renderId;\n    }\n    var children = displayObject.children;\n    for (var i = 0; i < children.length; i++) {\n      this.updateAccessibleObjects(children[i]);\n    }\n  };\n  /**\n   * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.update = function () {\n    /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n    *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n    *  so I am just running update every half a second, seems to fix it.\n    */\n    var now = performance.now();\n    if (isMobile.android.device && now < this.androidUpdateCount) {\n      return;\n    }\n    this.androidUpdateCount = now + this.androidUpdateFrequency;\n    if (!this.renderer.renderingToScreen) {\n      return;\n    }\n    // update children...\n    if (this.renderer._lastObjectRendered) {\n      this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n    }\n    // TODO: Remove casting when CanvasRenderer is converted\n    var rect = this.renderer.view.getBoundingClientRect();\n    var resolution = this.renderer.resolution;\n    var sx = rect.width / this.renderer.width * resolution;\n    var sy = rect.height / this.renderer.height * resolution;\n    var div = this.div;\n    div.style.left = rect.left + \"px\";\n    div.style.top = rect.top + \"px\";\n    div.style.width = this.renderer.width + \"px\";\n    div.style.height = this.renderer.height + \"px\";\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      if (child.renderId !== this.renderId) {\n        child._accessibleActive = false;\n        removeItems(this.children, i, 1);\n        this.div.removeChild(child._accessibleDiv);\n        this.pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n      } else {\n        // map div to display..\n        div = child._accessibleDiv;\n        var hitArea = child.hitArea;\n        var wt = child.worldTransform;\n        if (child.hitArea) {\n          div.style.left = (wt.tx + hitArea.x * wt.a) * sx + \"px\";\n          div.style.top = (wt.ty + hitArea.y * wt.d) * sy + \"px\";\n          div.style.width = hitArea.width * wt.a * sx + \"px\";\n          div.style.height = hitArea.height * wt.d * sy + \"px\";\n        } else {\n          hitArea = child.getBounds();\n          this.capHitArea(hitArea);\n          div.style.left = hitArea.x * sx + \"px\";\n          div.style.top = hitArea.y * sy + \"px\";\n          div.style.width = hitArea.width * sx + \"px\";\n          div.style.height = hitArea.height * sy + \"px\";\n          // update button titles and hints if they exist and they've changed\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle;\n          }\n          if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute('aria-label', child.accessibleHint);\n          }\n        }\n        // the title or index may have changed, if so lets update it!\n        if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n          div.title = child.accessibleTitle;\n          div.tabIndex = child.tabIndex;\n          if (this.debug) {\n            this.updateDebugHTML(div);\n          }\n        }\n      }\n    }\n    // increment the render id..\n    this.renderId++;\n  };\n  /**\n   * private function that will visually add the information to the\n   * accessability div\n   *\n   * @param {HTMLElement} div\n   */\n  AccessibilityManager.prototype.updateDebugHTML = function (div) {\n    div.innerHTML = \"type: \" + div.type + \"</br> title : \" + div.title + \"</br> tabIndex: \" + div.tabIndex;\n  };\n  /**\n   * Adjust the hit area based on the bounds of a display object\n   *\n   * @param {PIXI.Rectangle} hitArea - Bounds of the child\n   */\n  AccessibilityManager.prototype.capHitArea = function (hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    }\n    // TODO: Remove casting when CanvasRenderer is converted\n    if (hitArea.x + hitArea.width > this.renderer.width) {\n      hitArea.width = this.renderer.width - hitArea.x;\n    }\n    if (hitArea.y + hitArea.height > this.renderer.height) {\n      hitArea.height = this.renderer.height - hitArea.y;\n    }\n  };\n  /**\n   * Adds a DisplayObject to the accessibility manager\n   *\n   * @private\n   * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n   */\n  AccessibilityManager.prototype.addChild = function (displayObject) {\n    //    this.activate();\n    var div = this.pool.pop();\n    if (!div) {\n      div = document.createElement('button');\n      div.style.width = DIV_TOUCH_SIZE + \"px\";\n      div.style.height = DIV_TOUCH_SIZE + \"px\";\n      div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n      div.style.position = 'absolute';\n      div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n      div.style.borderStyle = 'none';\n      // ARIA attributes ensure that button title and hint updates are announced properly\n      if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n        div.setAttribute('aria-live', 'off');\n      } else {\n        div.setAttribute('aria-live', 'polite');\n      }\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        // FireFox needs this to announce only the new button name\n        div.setAttribute('aria-relevant', 'additions');\n      } else {\n        // required by IE, other browsers don't much care\n        div.setAttribute('aria-relevant', 'text');\n      }\n      div.addEventListener('click', this._onClick.bind(this));\n      div.addEventListener('focus', this._onFocus.bind(this));\n      div.addEventListener('focusout', this._onFocusOut.bind(this));\n    }\n    // set pointer events\n    div.style.pointerEvents = displayObject.accessiblePointerEvents;\n    // set the type, this defaults to button!\n    div.type = displayObject.accessibleType;\n    if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n      div.title = displayObject.accessibleTitle;\n    } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n      div.title = \"displayObject \" + displayObject.tabIndex;\n    }\n    if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n      div.setAttribute('aria-label', displayObject.accessibleHint);\n    }\n    if (this.debug) {\n      this.updateDebugHTML(div);\n    }\n    displayObject._accessibleActive = true;\n    displayObject._accessibleDiv = div;\n    div.displayObject = displayObject;\n    this.children.push(displayObject);\n    this.div.appendChild(displayObject._accessibleDiv);\n    displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n  };\n  /**\n   * Maps the div button press to pixi's InteractionManager (click)\n   *\n   * @private\n   * @param {MouseEvent} e - The click event.\n   */\n  AccessibilityManager.prototype._onClick = function (e) {\n    // TODO: Remove casting when CanvasRenderer is converted\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);\n    interactionManager.dispatchEvent(e.target.displayObject, 'pointertap', interactionManager.eventData);\n    interactionManager.dispatchEvent(e.target.displayObject, 'tap', interactionManager.eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseover)\n   *\n   * @private\n   * @param {FocusEvent} e - The focus event.\n   */\n  AccessibilityManager.prototype._onFocus = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'assertive');\n    }\n    // TODO: Remove casting when CanvasRenderer is converted\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseout)\n   *\n   * @private\n   * @param {FocusEvent} e - The focusout event.\n   */\n  AccessibilityManager.prototype._onFocusOut = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'polite');\n    }\n    // TODO: Remove casting when CanvasRenderer is converted\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);\n  };\n  /**\n   * Is called when a key is pressed\n   *\n   * @private\n   * @param {KeyboardEvent} e - The keydown event.\n   */\n  AccessibilityManager.prototype._onKeyDown = function (e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n    this.activate();\n  };\n  /**\n   * Is called when the mouse moves across the renderer element\n   *\n   * @private\n   * @param {MouseEvent} e - The mouse event.\n   */\n  AccessibilityManager.prototype._onMouseMove = function (e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n    this.deactivate();\n  };\n  /**\n   * Destroys the accessibility manager\n   *\n   */\n  AccessibilityManager.prototype.destroy = function () {\n    this.destroyTouchHook();\n    this.div = null;\n    window.document.removeEventListener('mousemove', this._onMouseMove, true);\n    window.removeEventListener('keydown', this._onKeyDown);\n    this.pool = null;\n    this.children = null;\n    this.renderer = null;\n  };\n  return AccessibilityManager;\n}();\nexport { AccessibilityManager, accessibleTarget };","map":{"version":3,"names":["accessibleTarget","accessible","accessibleTitle","accessibleHint","tabIndex","_accessibleActive","_accessibleDiv","accessibleType","accessiblePointerEvents","accessibleChildren","renderId","DisplayObject","mixin","KEY_CODE_TAB","DIV_TOUCH_SIZE","DIV_TOUCH_POS_X","DIV_TOUCH_POS_Y","DIV_TOUCH_ZINDEX","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","DIV_HOOK_ZINDEX","AccessibilityManager","renderer","_hookDiv","isMobile","tablet","phone","createTouchHook","div","document","createElement","style","width","height","position","top","left","zIndex","toString","pool","debug","children","_onKeyDown","bind","_onMouseMove","_isActive","_isMobileAccessibility","androidUpdateCount","androidUpdateFrequency","window","addEventListener","Object","defineProperty","prototype","get","_this","hookDiv","backgroundColor","title","activate","destroyTouchHook","body","appendChild","removeChild","removeEventListener","on","update","view","parentNode","deactivate","off","updateAccessibleObjects","displayObject","visible","interactive","addChild","i","length","now","performance","android","device","renderingToScreen","_lastObjectRendered","rect","getBoundingClientRect","resolution","sx","sy","child","removeItems","push","hitArea","wt","worldTransform","tx","x","a","ty","y","d","getBounds","capHitArea","getAttribute","setAttribute","updateDebugHTML","innerHTML","type","pop","borderStyle","navigator","userAgent","toLowerCase","indexOf","match","_onClick","_onFocus","_onFocusOut","pointerEvents","e","interactionManager","plugins","interaction","dispatchEvent","target","eventData","keyCode","movementX","movementY","destroy"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/accessibility/src/accessibleTarget.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/accessibility/src/AccessibilityManager.ts"],"sourcesContent":["import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget {\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: true;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement {\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     *\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n","import { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Container } from '@pixi/display';\nimport type { Renderer, AbstractRenderer } from '@pixi/core';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    public debug: boolean;\n    public renderer: AbstractRenderer|Renderer;\n\n    private _isActive: boolean;\n    private _isMobileAccessibility: boolean;\n    private _hookDiv: HTMLElement;\n    private div: HTMLElement;\n    private pool: IAccessibleHTMLElement[];\n    private renderId: number;\n    private children: DisplayObject[];\n    private androidUpdateCount: number;\n    private androidUpdateFrequency: number;\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer|Renderer)\n    {\n        /**\n         * @type {?HTMLElement}\n         * @private\n         */\n        this._hookDiv = null;\n\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        /**\n         * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n         *\n         * @type {HTMLElement}\n         * @private\n         */\n        this.div = div;\n\n        /**\n         * A simple pool for storing divs.\n         *\n         * @type {*}\n         * @private\n         */\n        this.pool = [];\n\n        /**\n         * This is a tick used to check if an object is no longer being rendered.\n         *\n         * @type {Number}\n         * @private\n         */\n        this.renderId = 0;\n\n        /**\n         * Setting this to true will visually show the divs.\n         *\n         * @type {boolean}\n         */\n        this.debug = false;\n\n        /**\n         * The renderer this accessibility manager works for.\n         *\n         * @member {PIXI.AbstractRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * The array of currently active accessible items.\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.children = [];\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        this._isActive = false;\n\n        this._isMobileAccessibility = false;\n\n        /**\n         * count to throttle div updates on android devices\n         * @type number\n         * @private\n         */\n        this.androidUpdateCount = 0;\n\n        /**\n         * the frequency to update the div elements ()\n         * @private\n         */\n        this.androidUpdateFrequency = 500; // 2fps\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        window.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessability for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     *\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     *\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        window.document.addEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown, false);\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        (this.renderer as AbstractRenderer).on('postrender', this.update, this);\n\n        if ((this.renderer as AbstractRenderer).view.parentNode)\n        {\n            (this.renderer as AbstractRenderer).view.parentNode.appendChild(this.div);\n        }\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     *\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.addEventListener('keydown', this._onKeyDown, false);\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        (this.renderer as AbstractRenderer).off('postrender', this.update);\n\n        if (this.div.parentNode)\n        {\n            this.div.parentNode.removeChild(this.div);\n        }\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.updateAccessibleObjects(children[i] as Container);\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!(this.renderer as Renderer).renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer._lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer._lastObjectRendered as Container);\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const rect = (this.renderer as AbstractRenderer).view.getBoundingClientRect();\n\n        const resolution = this.renderer.resolution;\n\n        const sx = (rect.width / (this.renderer as AbstractRenderer).width) * resolution;\n        const sy = (rect.height / (this.renderer as AbstractRenderer).height) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${rect.left}px`;\n        div.style.top = `${rect.top}px`;\n        div.style.width = `${(this.renderer as AbstractRenderer).width}px`;\n        div.style.height = `${(this.renderer as AbstractRenderer).height}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     *\n     * @param {HTMLElement} div\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     *\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        if (hitArea.x + hitArea.width > (this.renderer as AbstractRenderer).width)\n        {\n            hitArea.width = (this.renderer as AbstractRenderer).width - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > (this.renderer as AbstractRenderer).height)\n        {\n            hitArea.height = (this.renderer as AbstractRenderer).height - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'click', interactionManager.eventData\n        );\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'pointertap', interactionManager.eventData\n        );\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'tap', interactionManager.eventData\n        );\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'mouseover', interactionManager.eventData\n        );\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent((e.target as any).displayObject, 'mouseout', interactionManager.eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}