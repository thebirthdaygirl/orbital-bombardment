{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/small_ship.png'),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/medium_ship.png'),\n        [SHIPS.LARGE.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/big_ship.png')\n      };\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n    }\n  }\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n      switch (ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.5);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.75);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(1);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(1);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\n\n// BulletRenderer and PlanetRenderer classes remain the same\n\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000\n      });\n      container.appendChild(this.app.view);\n      this.background = PIXI.Sprite.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/game_background.png');\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n      this.planetRenderer = new PlanetRenderer(initialPlanet, width / 2, height / 2);\n      this.app.stage.addChild(this.planetRenderer.planetSprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n      this.shipPool = new ObjectPool(() => new ShipRenderer({}));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({}));\n      this.planetPool = new ObjectPool(() => new PlanetRenderer({}, width / 2, height / 2));\n      this.lastUpdateTime = Date.now();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n\n  // Other methods remain the same, but you can add try-catch blocks to them as well\n\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n      simulation.ships.forEach(ship => {\n        const renderer = this.getShipRenderer(ship);\n        renderer.render(ship);\n      });\n      this.shipRenderers.forEach((renderer, ship) => {\n        if (!simulation.ships.includes(ship)) {\n          this.removeShipRenderer(ship);\n        }\n      });\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(simulation.getPlanetHealth());\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n}","map":{"version":3,"names":["PIXI","PLANET_RENDERER_CONFIGS","SHIPS","ObjectPool","ShipRenderer","constructor","ship","textures","SMALL","id","Texture","from","MEDIUM","LARGE","sprite","Sprite","type","anchor","set","updateSprite","error","console","texture","scale","warn","render","x","y","rotation","angle","Math","PI","GameRenderer","container","width","height","initialPlanet","app","Application","backgroundColor","appendChild","view","background","stage","addChild","shipRenderers","Map","bulletRenderers","planetRenderer","PlanetRenderer","planetSprite","healthBarSprite","nameText","shipPool","bulletPool","BulletRenderer","planetPool","lastUpdateTime","Date","now","simulation","updatePlanetRotation","ships","forEach","renderer","getShipRenderer","includes","removeShipRenderer","bullets","bullet","getBulletRenderer","removeBulletRenderer","currentPlanet","getCurrentPlanet","getPlanetRenderer","getPlanetHealth"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/src/render/renderer.js"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\n\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/small_ship.png'),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/medium_ship.png'),\n        [SHIPS.LARGE.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/big_ship.png'),\n      };\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n    }\n  }\n\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n\n      switch(ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.5);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.75);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(1);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(1);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\n\n// BulletRenderer and PlanetRenderer classes remain the same\n\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000,\n      });\n      container.appendChild(this.app.view);\n\n      this.background = PIXI.Sprite.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/game_background.png');\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n      this.planetRenderer = new PlanetRenderer(initialPlanet, width / 2, height / 2);\n\n      this.app.stage.addChild(this.planetRenderer.planetSprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n\n      this.shipPool = new ObjectPool(() => new ShipRenderer({}));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({}));\n      this.planetPool = new ObjectPool(() => new PlanetRenderer({}, width / 2, height / 2));\n\n      this.lastUpdateTime = Date.now();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n\n  // Other methods remain the same, but you can add try-catch blocks to them as well\n\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n\n      simulation.ships.forEach(ship => {\n        const renderer = this.getShipRenderer(ship);\n        renderer.render(ship);\n      });\n\n      this.shipRenderers.forEach((renderer, ship) => {\n        if (!simulation.ships.includes(ship)) {\n          this.removeShipRenderer(ship);\n        }\n      });\n\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(simulation.getPlanetHealth());\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}