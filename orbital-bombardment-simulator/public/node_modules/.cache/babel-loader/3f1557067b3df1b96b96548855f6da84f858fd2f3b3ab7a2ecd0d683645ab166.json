{"ast":null,"code":"/*!\n * @pixi/particles - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/particles is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { BLEND_MODES, TYPES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { hex2rgb, createIndicesForQuads, correctBlendMode, premultiplyRgba, premultiplyTint } from '@pixi/utils';\nimport { Geometry, Buffer, Shader, State, ObjectRenderer } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use:\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = PIXI.Sprite.from(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be rendered at the speed of light.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nvar ParticleContainer = /** @class */function (_super) {\n  __extends(ParticleContainer, _super);\n  /**\n   * @param {number} [maxSize=1500] - The maximum number of particles that can be rendered by the container.\n   *  Affects size of allocated buffers.\n   * @param {object} [properties] - The properties of children that should be uploaded to the gpu and applied.\n   * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n   *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n   * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n   * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n   * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n   * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n   * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n   * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n   *  there are more than `maxSize` particles.\n   */\n  function ParticleContainer(maxSize, properties, batchSize, autoResize) {\n    if (maxSize === void 0) {\n      maxSize = 1500;\n    }\n    if (batchSize === void 0) {\n      batchSize = 16384;\n    }\n    if (autoResize === void 0) {\n      autoResize = false;\n    }\n    var _this = _super.call(this) || this;\n    // Making sure the batch size is valid\n    // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n    // so max number of particles is 65536 / 4 = 16384\n    var maxBatchSize = 16384;\n    if (batchSize > maxBatchSize) {\n      batchSize = maxBatchSize;\n    }\n    /**\n     * Set properties to be dynamic (true) / static (false)\n     *\n     * @member {boolean[]}\n     * @private\n     */\n    _this._properties = [false, true, false, false, false];\n    /**\n     * @member {number}\n     * @private\n     */\n    _this._maxSize = maxSize;\n    /**\n     * @member {number}\n     * @private\n     */\n    _this._batchSize = batchSize;\n    /**\n     * @member {Array<PIXI.Buffer>}\n     * @private\n     */\n    _this._buffers = null;\n    /**\n     * for every batch stores _updateID corresponding to the last change in that batch\n     * @member {number[]}\n     * @private\n     */\n    _this._bufferUpdateIDs = [];\n    /**\n     * when child inserted, removed or changes position this number goes up\n     * @member {number[]}\n     * @private\n     */\n    _this._updateID = 0;\n    /**\n     * @member {boolean}\n     *\n     */\n    _this.interactiveChildren = false;\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n     * to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n    _this.blendMode = BLEND_MODES.NORMAL;\n    /**\n     * If true, container allocates more batches in case there are more than `maxSize` particles.\n     * @member {boolean}\n     * @default false\n     */\n    _this.autoResize = autoResize;\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * Default to true here as performance is usually the priority for particles.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    _this.roundPixels = true;\n    /**\n     * The texture used to render the children.\n     *\n     * @readonly\n     * @member {PIXI.BaseTexture}\n     */\n    _this.baseTexture = null;\n    _this.setProperties(properties);\n    /**\n     * The tint applied to the container.\n     * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @private\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    _this._tint = 0;\n    _this.tintRgb = new Float32Array(4);\n    _this.tint = 0xFFFFFF;\n    return _this;\n  }\n  /**\n   * Sets the private properties array to dynamic / static based on the passed properties object\n   *\n   * @param {object} properties - The properties to be uploaded\n   */\n  ParticleContainer.prototype.setProperties = function (properties) {\n    if (properties) {\n      this._properties[0] = 'vertices' in properties || 'scale' in properties ? !!properties.vertices || !!properties.scale : this._properties[0];\n      this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n      this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n      this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n      this._properties[4] = 'tint' in properties || 'alpha' in properties ? !!properties.tint || !!properties.alpha : this._properties[4];\n    }\n  };\n  /**\n   * Updates the object transform for rendering\n   *\n   * @private\n   */\n  ParticleContainer.prototype.updateTransform = function () {\n    // TODO don't need to!\n    this.displayObjectUpdateTransform();\n  };\n  Object.defineProperty(ParticleContainer.prototype, \"tint\", {\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     ** IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get: function () {\n      return this._tint;\n    },\n    set: function (value) {\n      this._tint = value;\n      hex2rgb(value, this.tintRgb);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Renders the container using the WebGL renderer\n   *\n   * @private\n   * @param {PIXI.Renderer} renderer - The webgl renderer\n   */\n  ParticleContainer.prototype.render = function (renderer) {\n    var _this = this;\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n      return;\n    }\n    if (!this.baseTexture) {\n      this.baseTexture = this.children[0]._texture.baseTexture;\n      if (!this.baseTexture.valid) {\n        this.baseTexture.once('update', function () {\n          return _this.onChildrenChange(0);\n        });\n      }\n    }\n    renderer.batch.setObjectRenderer(renderer.plugins.particle);\n    renderer.plugins.particle.render(this);\n  };\n  /**\n   * Set the flag that static data should be updated to true\n   *\n   * @private\n   * @param {number} smallestChildIndex - The smallest child index\n   */\n  ParticleContainer.prototype.onChildrenChange = function (smallestChildIndex) {\n    var bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n    while (this._bufferUpdateIDs.length < bufferIndex) {\n      this._bufferUpdateIDs.push(0);\n    }\n    this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n  };\n  ParticleContainer.prototype.dispose = function () {\n    if (this._buffers) {\n      for (var i = 0; i < this._buffers.length; ++i) {\n        this._buffers[i].destroy();\n      }\n      this._buffers = null;\n    }\n  };\n  /**\n   * Destroys the container\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n  ParticleContainer.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n    this.dispose();\n    this._properties = null;\n    this._buffers = null;\n    this._bufferUpdateIDs = null;\n  };\n  return ParticleContainer;\n}(Container);\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar ParticleBuffer = /** @class */function () {\n  /**\n   * @private\n   * @param {object} properties - The properties to upload.\n   * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n   * @param {number} size - The size of the batch.\n   */\n  function ParticleBuffer(properties, dynamicPropertyFlags, size) {\n    this.geometry = new Geometry();\n    this.indexBuffer = null;\n    /**\n     * The number of particles the buffer can hold\n     *\n     * @private\n     * @member {number}\n     */\n    this.size = size;\n    /**\n     * A list of the properties that are dynamic.\n     *\n     * @private\n     * @member {object[]}\n     */\n    this.dynamicProperties = [];\n    /**\n     * A list of the properties that are static.\n     *\n     * @private\n     * @member {object[]}\n     */\n    this.staticProperties = [];\n    for (var i = 0; i < properties.length; ++i) {\n      var property = properties[i];\n      // Make copy of properties object so that when we edit the offset it doesn't\n      // change all other instances of the object literal\n      property = {\n        attributeName: property.attributeName,\n        size: property.size,\n        uploadFunction: property.uploadFunction,\n        type: property.type || TYPES.FLOAT,\n        offset: property.offset\n      };\n      if (dynamicPropertyFlags[i]) {\n        this.dynamicProperties.push(property);\n      } else {\n        this.staticProperties.push(property);\n      }\n    }\n    this.staticStride = 0;\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n    this.dynamicStride = 0;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this._updateID = 0;\n    this.initBuffers();\n  }\n  /**\n   * Sets up the renderer context and necessary buffers.\n   *\n   * @private\n   */\n  ParticleBuffer.prototype.initBuffers = function () {\n    var geometry = this.geometry;\n    var dynamicOffset = 0;\n    /**\n     * Holds the indices of the geometry (quads) to draw\n     *\n     * @member {Uint16Array}\n     * @private\n     */\n    this.indexBuffer = new Buffer(createIndicesForQuads(this.size), true, true);\n    geometry.addIndex(this.indexBuffer);\n    this.dynamicStride = 0;\n    for (var i = 0; i < this.dynamicProperties.length; ++i) {\n      var property = this.dynamicProperties[i];\n      property.offset = dynamicOffset;\n      dynamicOffset += property.size;\n      this.dynamicStride += property.size;\n    }\n    var dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n    this.dynamicData = new Float32Array(dynBuffer);\n    this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n    this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n    // static //\n    var staticOffset = 0;\n    this.staticStride = 0;\n    for (var i = 0; i < this.staticProperties.length; ++i) {\n      var property = this.staticProperties[i];\n      property.offset = staticOffset;\n      staticOffset += property.size;\n      this.staticStride += property.size;\n    }\n    var statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n    this.staticData = new Float32Array(statBuffer);\n    this.staticDataUint32 = new Uint32Array(statBuffer);\n    this.staticBuffer = new Buffer(this.staticData, true, false);\n    for (var i = 0; i < this.dynamicProperties.length; ++i) {\n      var property = this.dynamicProperties[i];\n      geometry.addAttribute(property.attributeName, this.dynamicBuffer, 0, property.type === TYPES.UNSIGNED_BYTE, property.type, this.dynamicStride * 4, property.offset * 4);\n    }\n    for (var i = 0; i < this.staticProperties.length; ++i) {\n      var property = this.staticProperties[i];\n      geometry.addAttribute(property.attributeName, this.staticBuffer, 0, property.type === TYPES.UNSIGNED_BYTE, property.type, this.staticStride * 4, property.offset * 4);\n    }\n  };\n  /**\n   * Uploads the dynamic properties.\n   *\n   * @private\n   * @param {PIXI.DisplayObject[]} children - The children to upload.\n   * @param {number} startIndex - The index to start at.\n   * @param {number} amount - The number to upload.\n   */\n  ParticleBuffer.prototype.uploadDynamic = function (children, startIndex, amount) {\n    for (var i = 0; i < this.dynamicProperties.length; i++) {\n      var property = this.dynamicProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData, this.dynamicStride, property.offset);\n    }\n    this.dynamicBuffer._updateID++;\n  };\n  /**\n   * Uploads the static properties.\n   *\n   * @private\n   * @param {PIXI.DisplayObject[]} children - The children to upload.\n   * @param {number} startIndex - The index to start at.\n   * @param {number} amount - The number to upload.\n   */\n  ParticleBuffer.prototype.uploadStatic = function (children, startIndex, amount) {\n    for (var i = 0; i < this.staticProperties.length; i++) {\n      var property = this.staticProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData, this.staticStride, property.offset);\n    }\n    this.staticBuffer._updateID++;\n  };\n  /**\n   * Destroys the ParticleBuffer.\n   *\n   * @private\n   */\n  ParticleBuffer.prototype.destroy = function () {\n    this.indexBuffer = null;\n    this.dynamicProperties = null;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this.staticProperties = null;\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n    // all buffers are destroyed inside geometry\n    this.geometry.destroy();\n  };\n  return ParticleBuffer;\n}();\nvar fragment = \"varying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\\n    gl_FragColor = color;\\n}\";\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPositionCoord;\\nattribute float aRotation;\\n\\nuniform mat3 translationMatrix;\\nuniform vec4 uColor;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nvoid main(void){\\n    float x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);\\n    float y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPositionCoord;\\n\\n    gl_Position = vec4((translationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vColor = aColor * uColor;\\n}\\n\";\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n/**\n * Renderer for Particles that is designer for speed over feature set.\n *\n * @class\n * @memberof PIXI\n */\nvar ParticleRenderer = /** @class */function (_super) {\n  __extends(ParticleRenderer, _super);\n  /**\n   * @param {PIXI.Renderer} renderer - The renderer this sprite batch works for.\n   */\n  function ParticleRenderer(renderer) {\n    var _this = _super.call(this, renderer) || this;\n    // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n    // so max number of particles is 65536 / 4 = 16384\n    // and max number of element in the index buffer is 16384 * 6 = 98304\n    // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n    // let numIndices = 98304;\n    /**\n     * The default shader that is used if a sprite doesn't have a more specific one.\n     *\n     * @member {PIXI.Shader}\n     */\n    _this.shader = null;\n    _this.properties = null;\n    _this.tempMatrix = new Matrix();\n    _this.properties = [\n    // verticesData\n    {\n      attributeName: 'aVertexPosition',\n      size: 2,\n      uploadFunction: _this.uploadVertices,\n      offset: 0\n    },\n    // positionData\n    {\n      attributeName: 'aPositionCoord',\n      size: 2,\n      uploadFunction: _this.uploadPosition,\n      offset: 0\n    },\n    // rotationData\n    {\n      attributeName: 'aRotation',\n      size: 1,\n      uploadFunction: _this.uploadRotation,\n      offset: 0\n    },\n    // uvsData\n    {\n      attributeName: 'aTextureCoord',\n      size: 2,\n      uploadFunction: _this.uploadUvs,\n      offset: 0\n    },\n    // tintData\n    {\n      attributeName: 'aColor',\n      size: 1,\n      type: TYPES.UNSIGNED_BYTE,\n      uploadFunction: _this.uploadTint,\n      offset: 0\n    }];\n    _this.shader = Shader.from(vertex, fragment, {});\n    /**\n     * The WebGL state in which this renderer will work.\n     *\n     * @member {PIXI.State}\n     * @readonly\n     */\n    _this.state = State.for2d();\n    return _this;\n  }\n  /**\n   * Renders the particle container object.\n   *\n   * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n   */\n  ParticleRenderer.prototype.render = function (container) {\n    var children = container.children;\n    var maxSize = container._maxSize;\n    var batchSize = container._batchSize;\n    var renderer = this.renderer;\n    var totalChildren = children.length;\n    if (totalChildren === 0) {\n      return;\n    } else if (totalChildren > maxSize && !container.autoResize) {\n      totalChildren = maxSize;\n    }\n    var buffers = container._buffers;\n    if (!buffers) {\n      buffers = container._buffers = this.generateBuffers(container);\n    }\n    var baseTexture = children[0]._texture.baseTexture;\n    // if the uvs have not updated then no point rendering just yet!\n    this.state.blendMode = correctBlendMode(container.blendMode, baseTexture.alphaMode);\n    renderer.state.set(this.state);\n    var gl = renderer.gl;\n    var m = container.worldTransform.copyTo(this.tempMatrix);\n    m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n    this.shader.uniforms.translationMatrix = m.toArray(true);\n    this.shader.uniforms.uColor = premultiplyRgba(container.tintRgb, container.worldAlpha, this.shader.uniforms.uColor, baseTexture.alphaMode);\n    this.shader.uniforms.uSampler = baseTexture;\n    this.renderer.shader.bind(this.shader);\n    var updateStatic = false;\n    // now lets upload and render the buffers..\n    for (var i = 0, j = 0; i < totalChildren; i += batchSize, j += 1) {\n      var amount = totalChildren - i;\n      if (amount > batchSize) {\n        amount = batchSize;\n      }\n      if (j >= buffers.length) {\n        buffers.push(this._generateOneMoreBuffer(container));\n      }\n      var buffer = buffers[j];\n      // we always upload the dynamic\n      buffer.uploadDynamic(children, i, amount);\n      var bid = container._bufferUpdateIDs[j] || 0;\n      updateStatic = updateStatic || buffer._updateID < bid;\n      // we only upload the static content when we have to!\n      if (updateStatic) {\n        buffer._updateID = container._updateID;\n        buffer.uploadStatic(children, i, amount);\n      }\n      // bind the buffer\n      renderer.geometry.bind(buffer.geometry);\n      gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n    }\n  };\n  /**\n   * Creates one particle buffer for each child in the container we want to render and updates internal properties\n   *\n   * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n   * @return {PIXI.ParticleBuffer[]} The buffers\n   * @private\n   */\n  ParticleRenderer.prototype.generateBuffers = function (container) {\n    var buffers = [];\n    var size = container._maxSize;\n    var batchSize = container._batchSize;\n    var dynamicPropertyFlags = container._properties;\n    for (var i = 0; i < size; i += batchSize) {\n      buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n    }\n    return buffers;\n  };\n  /**\n   * Creates one more particle buffer, because container has autoResize feature\n   *\n   * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n   * @return {PIXI.ParticleBuffer} generated buffer\n   * @private\n   */\n  ParticleRenderer.prototype._generateOneMoreBuffer = function (container) {\n    var batchSize = container._batchSize;\n    var dynamicPropertyFlags = container._properties;\n    return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n  };\n  /**\n   * Uploads the vertices.\n   *\n   * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n   * @param {number} startIndex - the index to start from in the children array\n   * @param {number} amount - the amount of children that will have their vertices uploaded\n   * @param {number[]} array - The vertices to upload.\n   * @param {number} stride - Stride to use for iteration.\n   * @param {number} offset - Offset to start at.\n   */\n  ParticleRenderer.prototype.uploadVertices = function (children, startIndex, amount, array, stride, offset) {\n    var w0 = 0;\n    var w1 = 0;\n    var h0 = 0;\n    var h1 = 0;\n    for (var i = 0; i < amount; ++i) {\n      var sprite = children[startIndex + i];\n      var texture = sprite._texture;\n      var sx = sprite.scale.x;\n      var sy = sprite.scale.y;\n      var trim = texture.trim;\n      var orig = texture.orig;\n      if (trim) {\n        // if the sprite is trimmed and is not a tilingsprite then we need to add the\n        // extra space before transforming the sprite coords..\n        w1 = trim.x - sprite.anchor.x * orig.width;\n        w0 = w1 + trim.width;\n        h1 = trim.y - sprite.anchor.y * orig.height;\n        h0 = h1 + trim.height;\n      } else {\n        w0 = orig.width * (1 - sprite.anchor.x);\n        w1 = orig.width * -sprite.anchor.x;\n        h0 = orig.height * (1 - sprite.anchor.y);\n        h1 = orig.height * -sprite.anchor.y;\n      }\n      array[offset] = w1 * sx;\n      array[offset + 1] = h1 * sy;\n      array[offset + stride] = w0 * sx;\n      array[offset + stride + 1] = h1 * sy;\n      array[offset + stride * 2] = w0 * sx;\n      array[offset + stride * 2 + 1] = h0 * sy;\n      array[offset + stride * 3] = w1 * sx;\n      array[offset + stride * 3 + 1] = h0 * sy;\n      offset += stride * 4;\n    }\n  };\n  /**\n   * Uploads the position.\n   *\n   * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n   * @param {number} startIndex - the index to start from in the children array\n   * @param {number} amount - the amount of children that will have their positions uploaded\n   * @param {number[]} array - The vertices to upload.\n   * @param {number} stride - Stride to use for iteration.\n   * @param {number} offset - Offset to start at.\n   */\n  ParticleRenderer.prototype.uploadPosition = function (children, startIndex, amount, array, stride, offset) {\n    for (var i = 0; i < amount; i++) {\n      var spritePosition = children[startIndex + i].position;\n      array[offset] = spritePosition.x;\n      array[offset + 1] = spritePosition.y;\n      array[offset + stride] = spritePosition.x;\n      array[offset + stride + 1] = spritePosition.y;\n      array[offset + stride * 2] = spritePosition.x;\n      array[offset + stride * 2 + 1] = spritePosition.y;\n      array[offset + stride * 3] = spritePosition.x;\n      array[offset + stride * 3 + 1] = spritePosition.y;\n      offset += stride * 4;\n    }\n  };\n  /**\n   * Uploads the rotation.\n   *\n   * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n   * @param {number} startIndex - the index to start from in the children array\n   * @param {number} amount - the amount of children that will have their rotation uploaded\n   * @param {number[]} array - The vertices to upload.\n   * @param {number} stride - Stride to use for iteration.\n   * @param {number} offset - Offset to start at.\n   */\n  ParticleRenderer.prototype.uploadRotation = function (children, startIndex, amount, array, stride, offset) {\n    for (var i = 0; i < amount; i++) {\n      var spriteRotation = children[startIndex + i].rotation;\n      array[offset] = spriteRotation;\n      array[offset + stride] = spriteRotation;\n      array[offset + stride * 2] = spriteRotation;\n      array[offset + stride * 3] = spriteRotation;\n      offset += stride * 4;\n    }\n  };\n  /**\n   * Uploads the Uvs\n   *\n   * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n   * @param {number} startIndex - the index to start from in the children array\n   * @param {number} amount - the amount of children that will have their rotation uploaded\n   * @param {number[]} array - The vertices to upload.\n   * @param {number} stride - Stride to use for iteration.\n   * @param {number} offset - Offset to start at.\n   */\n  ParticleRenderer.prototype.uploadUvs = function (children, startIndex, amount, array, stride, offset) {\n    for (var i = 0; i < amount; ++i) {\n      var textureUvs = children[startIndex + i]._texture._uvs;\n      if (textureUvs) {\n        array[offset] = textureUvs.x0;\n        array[offset + 1] = textureUvs.y0;\n        array[offset + stride] = textureUvs.x1;\n        array[offset + stride + 1] = textureUvs.y1;\n        array[offset + stride * 2] = textureUvs.x2;\n        array[offset + stride * 2 + 1] = textureUvs.y2;\n        array[offset + stride * 3] = textureUvs.x3;\n        array[offset + stride * 3 + 1] = textureUvs.y3;\n        offset += stride * 4;\n      } else {\n        // TODO you know this can be easier!\n        array[offset] = 0;\n        array[offset + 1] = 0;\n        array[offset + stride] = 0;\n        array[offset + stride + 1] = 0;\n        array[offset + stride * 2] = 0;\n        array[offset + stride * 2 + 1] = 0;\n        array[offset + stride * 3] = 0;\n        array[offset + stride * 3 + 1] = 0;\n        offset += stride * 4;\n      }\n    }\n  };\n  /**\n   * Uploads the tint.\n   *\n   * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n   * @param {number} startIndex - the index to start from in the children array\n   * @param {number} amount - the amount of children that will have their rotation uploaded\n   * @param {number[]} array - The vertices to upload.\n   * @param {number} stride - Stride to use for iteration.\n   * @param {number} offset - Offset to start at.\n   */\n  ParticleRenderer.prototype.uploadTint = function (children, startIndex, amount, array, stride, offset) {\n    for (var i = 0; i < amount; ++i) {\n      var sprite = children[startIndex + i];\n      var premultiplied = sprite._texture.baseTexture.alphaMode > 0;\n      var alpha = sprite.alpha;\n      // we dont call extra function if alpha is 1.0, that's faster\n      var argb = alpha < 1.0 && premultiplied ? premultiplyTint(sprite._tintRGB, alpha) : sprite._tintRGB + (alpha * 255 << 24);\n      array[offset] = argb;\n      array[offset + stride] = argb;\n      array[offset + stride * 2] = argb;\n      array[offset + stride * 3] = argb;\n      offset += stride * 4;\n    }\n  };\n  /**\n   * Destroys the ParticleRenderer.\n   */\n  ParticleRenderer.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    if (this.shader) {\n      this.shader.destroy();\n      this.shader = null;\n    }\n    this.tempMatrix = null;\n  };\n  return ParticleRenderer;\n}(ObjectRenderer);\nexport { ParticleContainer, ParticleRenderer };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","ParticleContainer","_super","maxSize","properties","batchSize","autoResize","_this","call","maxBatchSize","_properties","_maxSize","_batchSize","_buffers","_bufferUpdateIDs","_updateID","interactiveChildren","blendMode","BLEND_MODES","NORMAL","roundPixels","baseTexture","setProperties","_tint","tintRgb","Float32Array","tint","vertices","scale","position","rotation","uvs","alpha","updateTransform","displayObjectUpdateTransform","defineProperty","get","set","value","hex2rgb","render","renderer","visible","worldAlpha","children","length","renderable","_texture","valid","once","onChildrenChange","batch","setObjectRenderer","plugins","particle","smallestChildIndex","bufferIndex","Math","floor","push","dispose","i","destroy","options","Container","ParticleBuffer","dynamicPropertyFlags","size","geometry","Geometry","indexBuffer","dynamicProperties","staticProperties","property","attributeName","uploadFunction","type","TYPES","FLOAT","offset","staticStride","staticBuffer","staticData","staticDataUint32","dynamicStride","dynamicBuffer","dynamicData","dynamicDataUint32","initBuffers","dynamicOffset","Buffer","createIndicesForQuads","addIndex","dynBuffer","ArrayBuffer","Uint32Array","staticOffset","statBuffer","addAttribute","UNSIGNED_BYTE","uploadDynamic","startIndex","amount","uploadStatic","ParticleRenderer","shader","tempMatrix","Matrix","uploadVertices","uploadPosition","uploadRotation","uploadUvs","uploadTint","Shader","from","vertex","fragment","state","State","for2d","container","totalChildren","buffers","generateBuffers","correctBlendMode","alphaMode","gl","m","worldTransform","copyTo","prepend","globalUniforms","uniforms","projectionMatrix","translationMatrix","toArray","uColor","premultiplyRgba","uSampler","bind","updateStatic","j","_generateOneMoreBuffer","buffer","bid","drawElements","TRIANGLES","UNSIGNED_SHORT","array","stride","w0","w1","h0","h1","sprite","texture","sx","x","sy","y","trim","orig","anchor","width","height","spritePosition","spriteRotation","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","premultiplied","argb","premultiplyTint","_tintRGB","ObjectRenderer"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/particles/src/ParticleContainer.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/particles/src/ParticleBuffer.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/particles/src/ParticleRenderer.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { BLEND_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { hex2rgb } from '@pixi/utils';\n\nimport type { BaseTexture, Renderer } from '@pixi/core';\nimport type { ParticleBuffer } from './ParticleBuffer';\nimport type { IDestroyOptions } from '@pixi/display';\n\nexport interface IParticleProperties {\n    vertices?: boolean;\n    position?: boolean;\n    rotation?: boolean;\n    uvs?: boolean;\n    tint?: boolean;\n    alpha?: boolean;\n    scale?: boolean;\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use:\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = PIXI.Sprite.from(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be rendered at the speed of light.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class ParticleContainer extends Container\n{\n    public readonly blendMode: BLEND_MODES;\n    public autoResize: boolean;\n    public roundPixels: boolean;\n    public baseTexture: BaseTexture;\n    public tintRgb: Float32Array;\n\n    _maxSize: number;\n    _buffers: ParticleBuffer[];\n    _batchSize: number;\n    _properties: boolean[];\n    _bufferUpdateIDs: number[];\n    _updateID: number;\n    private _tint: number;\n\n    /**\n     * @param {number} [maxSize=1500] - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param {object} [properties] - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    constructor(maxSize = 1500, properties: IParticleProperties, batchSize = 16384, autoResize = false)\n    {\n        super();\n\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        const maxBatchSize = 16384;\n\n        if (batchSize > maxBatchSize)\n        {\n            batchSize = maxBatchSize;\n        }\n\n        /**\n         * Set properties to be dynamic (true) / static (false)\n         *\n         * @member {boolean[]}\n         * @private\n         */\n        this._properties = [false, true, false, false, false];\n\n        /**\n         * @member {number}\n         * @private\n         */\n        this._maxSize = maxSize;\n\n        /**\n         * @member {number}\n         * @private\n         */\n        this._batchSize = batchSize;\n\n        /**\n         * @member {Array<PIXI.Buffer>}\n         * @private\n         */\n        this._buffers = null;\n\n        /**\n         * for every batch stores _updateID corresponding to the last change in that batch\n         * @member {number[]}\n         * @private\n         */\n        this._bufferUpdateIDs = [];\n\n        /**\n         * when child inserted, removed or changes position this number goes up\n         * @member {number[]}\n         * @private\n         */\n        this._updateID = 0;\n\n        /**\n         * @member {boolean}\n         *\n         */\n        this.interactiveChildren = false;\n\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n         * to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * If true, container allocates more batches in case there are more than `maxSize` particles.\n         * @member {boolean}\n         * @default false\n         */\n        this.autoResize = autoResize;\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * Default to true here as performance is usually the priority for particles.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.roundPixels = true;\n\n        /**\n         * The texture used to render the children.\n         *\n         * @readonly\n         * @member {PIXI.BaseTexture}\n         */\n        this.baseTexture = null;\n\n        this.setProperties(properties);\n\n        /**\n         * The tint applied to the container.\n         * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._tint = 0;\n        this.tintRgb = new Float32Array(4);\n        this.tint = 0xFFFFFF;\n    }\n\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     *\n     * @param {object} properties - The properties to be uploaded\n     */\n    public setProperties(properties: IParticleProperties): void\n    {\n        if (properties)\n        {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    }\n\n    /**\n     * Updates the object transform for rendering\n     *\n     * @private\n     */\n    updateTransform(): void\n    {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n    }\n\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     ** IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        hex2rgb(value, this.tintRgb);\n    }\n\n    /**\n     * Renders the container using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.Renderer} renderer - The webgl renderer\n     */\n    public render(renderer: Renderer): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        if (!this.baseTexture)\n        {\n            this.baseTexture = (this.children[0] as any)._texture.baseTexture;\n            if (!this.baseTexture.valid)\n            {\n                this.baseTexture.once('update', () => this.onChildrenChange(0));\n            }\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    }\n\n    /**\n     * Set the flag that static data should be updated to true\n     *\n     * @private\n     * @param {number} smallestChildIndex - The smallest child index\n     */\n    protected onChildrenChange(smallestChildIndex: number): void\n    {\n        const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n        while (this._bufferUpdateIDs.length < bufferIndex)\n        {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    }\n\n    public dispose(): void\n    {\n        if (this._buffers)\n        {\n            for (let i = 0; i < this._buffers.length; ++i)\n            {\n                this._buffers[i].destroy();\n            }\n\n            this._buffers = null;\n        }\n    }\n\n    /**\n     * Destroys the container\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this.dispose();\n\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    }\n}\n","import { createIndicesForQuads } from '@pixi/utils';\nimport { Geometry, Buffer } from '@pixi/core';\nimport { TYPES } from '@pixi/constants';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { IParticleRendererProperty } from './ParticleRenderer';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport class ParticleBuffer\n{\n    public geometry: Geometry;\n    public staticStride: number;\n    public staticBuffer: Buffer;\n    public staticData: Float32Array;\n    public staticDataUint32: Uint32Array;\n    public dynamicStride: number;\n    public dynamicBuffer: Buffer;\n    public dynamicData: Float32Array;\n    public dynamicDataUint32: Uint32Array;\n    public _updateID: number;\n\n    indexBuffer: Buffer;\n    private size: number;\n    private dynamicProperties: IParticleRendererProperty[];\n    private staticProperties: IParticleRendererProperty[];\n\n    /**\n     * @private\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(properties: IParticleRendererProperty[], dynamicPropertyFlags: boolean[], size: number)\n    {\n        this.geometry = new Geometry();\n\n        this.indexBuffer = null;\n\n        /**\n         * The number of particles the buffer can hold\n         *\n         * @private\n         * @member {number}\n         */\n        this.size = size;\n\n        /**\n         * A list of the properties that are dynamic.\n         *\n         * @private\n         * @member {object[]}\n         */\n        this.dynamicProperties = [];\n\n        /**\n         * A list of the properties that are static.\n         *\n         * @private\n         * @member {object[]}\n         */\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attributeName: property.attributeName,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                type: property.type || TYPES.FLOAT,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    private initBuffers(): void\n    {\n        const geometry = this.geometry;\n\n        let dynamicOffset = 0;\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indexBuffer = new Buffer(createIndicesForQuads(this.size), true, true);\n        geometry.addIndex(this.indexBuffer);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = new Buffer(this.staticData, true, false);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.dynamicBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.dynamicStride * 4,\n                property.offset * 4\n            );\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.staticBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.staticStride * 4,\n                property.offset * 4\n            );\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @private\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadDynamic(children: DisplayObject[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer._updateID++;\n    }\n\n    /**\n     * Uploads the static properties.\n     *\n     * @private\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadStatic(children: DisplayObject[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer._updateID++;\n    }\n\n    /**\n     * Destroys the ParticleBuffer.\n     *\n     * @private\n     */\n    destroy(): void\n    {\n        this.indexBuffer = null;\n\n        this.dynamicProperties = null;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        // all buffers are destroyed inside geometry\n        this.geometry.destroy();\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { ObjectRenderer, Shader, State } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { correctBlendMode, premultiplyRgba, premultiplyTint } from '@pixi/utils';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { ParticleContainer } from './ParticleContainer';\nimport type { Renderer } from '@pixi/core';\n\nexport interface IParticleRendererProperty {\n    attributeName: string;\n    size: number;\n    type?: TYPES;\n    uploadFunction: (...params: any[]) => any;\n    offset: number;\n}\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n *\n * @class\n * @memberof PIXI\n */\nexport class ParticleRenderer extends ObjectRenderer\n{\n    public readonly state: State;\n    public shader: Shader;\n    public tempMatrix: Matrix;\n    public properties: IParticleRendererProperty[];\n\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this sprite batch works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        // and max number of element in the index buffer is 16384 * 6 = 98304\n        // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n        // let numIndices = 98304;\n\n        /**\n         * The default shader that is used if a sprite doesn't have a more specific one.\n         *\n         * @member {PIXI.Shader}\n         */\n        this.shader = null;\n\n        this.properties = null;\n\n        this.tempMatrix = new Matrix();\n\n        this.properties = [\n            // verticesData\n            {\n                attributeName: 'aVertexPosition',\n                size: 2,\n                uploadFunction: this.uploadVertices,\n                offset: 0,\n            },\n            // positionData\n            {\n                attributeName: 'aPositionCoord',\n                size: 2,\n                uploadFunction: this.uploadPosition,\n                offset: 0,\n            },\n            // rotationData\n            {\n                attributeName: 'aRotation',\n                size: 1,\n                uploadFunction: this.uploadRotation,\n                offset: 0,\n            },\n            // uvsData\n            {\n                attributeName: 'aTextureCoord',\n                size: 2,\n                uploadFunction: this.uploadUvs,\n                offset: 0,\n            },\n            // tintData\n            {\n                attributeName: 'aColor',\n                size: 1,\n                type: TYPES.UNSIGNED_BYTE,\n                uploadFunction: this.uploadTint,\n                offset: 0,\n            },\n        ];\n\n        this.shader = Shader.from(vertex, fragment, {});\n\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.state = State.for2d();\n    }\n\n    /**\n     * Renders the particle container object.\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     */\n    public render(container: ParticleContainer): void\n    {\n        const children = container.children;\n        const maxSize = container._maxSize;\n        const batchSize = container._batchSize;\n        const renderer = this.renderer;\n        let totalChildren = children.length;\n\n        if (totalChildren === 0)\n        {\n            return;\n        }\n        else if (totalChildren > maxSize && !container.autoResize)\n        {\n            totalChildren = maxSize;\n        }\n\n        let buffers = container._buffers;\n\n        if (!buffers)\n        {\n            buffers = container._buffers = this.generateBuffers(container);\n        }\n\n        const baseTexture = (children[0] as any)._texture.baseTexture;\n\n        // if the uvs have not updated then no point rendering just yet!\n        this.state.blendMode = correctBlendMode(container.blendMode, baseTexture.alphaMode);\n        renderer.state.set(this.state);\n\n        const gl = renderer.gl;\n\n        const m = container.worldTransform.copyTo(this.tempMatrix);\n\n        m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n\n        this.shader.uniforms.translationMatrix = m.toArray(true);\n\n        this.shader.uniforms.uColor = premultiplyRgba(container.tintRgb,\n            container.worldAlpha, this.shader.uniforms.uColor, baseTexture.alphaMode);\n\n        this.shader.uniforms.uSampler = baseTexture;\n\n        this.renderer.shader.bind(this.shader);\n\n        let updateStatic = false;\n\n        // now lets upload and render the buffers..\n        for (let i = 0, j = 0; i < totalChildren; i += batchSize, j += 1)\n        {\n            let amount = (totalChildren - i);\n\n            if (amount > batchSize)\n            {\n                amount = batchSize;\n            }\n\n            if (j >= buffers.length)\n            {\n                buffers.push(this._generateOneMoreBuffer(container));\n            }\n\n            const buffer = buffers[j];\n\n            // we always upload the dynamic\n            buffer.uploadDynamic(children, i, amount);\n\n            const bid = container._bufferUpdateIDs[j] || 0;\n\n            updateStatic = updateStatic || (buffer._updateID < bid);\n            // we only upload the static content when we have to!\n            if (updateStatic)\n            {\n                buffer._updateID = container._updateID;\n                buffer.uploadStatic(children, i, amount);\n            }\n\n            // bind the buffer\n            renderer.geometry.bind(buffer.geometry);\n            gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n        }\n    }\n\n    /**\n     * Creates one particle buffer for each child in the container we want to render and updates internal properties\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     * @return {PIXI.ParticleBuffer[]} The buffers\n     * @private\n     */\n    private generateBuffers(container: ParticleContainer): ParticleBuffer[]\n    {\n        const buffers = [];\n        const size = container._maxSize;\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        for (let i = 0; i < size; i += batchSize)\n        {\n            buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n        }\n\n        return buffers;\n    }\n\n    /**\n     * Creates one more particle buffer, because container has autoResize feature\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     * @return {PIXI.ParticleBuffer} generated buffer\n     * @private\n     */\n    private _generateOneMoreBuffer(container: ParticleContainer): ParticleBuffer\n    {\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n    }\n\n    /**\n     * Uploads the vertices.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their vertices uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    public uploadVertices(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite: any = children[startIndex + i];\n            const texture = sprite._texture;\n            const sx = sprite.scale.x;\n            const sy = sprite.scale.y;\n            const trim = texture.trim;\n            const orig = texture.orig;\n\n            if (trim)\n            {\n                // if the sprite is trimmed and is not a tilingsprite then we need to add the\n                // extra space before transforming the sprite coords..\n                w1 = trim.x - (sprite.anchor.x * orig.width);\n                w0 = w1 + trim.width;\n\n                h1 = trim.y - (sprite.anchor.y * orig.height);\n                h0 = h1 + trim.height;\n            }\n            else\n            {\n                w0 = (orig.width) * (1 - sprite.anchor.x);\n                w1 = (orig.width) * -sprite.anchor.x;\n\n                h0 = orig.height * (1 - sprite.anchor.y);\n                h1 = orig.height * -sprite.anchor.y;\n            }\n\n            array[offset] = w1 * sx;\n            array[offset + 1] = h1 * sy;\n\n            array[offset + stride] = w0 * sx;\n            array[offset + stride + 1] = h1 * sy;\n\n            array[offset + (stride * 2)] = w0 * sx;\n            array[offset + (stride * 2) + 1] = h0 * sy;\n\n            array[offset + (stride * 3)] = w1 * sx;\n            array[offset + (stride * 3) + 1] = h0 * sy;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the position.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their positions uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    public uploadPosition(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spritePosition = children[startIndex + i].position;\n\n            array[offset] = spritePosition.x;\n            array[offset + 1] = spritePosition.y;\n\n            array[offset + stride] = spritePosition.x;\n            array[offset + stride + 1] = spritePosition.y;\n\n            array[offset + (stride * 2)] = spritePosition.x;\n            array[offset + (stride * 2) + 1] = spritePosition.y;\n\n            array[offset + (stride * 3)] = spritePosition.x;\n            array[offset + (stride * 3) + 1] = spritePosition.y;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the rotation.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    public uploadRotation(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spriteRotation = children[startIndex + i].rotation;\n\n            array[offset] = spriteRotation;\n            array[offset + stride] = spriteRotation;\n            array[offset + (stride * 2)] = spriteRotation;\n            array[offset + (stride * 3)] = spriteRotation;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the Uvs\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    public uploadUvs(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const textureUvs = (children[startIndex + i] as any)._texture._uvs;\n\n            if (textureUvs)\n            {\n                array[offset] = textureUvs.x0;\n                array[offset + 1] = textureUvs.y0;\n\n                array[offset + stride] = textureUvs.x1;\n                array[offset + stride + 1] = textureUvs.y1;\n\n                array[offset + (stride * 2)] = textureUvs.x2;\n                array[offset + (stride * 2) + 1] = textureUvs.y2;\n\n                array[offset + (stride * 3)] = textureUvs.x3;\n                array[offset + (stride * 3) + 1] = textureUvs.y3;\n\n                offset += stride * 4;\n            }\n            else\n            {\n                // TODO you know this can be easier!\n                array[offset] = 0;\n                array[offset + 1] = 0;\n\n                array[offset + stride] = 0;\n                array[offset + stride + 1] = 0;\n\n                array[offset + (stride * 2)] = 0;\n                array[offset + (stride * 2) + 1] = 0;\n\n                array[offset + (stride * 3)] = 0;\n                array[offset + (stride * 3) + 1] = 0;\n\n                offset += stride * 4;\n            }\n        }\n    }\n\n    /**\n     * Uploads the tint.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    public uploadTint(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite: any = children[startIndex + i];\n            const premultiplied = sprite._texture.baseTexture.alphaMode > 0;\n            const alpha = sprite.alpha;\n\n            // we dont call extra function if alpha is 1.0, that's faster\n            const argb = alpha < 1.0 && premultiplied\n                ? premultiplyTint(sprite._tintRGB, alpha) : sprite._tintRGB + (alpha * 255 << 24);\n\n            array[offset] = argb;\n            array[offset + stride] = argb;\n            array[offset + (stride * 2)] = argb;\n            array[offset + (stride * 3)] = argb;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Destroys the ParticleRenderer.\n     */\n    public destroy(): void\n    {\n        super.destroy();\n\n        if (this.shader)\n        {\n            this.shader.destroy();\n            this.shader = null;\n        }\n\n        this.tempMatrix = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}