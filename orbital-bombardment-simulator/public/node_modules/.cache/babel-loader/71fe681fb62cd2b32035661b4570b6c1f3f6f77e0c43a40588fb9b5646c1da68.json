{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\n\n// Define the asset paths\nconst ASSET_PATHS = {\n  BACKGROUND: '/assets/game_background.png',\n  SHIPS: {\n    [SHIPS.SMALL.id]: '/assets/small_ship.png',\n    [SHIPS.MEDIUM.id]: '/assets/medium_ship.png',\n    [SHIPS.LARGE.id]: '/assets/big_ship.png'\n  }\n};\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      if (!ship || !ship.type || !ship.type.id) {\n        console.error('Invalid ship object:', ship);\n        throw new Error('Invalid ship object');\n      }\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.SMALL.id]),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.MEDIUM.id]),\n        [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.LARGE.id])\n      };\n      if (!this.textures[ship.type.id]) {\n        console.error('Invalid ship type:', ship.type.id);\n        throw new Error('Invalid ship type');\n      }\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n      throw error;\n    }\n  }\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n      switch (ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.5);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.75);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(1);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(1);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\nclass BulletRenderer {\n  constructor(bullet) {\n    this.sprite = new PIXI.Graphics();\n    this.updateSprite(bullet);\n  }\n  updateSprite(bullet) {\n    this.sprite.clear();\n    this.sprite.beginFill(0xFFFF00);\n    this.sprite.drawCircle(0, 0, 2);\n    this.sprite.endFill();\n  }\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\nclass PlanetRenderer {\n  constructor(planet, x, y) {\n    this.planet = planet;\n    this.x = x;\n    this.y = y;\n    this.rotation = 0;\n    this.planetSprite = new PIXI.Graphics();\n    this.healthBarSprite = new PIXI.Graphics();\n    this.healthBarSprite.x = x - 50;\n    this.healthBarSprite.y = y + 60;\n    this.nameText = new PIXI.Text(planet.name, {\n      fontFamily: \"'Exo', sans-serif\",\n      fontSize: 18,\n      fill: 0xFFFFFF,\n      align: 'center'\n    });\n    this.nameText.anchor.set(0.5);\n    this.nameText.x = x;\n    this.nameText.y = y - 70;\n    this.updateSprite();\n  }\n  updateSprite() {\n    const renderType = PLANET_RENDERER_CONFIGS[this.planet.id.toUpperCase()];\n    const radius = Math.random() * (renderType.maxRadius - renderType.minRadius) + renderType.minRadius;\n    const craterCount = Math.floor(Math.random() * (renderType.maxCraterCount - renderType.minCraterCount + 1)) + renderType.minCraterCount;\n    this.planetSprite.clear();\n    this.planetSprite.beginFill(renderType.color);\n    this.planetSprite.drawCircle(0, 0, radius);\n    this.planetSprite.endFill();\n    this.planetSprite.beginFill(0x000000, renderType.craterOpacity);\n    for (let i = 0; i < craterCount; i++) {\n      const craterAngle = Math.random() * Math.PI * 2;\n      const craterDistance = Math.random() * (radius * renderType.craterDistanceFactor);\n      const craterX = Math.cos(craterAngle) * craterDistance;\n      const craterY = Math.sin(craterAngle) * craterDistance;\n      const craterRadius = Math.random() * (radius * (renderType.maxCraterSize - renderType.minCraterSize)) + radius * renderType.minCraterSize;\n      this.planetSprite.drawCircle(craterX, craterY, craterRadius);\n    }\n    this.planetSprite.endFill();\n  }\n  render(health) {\n    this.planetSprite.x = this.x;\n    this.planetSprite.y = this.y;\n    this.planetSprite.rotation = this.rotation;\n    this.healthBarSprite.clear();\n    this.healthBarSprite.beginFill(0x00FF00);\n    this.healthBarSprite.drawRect(0, 0, health / this.planet.maxHealth * 100, 10);\n    this.healthBarSprite.endFill();\n    this.nameText.text = this.planet.name;\n  }\n  updateRotation(deltaTime) {\n    const renderType = PLANET_RENDERER_CONFIGS[this.planet.id.toUpperCase()];\n    this.rotation += renderType.rotationSpeed * deltaTime;\n  }\n}\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000\n      });\n      container.appendChild(this.app.view);\n\n      // Load background\n      this.background = PIXI.Sprite.from(ASSET_PATHS.BACKGROUND);\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n      this.planetRenderer = new PlanetRenderer(initialPlanet, width / 2, height / 2);\n      this.app.stage.addChild(this.planetRenderer.planetSprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n      this.shipPool = new ObjectPool(() => new ShipRenderer({\n        type: {\n          id: SHIPS.SMALL.id\n        }\n      }));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({}));\n      this.planetPool = new ObjectPool(() => new PlanetRenderer({}, width / 2, height / 2));\n      this.lastUpdateTime = Date.now();\n\n      // Preload all textures\n      this.preloadTextures();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n  preloadTextures() {\n    Object.values(ASSET_PATHS.SHIPS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n  }\n  getShipRenderer(ship) {\n    try {\n      if (!this.shipRenderers.has(ship)) {\n        console.log('Creating new ShipRenderer for ship:', ship);\n        const renderer = this.shipPool.get();\n        renderer.updateSprite(ship);\n        this.app.stage.addChild(renderer.sprite);\n        this.shipRenderers.set(ship, renderer);\n      }\n      return this.shipRenderers.get(ship);\n    } catch (error) {\n      console.error('Error in getShipRenderer:', error);\n      console.error('Ship object:', ship);\n      throw error; // Re-throw the error to be caught by the caller\n    }\n  }\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.planet !== planet) {\n      this.app.stage.removeChild(this.planetRenderer.planetSprite);\n      this.app.stage.removeChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.removeChild(this.planetRenderer.nameText);\n      this.planetPool.release(this.planetRenderer);\n      this.planetRenderer = this.planetPool.get();\n      this.planetRenderer.planet = planet;\n      this.planetRenderer.updateSprite();\n      this.app.stage.addChild(this.planetRenderer.planetSprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n    }\n    return this.planetRenderer;\n  }\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n      simulation.ships.forEach(ship => {\n        try {\n          const renderer = this.getShipRenderer(ship);\n          renderer.render(ship);\n        } catch (error) {\n          console.error('Error rendering ship:', error);\n          console.error('Problematic ship:', ship);\n        }\n      });\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(simulation.getPlanetHealth());\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n  destroy() {\n    this.app.destroy(true);\n  }\n}","map":{"version":3,"names":["PIXI","PLANET_RENDERER_CONFIGS","SHIPS","ObjectPool","ASSET_PATHS","BACKGROUND","SMALL","id","MEDIUM","LARGE","ShipRenderer","constructor","ship","type","console","error","Error","textures","Texture","from","sprite","Sprite","anchor","set","updateSprite","texture","scale","warn","render","x","y","rotation","angle","Math","PI","BulletRenderer","bullet","Graphics","clear","beginFill","drawCircle","endFill","PlanetRenderer","planet","planetSprite","healthBarSprite","nameText","Text","name","fontFamily","fontSize","fill","align","renderType","toUpperCase","radius","random","maxRadius","minRadius","craterCount","floor","maxCraterCount","minCraterCount","color","craterOpacity","i","craterAngle","craterDistance","craterDistanceFactor","craterX","cos","craterY","sin","craterRadius","maxCraterSize","minCraterSize","health","drawRect","maxHealth","text","updateRotation","deltaTime","rotationSpeed","GameRenderer","container","width","height","initialPlanet","app","Application","backgroundColor","appendChild","view","background","stage","addChild","shipRenderers","Map","bulletRenderers","planetRenderer","shipPool","bulletPool","planetPool","lastUpdateTime","Date","now","preloadTextures","Object","values","forEach","path","getShipRenderer","has","log","renderer","get","getBulletRenderer","getPlanetRenderer","removeChild","release","removeShipRenderer","delete","removeBulletRenderer","updatePlanetRotation","currentTime","simulation","ships","bullets","includes","currentPlanet","getCurrentPlanet","getPlanetHealth","destroy"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/src/render/renderer.js"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\n\n// Define the asset paths\nconst ASSET_PATHS = {\n  BACKGROUND: '/assets/game_background.png',\n  SHIPS: {\n    [SHIPS.SMALL.id]: '/assets/small_ship.png',\n    [SHIPS.MEDIUM.id]: '/assets/medium_ship.png',\n    [SHIPS.LARGE.id]: '/assets/big_ship.png',\n  }\n};\n\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      if (!ship || !ship.type || !ship.type.id) {\n        console.error('Invalid ship object:', ship);\n        throw new Error('Invalid ship object');\n      }\n\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.SMALL.id]),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.MEDIUM.id]),\n        [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.LARGE.id]),\n      };\n\n      if (!this.textures[ship.type.id]) {\n        console.error('Invalid ship type:', ship.type.id);\n        throw new Error('Invalid ship type');\n      }\n\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n      throw error;\n    }\n  }\n\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n\n      switch(ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.5);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.75);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(1);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(1);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\n\nclass BulletRenderer {\n  constructor(bullet) {\n    this.sprite = new PIXI.Graphics();\n    this.updateSprite(bullet);\n  }\n\n  updateSprite(bullet) {\n    this.sprite.clear();\n    this.sprite.beginFill(0xFFFF00);\n    this.sprite.drawCircle(0, 0, 2);\n    this.sprite.endFill();\n  }\n\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\n\nclass PlanetRenderer {\n  constructor(planet, x, y) {\n    this.planet = planet;\n    this.x = x;\n    this.y = y;\n    this.rotation = 0;\n\n    this.planetSprite = new PIXI.Graphics();\n    this.healthBarSprite = new PIXI.Graphics();\n    this.healthBarSprite.x = x - 50;\n    this.healthBarSprite.y = y + 60;\n\n    this.nameText = new PIXI.Text(planet.name, {\n      fontFamily: \"'Exo', sans-serif\",\n      fontSize: 18,\n      fill: 0xFFFFFF,\n      align: 'center'\n    });\n    this.nameText.anchor.set(0.5);\n    this.nameText.x = x;\n    this.nameText.y = y - 70;\n\n    this.updateSprite();\n  }\n\n  updateSprite() {\n    const renderType = PLANET_RENDERER_CONFIGS[this.planet.id.toUpperCase()];\n    const radius = Math.random() * (renderType.maxRadius - renderType.minRadius) + renderType.minRadius;\n    const craterCount = Math.floor(Math.random() * (renderType.maxCraterCount - renderType.minCraterCount + 1)) + renderType.minCraterCount;\n\n    this.planetSprite.clear();\n    this.planetSprite.beginFill(renderType.color);\n    this.planetSprite.drawCircle(0, 0, radius);\n    this.planetSprite.endFill();\n\n    this.planetSprite.beginFill(0x000000, renderType.craterOpacity);\n    for (let i = 0; i < craterCount; i++) {\n      const craterAngle = Math.random() * Math.PI * 2;\n      const craterDistance = Math.random() * (radius * renderType.craterDistanceFactor);\n      const craterX = Math.cos(craterAngle) * craterDistance;\n      const craterY = Math.sin(craterAngle) * craterDistance;\n      const craterRadius = Math.random() * (radius * (renderType.maxCraterSize - renderType.minCraterSize)) + (radius * renderType.minCraterSize);\n      this.planetSprite.drawCircle(craterX, craterY, craterRadius);\n    }\n    this.planetSprite.endFill();\n  }\n\n  render(health) {\n    this.planetSprite.x = this.x;\n    this.planetSprite.y = this.y;\n    this.planetSprite.rotation = this.rotation;\n\n    this.healthBarSprite.clear();\n    this.healthBarSprite.beginFill(0x00FF00);\n    this.healthBarSprite.drawRect(0, 0, (health / this.planet.maxHealth) * 100, 10);\n    this.healthBarSprite.endFill();\n\n    this.nameText.text = this.planet.name;\n  }\n\n  updateRotation(deltaTime) {\n    const renderType = PLANET_RENDERER_CONFIGS[this.planet.id.toUpperCase()];\n    this.rotation += renderType.rotationSpeed * deltaTime;\n  }\n}\n\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000,\n      });\n      container.appendChild(this.app.view);\n\n      // Load background\n      this.background = PIXI.Sprite.from(ASSET_PATHS.BACKGROUND);\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n      this.planetRenderer = new PlanetRenderer(initialPlanet, width / 2, height / 2);\n\n      this.app.stage.addChild(this.planetRenderer.planetSprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n\n      this.shipPool = new ObjectPool(() => new ShipRenderer({type: {id: SHIPS.SMALL.id}}));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({}));\n      this.planetPool = new ObjectPool(() => new PlanetRenderer({}, width / 2, height / 2));\n\n      this.lastUpdateTime = Date.now();\n\n      // Preload all textures\n      this.preloadTextures();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n\n  preloadTextures() {\n    Object.values(ASSET_PATHS.SHIPS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n  }\n\n  getShipRenderer(ship) {\n    try {\n      if (!this.shipRenderers.has(ship)) {\n        console.log('Creating new ShipRenderer for ship:', ship);\n        const renderer = this.shipPool.get();\n        renderer.updateSprite(ship);\n        this.app.stage.addChild(renderer.sprite);\n        this.shipRenderers.set(ship, renderer);\n      }\n      return this.shipRenderers.get(ship);\n    } catch (error) {\n      console.error('Error in getShipRenderer:', error);\n      console.error('Ship object:', ship);\n      throw error;  // Re-throw the error to be caught by the caller\n    }\n  }\n\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.planet !== planet) {\n      this.app.stage.removeChild(this.planetRenderer.planetSprite);\n      this.app.stage.removeChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.removeChild(this.planetRenderer.nameText);\n\n      this.planetPool.release(this.planetRenderer);\n      this.planetRenderer = this.planetPool.get();\n      this.planetRenderer.planet = planet;\n      this.planetRenderer.updateSprite();\n\n      this.app.stage.addChild(this.planetRenderer.planetSprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n    }\n    return this.planetRenderer;\n  }\n\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n\n      simulation.ships.forEach(ship => {\n        try {\n          const renderer = this.getShipRenderer(ship);\n          renderer.render(ship);\n        } catch (error) {\n          console.error('Error rendering ship:', error);\n          console.error('Problematic ship:', ship);\n        }\n      });\n\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(simulation.getPlanetHealth());\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n\n  destroy() {\n    this.app.destroy(true);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}