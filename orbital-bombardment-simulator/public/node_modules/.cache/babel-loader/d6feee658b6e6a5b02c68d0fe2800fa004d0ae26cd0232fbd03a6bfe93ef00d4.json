{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { SHIP_RENDERER_CONFIGS, PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { ObjectPool } from './utils';\nclass ShipRenderer {\n  constructor(ship) {\n    // Load textures for each ship type\n    this.textures = {\n      [SHIPS.SMALL.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/small_ship.png'),\n      [SHIPS.MEDIUM.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/medium_ship.png'),\n      [SHIPS.LARGE.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/big_ship.png')\n    };\n    this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n    this.sprite.anchor.set(0.5); // Center the sprite\n    this.updateSprite(ship);\n  }\n  updateSprite(ship) {\n    if (!ship || !ship.type) return;\n    this.sprite.texture = this.textures[ship.type.id];\n\n    // Adjust the sprite scale if needed\n    // You might need to tweak these values depending on your sprite sizes\n    switch (ship.type.id) {\n      case SHIPS.SMALL.id:\n        this.sprite.scale.set(0.5);\n        break;\n      case SHIPS.MEDIUM.id:\n        this.sprite.scale.set(0.75);\n        break;\n      case SHIPS.LARGE.id:\n        this.sprite.scale.set(1);\n        break;\n    }\n  }\n  render(ship) {\n    this.sprite.x = ship.x;\n    this.sprite.y = ship.y;\n    this.sprite.rotation = ship.angle + Math.PI / 2; // Adjust rotation if needed\n  }\n}\nclass BulletRenderer {\n  constructor(bullet) {\n    this.sprite = new PIXI.Graphics();\n    this.updateSprite(bullet);\n  }\n  updateSprite(bullet) {\n    this.sprite.clear();\n    this.sprite.beginFill(0xFFFF00);\n    this.sprite.drawCircle(0, 0, 2);\n    this.sprite.endFill();\n  }\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\nclass PlanetRenderer {\n  constructor(planet, x, y) {\n    this.planet = planet;\n    this.x = x;\n    this.y = y;\n    this.rotation = 0;\n    this.planetSprite = new PIXI.Graphics();\n    this.healthBarSprite = new PIXI.Graphics();\n    this.healthBarSprite.x = x - 50;\n    this.healthBarSprite.y = y + 60;\n    this.nameText = new PIXI.Text(planet.name, {\n      fontFamily: 'Arial',\n      fontSize: 18,\n      fill: 0xFFFFFF,\n      align: 'center'\n    });\n    this.nameText.anchor.set(0.5);\n    this.nameText.x = x;\n    this.nameText.y = y - 70;\n    this.updateSprite();\n  }\n  updateSprite() {\n    const renderType = PLANET_RENDERER_CONFIGS[this.planet.id.toUpperCase()];\n    const radius = Math.random() * (renderType.maxRadius - renderType.minRadius) + renderType.minRadius;\n    const craterCount = Math.floor(Math.random() * (renderType.maxCraterCount - renderType.minCraterCount + 1)) + renderType.minCraterCount;\n    this.planetSprite.clear();\n    this.planetSprite.beginFill(renderType.color);\n    this.planetSprite.drawCircle(0, 0, radius);\n    this.planetSprite.endFill();\n\n    // Draw craters\n    this.planetSprite.beginFill(0x000000, renderType.craterOpacity);\n    for (let i = 0; i < craterCount; i++) {\n      const craterAngle = Math.random() * Math.PI * 2;\n      const craterDistance = Math.random() * (radius * renderType.craterDistanceFactor);\n      const craterX = Math.cos(craterAngle) * craterDistance;\n      const craterY = Math.sin(craterAngle) * craterDistance;\n      const craterRadius = Math.random() * (radius * (renderType.maxCraterSize - renderType.minCraterSize)) + radius * renderType.minCraterSize;\n      this.planetSprite.drawCircle(craterX, craterY, craterRadius);\n    }\n    this.planetSprite.endFill();\n  }\n  render(health) {\n    this.planetSprite.x = this.x;\n    this.planetSprite.y = this.y;\n    this.planetSprite.rotation = this.rotation;\n    this.healthBarSprite.clear();\n    this.healthBarSprite.beginFill(0x00FF00);\n    this.healthBarSprite.drawRect(0, 0, health / this.planet.maxHealth * 100, 10);\n    this.healthBarSprite.endFill();\n    this.nameText.text = this.planet.name;\n  }\n  updateRotation(deltaTime) {\n    const renderType = PLANET_RENDERER_CONFIGS[this.planet.id.toUpperCase()];\n    this.rotation += renderType.rotationSpeed * deltaTime;\n  }\n}\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    this.width = width;\n    this.height = height;\n    this.app = new PIXI.Application({\n      width,\n      height,\n      backgroundColor: 0x000000\n    });\n    container.appendChild(this.app.view);\n\n    // Load and add background sprite\n    this.background = PIXI.Sprite.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/game_background.png');\n    this.background.width = width;\n    this.background.height = height;\n    this.app.stage.addChild(this.background);\n    this.shipRenderers = new Map();\n    this.bulletRenderers = new Map();\n    this.planetRenderer = new PlanetRenderer(initialPlanet, width / 2, height / 2);\n    this.app.stage.addChild(this.planetRenderer.planetSprite);\n    this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n    this.app.stage.addChild(this.planetRenderer.nameText);\n    this.shipPool = new ObjectPool(() => new ShipRenderer({}));\n    this.bulletPool = new ObjectPool(() => new BulletRenderer({}));\n    this.planetPool = new ObjectPool(() => new PlanetRenderer({}, width / 2, height / 2));\n    this.lastUpdateTime = Date.now();\n  }\n  getShipRenderer(ship) {\n    if (!this.shipRenderers.has(ship)) {\n      const renderer = this.shipPool.get();\n      renderer.updateSprite(ship);\n      this.app.stage.addChild(renderer.sprite);\n      this.shipRenderers.set(ship, renderer);\n    }\n    return this.shipRenderers.get(ship);\n  }\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.planet !== planet) {\n      this.app.stage.removeChild(this.planetRenderer.planetSprite);\n      this.app.stage.removeChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.removeChild(this.planetRenderer.nameText);\n      this.planetPool.release(this.planetRenderer);\n      this.planetRenderer = this.planetPool.get();\n      this.planetRenderer.planet = planet;\n      this.planetRenderer.updateSprite();\n      this.app.stage.addChild(this.planetRenderer.planetSprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n    }\n    return this.planetRenderer;\n  }\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n  render(simulation) {\n    this.updatePlanetRotation();\n    simulation.ships.forEach(ship => {\n      const renderer = this.getShipRenderer(ship);\n      renderer.render(ship);\n    });\n    this.shipRenderers.forEach((renderer, ship) => {\n      if (!simulation.ships.includes(ship)) {\n        this.removeShipRenderer(ship);\n      }\n    });\n    simulation.bullets.forEach(bullet => {\n      const renderer = this.getBulletRenderer(bullet);\n      renderer.render(bullet);\n    });\n    this.bulletRenderers.forEach((renderer, bullet) => {\n      if (!simulation.bullets.includes(bullet)) {\n        this.removeBulletRenderer(bullet);\n      }\n    });\n    const currentPlanet = simulation.getCurrentPlanet();\n    const planetRenderer = this.getPlanetRenderer(currentPlanet);\n    planetRenderer.render(simulation.getPlanetHealth());\n  }\n  destroy() {\n    this.app.destroy(true);\n  }\n}","map":{"version":3,"names":["PIXI","SHIP_RENDERER_CONFIGS","PLANET_RENDERER_CONFIGS","ObjectPool","ShipRenderer","constructor","ship","textures","SHIPS","SMALL","id","Texture","from","MEDIUM","LARGE","sprite","Sprite","type","anchor","set","updateSprite","texture","scale","render","x","y","rotation","angle","Math","PI","BulletRenderer","bullet","Graphics","clear","beginFill","drawCircle","endFill","PlanetRenderer","planet","planetSprite","healthBarSprite","nameText","Text","name","fontFamily","fontSize","fill","align","renderType","toUpperCase","radius","random","maxRadius","minRadius","craterCount","floor","maxCraterCount","minCraterCount","color","craterOpacity","i","craterAngle","craterDistance","craterDistanceFactor","craterX","cos","craterY","sin","craterRadius","maxCraterSize","minCraterSize","health","drawRect","maxHealth","text","updateRotation","deltaTime","rotationSpeed","GameRenderer","container","width","height","initialPlanet","app","Application","backgroundColor","appendChild","view","background","stage","addChild","shipRenderers","Map","bulletRenderers","planetRenderer","shipPool","bulletPool","planetPool","lastUpdateTime","Date","now","getShipRenderer","has","renderer","get","getBulletRenderer","getPlanetRenderer","removeChild","release","removeShipRenderer","delete","removeBulletRenderer","updatePlanetRotation","currentTime","simulation","ships","forEach","includes","bullets","currentPlanet","getCurrentPlanet","getPlanetHealth","destroy"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/src/render/renderer.js"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport { SHIP_RENDERER_CONFIGS, PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { ObjectPool } from './utils';\n\nclass ShipRenderer {\n  constructor(ship) {\n    // Load textures for each ship type\n    this.textures = {\n      [SHIPS.SMALL.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/small_ship.png'),\n      [SHIPS.MEDIUM.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/medium_ship.png'),\n      [SHIPS.LARGE.id]: PIXI.Texture.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/big_ship.png'),\n    };\n    this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n    this.sprite.anchor.set(0.5);  // Center the sprite\n    this.updateSprite(ship);\n  }\n\n  updateSprite(ship) {\n    if (!ship || !ship.type) return;\n    this.sprite.texture = this.textures[ship.type.id];\n\n    // Adjust the sprite scale if needed\n    // You might need to tweak these values depending on your sprite sizes\n    switch(ship.type.id) {\n      case SHIPS.SMALL.id:\n        this.sprite.scale.set(0.5);\n        break;\n      case SHIPS.MEDIUM.id:\n        this.sprite.scale.set(0.75);\n        break;\n      case SHIPS.LARGE.id:\n        this.sprite.scale.set(1);\n        break;\n    }\n  }\n\n  render(ship) {\n    this.sprite.x = ship.x;\n    this.sprite.y = ship.y;\n    this.sprite.rotation = ship.angle + Math.PI / 2;  // Adjust rotation if needed\n  }\n}\n\nclass BulletRenderer {\n  constructor(bullet) {\n    this.sprite = new PIXI.Graphics();\n    this.updateSprite(bullet);\n  }\n\n  updateSprite(bullet) {\n    this.sprite.clear();\n    this.sprite.beginFill(0xFFFF00);\n    this.sprite.drawCircle(0, 0, 2);\n    this.sprite.endFill();\n  }\n\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\n\nclass PlanetRenderer {\n  constructor(planet, x, y) {\n    this.planet = planet;\n    this.x = x;\n    this.y = y;\n    this.rotation = 0;\n\n    this.planetSprite = new PIXI.Graphics();\n    this.healthBarSprite = new PIXI.Graphics();\n    this.healthBarSprite.x = x - 50;\n    this.healthBarSprite.y = y + 60;\n\n    this.nameText = new PIXI.Text(planet.name, {\n      fontFamily: 'Arial',\n      fontSize: 18,\n      fill: 0xFFFFFF,\n      align: 'center'\n    });\n    this.nameText.anchor.set(0.5);\n    this.nameText.x = x;\n    this.nameText.y = y - 70;\n\n    this.updateSprite();\n  }\n\n  updateSprite() {\n    const renderType = PLANET_RENDERER_CONFIGS[this.planet.id.toUpperCase()];\n    const radius = Math.random() * (renderType.maxRadius - renderType.minRadius) + renderType.minRadius;\n    const craterCount = Math.floor(Math.random() * (renderType.maxCraterCount - renderType.minCraterCount + 1)) + renderType.minCraterCount;\n\n    this.planetSprite.clear();\n    this.planetSprite.beginFill(renderType.color);\n    this.planetSprite.drawCircle(0, 0, radius);\n    this.planetSprite.endFill();\n\n    // Draw craters\n    this.planetSprite.beginFill(0x000000, renderType.craterOpacity);\n    for (let i = 0; i < craterCount; i++) {\n      const craterAngle = Math.random() * Math.PI * 2;\n      const craterDistance = Math.random() * (radius * renderType.craterDistanceFactor);\n      const craterX = Math.cos(craterAngle) * craterDistance;\n      const craterY = Math.sin(craterAngle) * craterDistance;\n      const craterRadius = Math.random() * (radius * (renderType.maxCraterSize - renderType.minCraterSize)) + (radius * renderType.minCraterSize);\n      this.planetSprite.drawCircle(craterX, craterY, craterRadius);\n    }\n    this.planetSprite.endFill();\n  }\n\n  render(health) {\n    this.planetSprite.x = this.x;\n    this.planetSprite.y = this.y;\n    this.planetSprite.rotation = this.rotation;\n\n    this.healthBarSprite.clear();\n    this.healthBarSprite.beginFill(0x00FF00);\n    this.healthBarSprite.drawRect(0, 0, (health / this.planet.maxHealth) * 100, 10);\n    this.healthBarSprite.endFill();\n\n    this.nameText.text = this.planet.name;\n  }\n\n  updateRotation(deltaTime) {\n    const renderType = PLANET_RENDERER_CONFIGS[this.planet.id.toUpperCase()];\n    this.rotation += renderType.rotationSpeed * deltaTime;\n  }\n}\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    this.width = width;\n    this.height = height;\n    this.app = new PIXI.Application({\n      width,\n      height,\n      backgroundColor: 0x000000,\n    });\n    container.appendChild(this.app.view);\n\n    // Load and add background sprite\n    this.background = PIXI.Sprite.from('orbital-bombardment-simulator/orbital-bombardment-simulator/assets/game_background.png');\n    this.background.width = width;\n    this.background.height = height;\n    this.app.stage.addChild(this.background);\n\n    this.shipRenderers = new Map();\n    this.bulletRenderers = new Map();\n    this.planetRenderer = new PlanetRenderer(initialPlanet, width / 2, height / 2);\n\n    this.app.stage.addChild(this.planetRenderer.planetSprite);\n    this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n    this.app.stage.addChild(this.planetRenderer.nameText);\n\n    this.shipPool = new ObjectPool(() => new ShipRenderer({}));\n    this.bulletPool = new ObjectPool(() => new BulletRenderer({}));\n    this.planetPool = new ObjectPool(() => new PlanetRenderer({}, width / 2, height / 2));\n\n    this.lastUpdateTime = Date.now();\n  }\n\n  getShipRenderer(ship) {\n    if (!this.shipRenderers.has(ship)) {\n      const renderer = this.shipPool.get();\n      renderer.updateSprite(ship);\n      this.app.stage.addChild(renderer.sprite);\n      this.shipRenderers.set(ship, renderer);\n    }\n    return this.shipRenderers.get(ship);\n  }\n\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.planet !== planet) {\n      this.app.stage.removeChild(this.planetRenderer.planetSprite);\n      this.app.stage.removeChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.removeChild(this.planetRenderer.nameText);\n      \n      this.planetPool.release(this.planetRenderer);\n      this.planetRenderer = this.planetPool.get();\n      this.planetRenderer.planet = planet;\n      this.planetRenderer.updateSprite();\n      \n      this.app.stage.addChild(this.planetRenderer.planetSprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n    }\n    return this.planetRenderer;\n  }\n\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n\n  render(simulation) {\n    this.updatePlanetRotation();\n\n    simulation.ships.forEach(ship => {\n      const renderer = this.getShipRenderer(ship);\n      renderer.render(ship);\n    });\n\n    this.shipRenderers.forEach((renderer, ship) => {\n      if (!simulation.ships.includes(ship)) {\n        this.removeShipRenderer(ship);\n      }\n    });\n\n    simulation.bullets.forEach(bullet => {\n      const renderer = this.getBulletRenderer(bullet);\n      renderer.render(bullet);\n    });\n\n    this.bulletRenderers.forEach((renderer, bullet) => {\n      if (!simulation.bullets.includes(bullet)) {\n        this.removeBulletRenderer(bullet);\n      }\n    });\n\n    const currentPlanet = simulation.getCurrentPlanet();\n    const planetRenderer = this.getPlanetRenderer(currentPlanet);\n    planetRenderer.render(simulation.getPlanetHealth());\n  }\n\n  destroy() {\n    this.app.destroy(true);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}