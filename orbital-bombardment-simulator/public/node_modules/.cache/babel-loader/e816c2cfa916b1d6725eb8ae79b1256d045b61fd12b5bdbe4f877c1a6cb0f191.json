{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\nconst ASSET_PATHS = {\n  BACKGROUND: '/assets/game_background.png',\n  SHIPS: {\n    [SHIPS.SMALL.id]: '/assets/small_ship.png',\n    [SHIPS.MEDIUM.id]: '/assets/medium_ship.png',\n    [SHIPS.LARGE.id]: '/assets/big_ship.png'\n  },\n  PLANETS: {\n    MERCURY: '/assets/planets/mercury.png',\n    VENUS: '/assets/planets/venus.png',\n    EARTH: '/assets/planets/earth.png',\n    MARS: '/assets/planets/mars.png',\n    JUPITER: '/assets/planets/jupiter.png'\n  },\n  BULLETS: {\n    SMALL: '/assets/bullet_small.png',\n    MEDIUM: '/assets/bullet_medium.png',\n    LARGE: '/assets/bullet_large.png'\n  },\n  EXPLOSION: '/assets/explosion_spritesheet.png' // Explosion sprite sheet path\n};\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      if (!ship || !ship.type || !ship.type.id) {\n        console.error('Invalid ship object:', ship);\n        throw new Error('Invalid ship object');\n      }\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.SMALL.id]),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.MEDIUM.id]),\n        [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.LARGE.id])\n      };\n      if (!this.textures[ship.type.id]) {\n        console.error('Invalid ship type:', ship.type.id);\n        throw new Error('Invalid ship type');\n      }\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n      throw error;\n    }\n  }\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n      switch (ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.25);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.3);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(0.37);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(0.5);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\nclass BulletRenderer {\n  constructor(bullet) {\n    this.textures = {\n      [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.SMALL),\n      [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.MEDIUM),\n      [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.LARGE)\n    };\n    this.sprite = new PIXI.Sprite(this.textures[SHIPS.SMALL.id]); // Default to small bullet\n    this.sprite.anchor.set(0.5);\n    this.updateSprite(bullet);\n  }\n  updateSprite(bullet) {\n    if (!bullet || !bullet.shipType) {\n      console.warn('Invalid bullet object:', bullet);\n      return;\n    }\n    if (this.textures[bullet.shipType]) {\n      this.sprite.texture = this.textures[bullet.shipType];\n    } else {\n      console.warn(`Unexpected ship type for bullet: ${bullet.shipType}`);\n      this.sprite.texture = this.textures[SHIPS.SMALL.id];\n    }\n    switch (bullet.shipType) {\n      case SHIPS.SMALL.id:\n        this.sprite.scale.set(1);\n        break;\n      case SHIPS.MEDIUM.id:\n        this.sprite.scale.set(1);\n        break;\n      case SHIPS.LARGE.id:\n        this.sprite.scale.set(1);\n        break;\n    }\n  }\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\nclass PlanetRenderer {\n  constructor(planet) {\n    try {\n      if (!planet || !planet.id) {\n        console.error('Invalid planet object:', planet);\n        throw new Error('Invalid planet object');\n      }\n      this.textures = {\n        MERCURY: PIXI.Texture.from(ASSET_PATHS.PLANETS.MERCURY),\n        VENUS: PIXI.Texture.from(ASSET_PATHS.PLANETS.VENUS),\n        EARTH: PIXI.Texture.from(ASSET_PATHS.PLANETS.EARTH),\n        MARS: PIXI.Texture.from(ASSET_PATHS.PLANETS.MARS),\n        JUPITER: PIXI.Texture.from(ASSET_PATHS.PLANETS.JUPITER)\n      };\n      if (!this.textures[planet.id.toUpperCase()]) {\n        console.error('Invalid planet type:', planet.id);\n        throw new Error('Invalid planet type');\n      }\n      this.sprite = new PIXI.Sprite(this.textures[planet.id.toUpperCase()]);\n      this.sprite.anchor.set(0.5);\n      this.healthBarSprite = new PIXI.Graphics();\n      this.nameText = new PIXI.Text(planet.name.toUpperCase(), {\n        fontFamily: \"'Exo', sans-serif\",\n        fontSize: 18,\n        fill: 0xFFFFFF,\n        align: 'center'\n      });\n      this.nameText.anchor.set(0.5);\n      this.namePadding = 30;\n      this.healthBarPadding = 20;\n      this.healthBarWidth = 100;\n      this.healthBarHeight = 10;\n\n      // Explosion setup\n      this.explosionTextures = [];\n      for (let i = 0; i < 8; i++) {\n        // Assuming 8 frames of explosion\n        const texture = PIXI.Texture.from(ASSET_PATHS.EXPLOSION);\n        const frame = new PIXI.Rectangle(i * 64, 0, 64, 64); // Assuming each frame is 64x64\n        texture.frame = frame;\n        this.explosionTextures.push(texture);\n      }\n      this.explosion = new PIXI.AnimatedSprite(this.explosionTextures);\n      this.explosion.anchor.set(0.5);\n      this.explosion.loop = false;\n      this.explosion.visible = false;\n      this.explosion.animationSpeed = 0.5; // Adjust explosion speed if needed\n\n      this.updateSprite(planet);\n    } catch (error) {\n      console.error('Error in PlanetRenderer constructor:', error);\n      throw error;\n    }\n  }\n  updateSprite(planet) {\n    try {\n      if (!planet || !planet.id) return;\n      this.sprite.texture = this.textures[planet.id.toUpperCase()];\n      switch (planet.id.toUpperCase()) {\n        case 'MERCURY':\n          this.sprite.scale.set(1);\n          break;\n        case 'VENUS':\n          this.sprite.scale.set(1);\n          break;\n        case 'EARTH':\n          this.sprite.scale.set(1.25);\n          break;\n        case 'MARS':\n          this.sprite.scale.set(1.25);\n          break;\n        case 'JUPITER':\n          this.sprite.scale.set(1.5);\n          break;\n        default:\n          console.warn(`Unexpected planet type: ${planet.id}`);\n          this.sprite.scale.set(0.5);\n      }\n      const scaledHeight = this.sprite.height * this.sprite.scale.y;\n      this.healthBarSprite.x = -this.healthBarWidth / 2;\n      this.healthBarSprite.y = scaledHeight / 2 + this.healthBarPadding;\n      this.nameText.y = -(scaledHeight / 2) - this.namePadding;\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n  startExplosion() {\n    this.explosion.visible = true;\n    this.explosion.gotoAndPlay(0);\n    this.sprite.visible = false;\n    this.healthBarSprite.visible = false;\n    this.nameText.visible = false;\n  }\n  render(planet, health) {\n    try {\n      this.healthBarSprite.clear();\n      this.healthBarSprite.beginFill(0x191123);\n      this.healthBarSprite.drawRect(0, 0, this.healthBarWidth, this.healthBarHeight);\n      this.healthBarSprite.endFill();\n      const healthPercentage = health / planet.maxHealth;\n      const healthFillWidth = this.healthBarWidth * healthPercentage;\n      this.healthBarSprite.beginFill(0xFF4C4C);\n      this.healthBarSprite.drawRect(0, 0, healthFillWidth, this.healthBarHeight);\n      this.healthBarSprite.endFill();\n      this.nameText.text = planet.name.toUpperCase();\n      if (health <= 0 && !this.explosion.playing) {\n        this.startExplosion();\n      }\n      if (this.explosion.playing && this.explosion.currentFrame === this.explosion.totalFrames - 1) {\n        this.explosion.visible = false;\n        // After the explosion, reset the planet or move to the next planet\n      }\n    } catch (error) {\n      console.error('Error in PlanetRenderer render:', error);\n    }\n  }\n}\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000\n      });\n      container.appendChild(this.app.view);\n      this.background = PIXI.Sprite.from(ASSET_PATHS.BACKGROUND);\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n      this.planetRenderer = new PlanetRenderer(initialPlanet);\n      this.planetRenderer.sprite.x = width / 2;\n      this.planetRenderer.sprite.y = height / 2;\n      this.app.stage.addChild(this.planetRenderer.sprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n      this.app.stage.addChild(this.planetRenderer.explosion); // Add explosion sprite to the stage\n\n      this.shipPool = new ObjectPool(() => new ShipRenderer({\n        type: {\n          id: SHIPS.SMALL.id\n        }\n      }));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({\n        shipType: SHIPS.SMALL.id\n      }));\n      this.lastUpdateTime = Date.now();\n      this.preloadTextures();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n  preloadTextures() {\n    Object.values(ASSET_PATHS.SHIPS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.PLANETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.BULLETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n  }\n  getShipRenderer(ship) {\n    try {\n      if (!this.shipRenderers.has(ship)) {\n        console.log('Creating new ShipRenderer for ship:', ship);\n        const renderer = this.shipPool.get();\n        renderer.updateSprite(ship);\n        this.app.stage.addChild(renderer.sprite);\n        this.shipRenderers.set(ship, renderer);\n      }\n      return this.shipRenderers.get(ship);\n    } catch (error) {\n      console.error('Error in getShipRenderer:', error);\n      console.error('Ship object:', ship);\n      throw error;\n    }\n  }\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.sprite.texture !== this.planetRenderer.textures[planet.id.toUpperCase()]) {\n      this.planetRenderer.updateSprite(planet);\n    }\n    return this.planetRenderer;\n  }\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n      simulation.ships.forEach(ship => {\n        try {\n          const renderer = this.getShipRenderer(ship);\n          renderer.render(ship);\n        } catch (error) {\n          console.error('Error rendering ship:', error);\n          console.error('Problematic ship:', ship);\n        }\n      });\n      this.shipRenderers.forEach((renderer, ship) => {\n        if (!simulation.ships.includes(ship)) {\n          this.removeShipRenderer(ship);\n        }\n      });\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(currentPlanet, simulation.getPlanetHealth());\n      planetRenderer.sprite.x = this.width / 2;\n      planetRenderer.sprite.y = this.height / 2;\n      planetRenderer.healthBarSprite.x = this.width / 2 - planetRenderer.healthBarWidth / 2;\n      planetRenderer.healthBarSprite.y = this.height / 2 + planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2 + planetRenderer.healthBarPadding;\n      planetRenderer.nameText.x = this.width / 2;\n      planetRenderer.nameText.y = this.height / 2 - planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2 - planetRenderer.namePadding;\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n  destroy() {\n    this.app.destroy(true);\n  }\n}","map":{"version":3,"names":["PIXI","PLANET_RENDERER_CONFIGS","SHIPS","ObjectPool","ASSET_PATHS","BACKGROUND","SMALL","id","MEDIUM","LARGE","PLANETS","MERCURY","VENUS","EARTH","MARS","JUPITER","BULLETS","EXPLOSION","ShipRenderer","constructor","ship","type","console","error","Error","textures","Texture","from","sprite","Sprite","anchor","set","updateSprite","texture","scale","warn","render","x","y","rotation","angle","Math","PI","BulletRenderer","bullet","shipType","PlanetRenderer","planet","toUpperCase","healthBarSprite","Graphics","nameText","Text","name","fontFamily","fontSize","fill","align","namePadding","healthBarPadding","healthBarWidth","healthBarHeight","explosionTextures","i","frame","Rectangle","push","explosion","AnimatedSprite","loop","visible","animationSpeed","scaledHeight","height","startExplosion","gotoAndPlay","health","clear","beginFill","drawRect","endFill","healthPercentage","maxHealth","healthFillWidth","text","playing","currentFrame","totalFrames","GameRenderer","container","width","initialPlanet","app","Application","backgroundColor","appendChild","view","background","stage","addChild","shipRenderers","Map","bulletRenderers","planetRenderer","shipPool","bulletPool","lastUpdateTime","Date","now","preloadTextures","Object","values","forEach","path","getShipRenderer","has","log","renderer","get","getBulletRenderer","getPlanetRenderer","removeShipRenderer","removeChild","release","delete","removeBulletRenderer","updatePlanetRotation","currentTime","deltaTime","updateRotation","simulation","ships","includes","bullets","currentPlanet","getCurrentPlanet","getPlanetHealth","destroy"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/src/render/renderer.js"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\n\nconst ASSET_PATHS = {\n  BACKGROUND: '/assets/game_background.png',\n  SHIPS: {\n    [SHIPS.SMALL.id]: '/assets/small_ship.png',\n    [SHIPS.MEDIUM.id]: '/assets/medium_ship.png',\n    [SHIPS.LARGE.id]: '/assets/big_ship.png',\n  },\n  PLANETS: {\n    MERCURY: '/assets/planets/mercury.png',\n    VENUS: '/assets/planets/venus.png',\n    EARTH: '/assets/planets/earth.png',\n    MARS: '/assets/planets/mars.png',\n    JUPITER: '/assets/planets/jupiter.png',\n  },\n  BULLETS: {\n    SMALL: '/assets/bullet_small.png',\n    MEDIUM: '/assets/bullet_medium.png',\n    LARGE: '/assets/bullet_large.png',\n  },\n  EXPLOSION: '/assets/explosion_spritesheet.png',  // Explosion sprite sheet path\n};\n\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      if (!ship || !ship.type || !ship.type.id) {\n        console.error('Invalid ship object:', ship);\n        throw new Error('Invalid ship object');\n      }\n\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.SMALL.id]),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.MEDIUM.id]),\n        [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.LARGE.id]),\n      };\n\n      if (!this.textures[ship.type.id]) {\n        console.error('Invalid ship type:', ship.type.id);\n        throw new Error('Invalid ship type');\n      }\n\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n      throw error;\n    }\n  }\n\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n\n      switch (ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.25);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.3);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(0.37);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(0.5);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\n\nclass BulletRenderer {\n  constructor(bullet) {\n    this.textures = {\n      [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.SMALL),\n      [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.MEDIUM),\n      [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.LARGE),\n    };\n    this.sprite = new PIXI.Sprite(this.textures[SHIPS.SMALL.id]); // Default to small bullet\n    this.sprite.anchor.set(0.5);\n    this.updateSprite(bullet);\n  }\n\n  updateSprite(bullet) {\n    if (!bullet || !bullet.shipType) {\n      console.warn('Invalid bullet object:', bullet);\n      return;\n    }\n\n    if (this.textures[bullet.shipType]) {\n      this.sprite.texture = this.textures[bullet.shipType];\n    } else {\n      console.warn(`Unexpected ship type for bullet: ${bullet.shipType}`);\n      this.sprite.texture = this.textures[SHIPS.SMALL.id];\n    }\n\n    switch (bullet.shipType) {\n      case SHIPS.SMALL.id:\n        this.sprite.scale.set(1);\n        break;\n      case SHIPS.MEDIUM.id:\n        this.sprite.scale.set(1);\n        break;\n      case SHIPS.LARGE.id:\n        this.sprite.scale.set(1);\n        break;\n    }\n  }\n\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\n\nclass PlanetRenderer {\n  constructor(planet) {\n    try {\n      if (!planet || !planet.id) {\n        console.error('Invalid planet object:', planet);\n        throw new Error('Invalid planet object');\n      }\n\n      this.textures = {\n        MERCURY: PIXI.Texture.from(ASSET_PATHS.PLANETS.MERCURY),\n        VENUS: PIXI.Texture.from(ASSET_PATHS.PLANETS.VENUS),\n        EARTH: PIXI.Texture.from(ASSET_PATHS.PLANETS.EARTH),\n        MARS: PIXI.Texture.from(ASSET_PATHS.PLANETS.MARS),\n        JUPITER: PIXI.Texture.from(ASSET_PATHS.PLANETS.JUPITER),\n      };\n\n      if (!this.textures[planet.id.toUpperCase()]) {\n        console.error('Invalid planet type:', planet.id);\n        throw new Error('Invalid planet type');\n      }\n\n      this.sprite = new PIXI.Sprite(this.textures[planet.id.toUpperCase()]);\n      this.sprite.anchor.set(0.5);\n\n      this.healthBarSprite = new PIXI.Graphics();\n      this.nameText = new PIXI.Text(planet.name.toUpperCase(), {\n        fontFamily: \"'Exo', sans-serif\",\n        fontSize: 18,\n        fill: 0xFFFFFF,\n        align: 'center',\n      });\n      this.nameText.anchor.set(0.5);\n\n      this.namePadding = 30;\n      this.healthBarPadding = 20;\n      this.healthBarWidth = 100;\n      this.healthBarHeight = 10;\n\n      // Explosion setup\n      this.explosionTextures = [];\n      for (let i = 0; i < 8; i++) {  // Assuming 8 frames of explosion\n        const texture = PIXI.Texture.from(ASSET_PATHS.EXPLOSION);\n        const frame = new PIXI.Rectangle(i * 64, 0, 64, 64); // Assuming each frame is 64x64\n        texture.frame = frame;\n        this.explosionTextures.push(texture);\n      }\n      this.explosion = new PIXI.AnimatedSprite(this.explosionTextures);\n      this.explosion.anchor.set(0.5);\n      this.explosion.loop = false;\n      this.explosion.visible = false;\n      this.explosion.animationSpeed = 0.5;  // Adjust explosion speed if needed\n\n      this.updateSprite(planet);\n    } catch (error) {\n      console.error('Error in PlanetRenderer constructor:', error);\n      throw error;\n    }\n  }\n\n  updateSprite(planet) {\n    try {\n      if (!planet || !planet.id) return;\n      this.sprite.texture = this.textures[planet.id.toUpperCase()];\n\n      switch (planet.id.toUpperCase()) {\n        case 'MERCURY':\n          this.sprite.scale.set(1);\n          break;\n        case 'VENUS':\n          this.sprite.scale.set(1);\n          break;\n        case 'EARTH':\n          this.sprite.scale.set(1.25);\n          break;\n        case 'MARS':\n          this.sprite.scale.set(1.25);\n          break;\n        case 'JUPITER':\n          this.sprite.scale.set(1.5);\n          break;\n        default:\n          console.warn(`Unexpected planet type: ${planet.id}`);\n          this.sprite.scale.set(0.5);\n      }\n\n      const scaledHeight = this.sprite.height * this.sprite.scale.y;\n\n      this.healthBarSprite.x = -this.healthBarWidth / 2;\n      this.healthBarSprite.y = (scaledHeight / 2) + this.healthBarPadding;\n      this.nameText.y = -(scaledHeight / 2) - this.namePadding;\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n\n  startExplosion() {\n    this.explosion.visible = true;\n    this.explosion.gotoAndPlay(0);\n    this.sprite.visible = false;\n    this.healthBarSprite.visible = false;\n    this.nameText.visible = false;\n  }\n\n  render(planet, health) {\n    try {\n      this.healthBarSprite.clear();\n      this.healthBarSprite.beginFill(0x191123);\n      this.healthBarSprite.drawRect(0, 0, this.healthBarWidth, this.healthBarHeight);\n      this.healthBarSprite.endFill();\n\n      const healthPercentage = health / planet.maxHealth;\n      const healthFillWidth = this.healthBarWidth * healthPercentage;\n\n      this.healthBarSprite.beginFill(0xFF4C4C);\n      this.healthBarSprite.drawRect(0, 0, healthFillWidth, this.healthBarHeight);\n      this.healthBarSprite.endFill();\n\n      this.nameText.text = planet.name.toUpperCase();\n\n      if (health <= 0 && !this.explosion.playing) {\n        this.startExplosion();\n      }\n\n      if (this.explosion.playing && this.explosion.currentFrame === this.explosion.totalFrames - 1) {\n        this.explosion.visible = false;\n        // After the explosion, reset the planet or move to the next planet\n      }\n    } catch (error) {\n      console.error('Error in PlanetRenderer render:', error);\n    }\n  }\n}\n\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000,\n      });\n      container.appendChild(this.app.view);\n\n      this.background = PIXI.Sprite.from(ASSET_PATHS.BACKGROUND);\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n\n      this.planetRenderer = new PlanetRenderer(initialPlanet);\n      this.planetRenderer.sprite.x = width / 2;\n      this.planetRenderer.sprite.y = height / 2;\n\n      this.app.stage.addChild(this.planetRenderer.sprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n      this.app.stage.addChild(this.planetRenderer.explosion);  // Add explosion sprite to the stage\n\n      this.shipPool = new ObjectPool(() => new ShipRenderer({ type: { id: SHIPS.SMALL.id } }));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({ shipType: SHIPS.SMALL.id }));\n\n      this.lastUpdateTime = Date.now();\n\n      this.preloadTextures();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n\n  preloadTextures() {\n    Object.values(ASSET_PATHS.SHIPS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.PLANETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.BULLETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n  }\n\n  getShipRenderer(ship) {\n    try {\n      if (!this.shipRenderers.has(ship)) {\n        console.log('Creating new ShipRenderer for ship:', ship);\n        const renderer = this.shipPool.get();\n        renderer.updateSprite(ship);\n        this.app.stage.addChild(renderer.sprite);\n        this.shipRenderers.set(ship, renderer);\n      }\n      return this.shipRenderers.get(ship);\n    } catch (error) {\n      console.error('Error in getShipRenderer:', error);\n      console.error('Ship object:', ship);\n      throw error;\n    }\n  }\n\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.sprite.texture !== this.planetRenderer.textures[planet.id.toUpperCase()]) {\n      this.planetRenderer.updateSprite(planet);\n    }\n    return this.planetRenderer;\n  }\n\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n\n      simulation.ships.forEach(ship => {\n        try {\n          const renderer = this.getShipRenderer(ship);\n          renderer.render(ship);\n        } catch (error) {\n          console.error('Error rendering ship:', error);\n          console.error('Problematic ship:', ship);\n        }\n      });\n\n      this.shipRenderers.forEach((renderer, ship) => {\n        if (!simulation.ships.includes(ship)) {\n          this.removeShipRenderer(ship);\n        }\n      });\n\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(currentPlanet, simulation.getPlanetHealth());\n\n      planetRenderer.sprite.x = this.width / 2;\n      planetRenderer.sprite.y = this.height / 2;\n      planetRenderer.healthBarSprite.x = this.width / 2 - planetRenderer.healthBarWidth / 2;\n      planetRenderer.healthBarSprite.y = this.height / 2 +\n        (planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2) +\n        planetRenderer.healthBarPadding;\n\n      planetRenderer.nameText.x = this.width / 2;\n      planetRenderer.nameText.y = this.height / 2 -\n        (planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2) -\n        planetRenderer.namePadding;\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n\n  destroy() {\n    this.app.destroy(true);\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,SAAS;AAC/B,SAASC,uBAAuB,QAAQ,kBAAkB;AAC1D,SAASC,KAAK,QAAQ,gCAAgC;AACtD,SAASC,UAAU,QAAQ,SAAS;AAEpC,MAAMC,WAAW,GAAG;EAClBC,UAAU,EAAE,6BAA6B;EACzCH,KAAK,EAAE;IACL,CAACA,KAAK,CAACI,KAAK,CAACC,EAAE,GAAG,wBAAwB;IAC1C,CAACL,KAAK,CAACM,MAAM,CAACD,EAAE,GAAG,yBAAyB;IAC5C,CAACL,KAAK,CAACO,KAAK,CAACF,EAAE,GAAG;EACpB,CAAC;EACDG,OAAO,EAAE;IACPC,OAAO,EAAE,6BAA6B;IACtCC,KAAK,EAAE,2BAA2B;IAClCC,KAAK,EAAE,2BAA2B;IAClCC,IAAI,EAAE,0BAA0B;IAChCC,OAAO,EAAE;EACX,CAAC;EACDC,OAAO,EAAE;IACPV,KAAK,EAAE,0BAA0B;IACjCE,MAAM,EAAE,2BAA2B;IACnCC,KAAK,EAAE;EACT,CAAC;EACDQ,SAAS,EAAE,mCAAmC,CAAG;AACnD,CAAC;AAED,MAAMC,YAAY,CAAC;EACjBC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI;MACF,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,IAAI,IAAI,CAACD,IAAI,CAACC,IAAI,CAACd,EAAE,EAAE;QACxCe,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEH,IAAI,CAAC;QAC3C,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,IAAI,CAACC,QAAQ,GAAG;QACd,CAACvB,KAAK,CAACI,KAAK,CAACC,EAAE,GAAGP,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACF,KAAK,CAACA,KAAK,CAACI,KAAK,CAACC,EAAE,CAAC,CAAC;QACtE,CAACL,KAAK,CAACM,MAAM,CAACD,EAAE,GAAGP,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACF,KAAK,CAACA,KAAK,CAACM,MAAM,CAACD,EAAE,CAAC,CAAC;QACxE,CAACL,KAAK,CAACO,KAAK,CAACF,EAAE,GAAGP,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACF,KAAK,CAACA,KAAK,CAACO,KAAK,CAACF,EAAE,CAAC;MACvE,CAAC;MAED,IAAI,CAAC,IAAI,CAACkB,QAAQ,CAACL,IAAI,CAACC,IAAI,CAACd,EAAE,CAAC,EAAE;QAChCe,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEH,IAAI,CAACC,IAAI,CAACd,EAAE,CAAC;QACjD,MAAM,IAAIiB,KAAK,CAAC,mBAAmB,CAAC;MACtC;MAEA,IAAI,CAACI,MAAM,GAAG,IAAI5B,IAAI,CAAC6B,MAAM,CAAC,IAAI,CAACJ,QAAQ,CAACL,IAAI,CAACC,IAAI,CAACd,EAAE,CAAC,CAAC;MAC1D,IAAI,CAACqB,MAAM,CAACE,MAAM,CAACC,GAAG,CAAC,GAAG,CAAC;MAC3B,IAAI,CAACC,YAAY,CAACZ,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF;EAEAS,YAAYA,CAACZ,IAAI,EAAE;IACjB,IAAI;MACF,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,IAAI,EAAE;MACzB,IAAI,CAACO,MAAM,CAACK,OAAO,GAAG,IAAI,CAACR,QAAQ,CAACL,IAAI,CAACC,IAAI,CAACd,EAAE,CAAC;MAEjD,QAAQa,IAAI,CAACC,IAAI,CAACd,EAAE;QAClB,KAAKL,KAAK,CAACI,KAAK,CAACC,EAAE;UACjB,IAAI,CAACqB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,IAAI,CAAC;UAC3B;QACF,KAAK7B,KAAK,CAACM,MAAM,CAACD,EAAE;UAClB,IAAI,CAACqB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,GAAG,CAAC;UAC1B;QACF,KAAK7B,KAAK,CAACO,KAAK,CAACF,EAAE;UACjB,IAAI,CAACqB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,IAAI,CAAC;UAC3B;QACF;UACET,OAAO,CAACa,IAAI,CAAC,yBAAyBf,IAAI,CAACC,IAAI,CAACd,EAAE,EAAE,CAAC;UACrD,IAAI,CAACqB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,GAAG,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF;EAEAa,MAAMA,CAAChB,IAAI,EAAE;IACX,IAAI;MACF,IAAI,CAACQ,MAAM,CAACS,CAAC,GAAGjB,IAAI,CAACiB,CAAC;MACtB,IAAI,CAACT,MAAM,CAACU,CAAC,GAAGlB,IAAI,CAACkB,CAAC;MACtB,IAAI,CAACV,MAAM,CAACW,QAAQ,GAAGnB,IAAI,CAACoB,KAAK,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;IACjD,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF;AACF;AAEA,MAAMoB,cAAc,CAAC;EACnBxB,WAAWA,CAACyB,MAAM,EAAE;IAClB,IAAI,CAACnB,QAAQ,GAAG;MACd,CAACvB,KAAK,CAACI,KAAK,CAACC,EAAE,GAAGP,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACY,OAAO,CAACV,KAAK,CAAC;MAC9D,CAACJ,KAAK,CAACM,MAAM,CAACD,EAAE,GAAGP,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACY,OAAO,CAACR,MAAM,CAAC;MAChE,CAACN,KAAK,CAACO,KAAK,CAACF,EAAE,GAAGP,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACY,OAAO,CAACP,KAAK;IAC/D,CAAC;IACD,IAAI,CAACmB,MAAM,GAAG,IAAI5B,IAAI,CAAC6B,MAAM,CAAC,IAAI,CAACJ,QAAQ,CAACvB,KAAK,CAACI,KAAK,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAI,CAACqB,MAAM,CAACE,MAAM,CAACC,GAAG,CAAC,GAAG,CAAC;IAC3B,IAAI,CAACC,YAAY,CAACY,MAAM,CAAC;EAC3B;EAEAZ,YAAYA,CAACY,MAAM,EAAE;IACnB,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,QAAQ,EAAE;MAC/BvB,OAAO,CAACa,IAAI,CAAC,wBAAwB,EAAES,MAAM,CAAC;MAC9C;IACF;IAEA,IAAI,IAAI,CAACnB,QAAQ,CAACmB,MAAM,CAACC,QAAQ,CAAC,EAAE;MAClC,IAAI,CAACjB,MAAM,CAACK,OAAO,GAAG,IAAI,CAACR,QAAQ,CAACmB,MAAM,CAACC,QAAQ,CAAC;IACtD,CAAC,MAAM;MACLvB,OAAO,CAACa,IAAI,CAAC,oCAAoCS,MAAM,CAACC,QAAQ,EAAE,CAAC;MACnE,IAAI,CAACjB,MAAM,CAACK,OAAO,GAAG,IAAI,CAACR,QAAQ,CAACvB,KAAK,CAACI,KAAK,CAACC,EAAE,CAAC;IACrD;IAEA,QAAQqC,MAAM,CAACC,QAAQ;MACrB,KAAK3C,KAAK,CAACI,KAAK,CAACC,EAAE;QACjB,IAAI,CAACqB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,CAAC,CAAC;QACxB;MACF,KAAK7B,KAAK,CAACM,MAAM,CAACD,EAAE;QAClB,IAAI,CAACqB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,CAAC,CAAC;QACxB;MACF,KAAK7B,KAAK,CAACO,KAAK,CAACF,EAAE;QACjB,IAAI,CAACqB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,CAAC,CAAC;QACxB;IACJ;EACF;EAEAK,MAAMA,CAACQ,MAAM,EAAE;IACb,IAAI,CAAChB,MAAM,CAACS,CAAC,GAAGO,MAAM,CAACP,CAAC;IACxB,IAAI,CAACT,MAAM,CAACU,CAAC,GAAGM,MAAM,CAACN,CAAC;EAC1B;AACF;AAEA,MAAMQ,cAAc,CAAC;EACnB3B,WAAWA,CAAC4B,MAAM,EAAE;IAClB,IAAI;MACF,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACxC,EAAE,EAAE;QACzBe,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEwB,MAAM,CAAC;QAC/C,MAAM,IAAIvB,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,IAAI,CAACC,QAAQ,GAAG;QACdd,OAAO,EAAEX,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACM,OAAO,CAACC,OAAO,CAAC;QACvDC,KAAK,EAAEZ,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACM,OAAO,CAACE,KAAK,CAAC;QACnDC,KAAK,EAAEb,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACM,OAAO,CAACG,KAAK,CAAC;QACnDC,IAAI,EAAEd,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACM,OAAO,CAACI,IAAI,CAAC;QACjDC,OAAO,EAAEf,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACM,OAAO,CAACK,OAAO;MACxD,CAAC;MAED,IAAI,CAAC,IAAI,CAACU,QAAQ,CAACsB,MAAM,CAACxC,EAAE,CAACyC,WAAW,CAAC,CAAC,CAAC,EAAE;QAC3C1B,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEwB,MAAM,CAACxC,EAAE,CAAC;QAChD,MAAM,IAAIiB,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,IAAI,CAACI,MAAM,GAAG,IAAI5B,IAAI,CAAC6B,MAAM,CAAC,IAAI,CAACJ,QAAQ,CAACsB,MAAM,CAACxC,EAAE,CAACyC,WAAW,CAAC,CAAC,CAAC,CAAC;MACrE,IAAI,CAACpB,MAAM,CAACE,MAAM,CAACC,GAAG,CAAC,GAAG,CAAC;MAE3B,IAAI,CAACkB,eAAe,GAAG,IAAIjD,IAAI,CAACkD,QAAQ,CAAC,CAAC;MAC1C,IAAI,CAACC,QAAQ,GAAG,IAAInD,IAAI,CAACoD,IAAI,CAACL,MAAM,CAACM,IAAI,CAACL,WAAW,CAAC,CAAC,EAAE;QACvDM,UAAU,EAAE,mBAAmB;QAC/BC,QAAQ,EAAE,EAAE;QACZC,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE;MACT,CAAC,CAAC;MACF,IAAI,CAACN,QAAQ,CAACrB,MAAM,CAACC,GAAG,CAAC,GAAG,CAAC;MAE7B,IAAI,CAAC2B,WAAW,GAAG,EAAE;MACrB,IAAI,CAACC,gBAAgB,GAAG,EAAE;MAC1B,IAAI,CAACC,cAAc,GAAG,GAAG;MACzB,IAAI,CAACC,eAAe,GAAG,EAAE;;MAEzB;MACA,IAAI,CAACC,iBAAiB,GAAG,EAAE;MAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAAG;QAC7B,MAAM9B,OAAO,GAAGjC,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACvB,WAAW,CAACa,SAAS,CAAC;QACxD,MAAM+C,KAAK,GAAG,IAAIhE,IAAI,CAACiE,SAAS,CAACF,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACrD9B,OAAO,CAAC+B,KAAK,GAAGA,KAAK;QACrB,IAAI,CAACF,iBAAiB,CAACI,IAAI,CAACjC,OAAO,CAAC;MACtC;MACA,IAAI,CAACkC,SAAS,GAAG,IAAInE,IAAI,CAACoE,cAAc,CAAC,IAAI,CAACN,iBAAiB,CAAC;MAChE,IAAI,CAACK,SAAS,CAACrC,MAAM,CAACC,GAAG,CAAC,GAAG,CAAC;MAC9B,IAAI,CAACoC,SAAS,CAACE,IAAI,GAAG,KAAK;MAC3B,IAAI,CAACF,SAAS,CAACG,OAAO,GAAG,KAAK;MAC9B,IAAI,CAACH,SAAS,CAACI,cAAc,GAAG,GAAG,CAAC,CAAE;;MAEtC,IAAI,CAACvC,YAAY,CAACe,MAAM,CAAC;IAC3B,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;EACF;EAEAS,YAAYA,CAACe,MAAM,EAAE;IACnB,IAAI;MACF,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACxC,EAAE,EAAE;MAC3B,IAAI,CAACqB,MAAM,CAACK,OAAO,GAAG,IAAI,CAACR,QAAQ,CAACsB,MAAM,CAACxC,EAAE,CAACyC,WAAW,CAAC,CAAC,CAAC;MAE5D,QAAQD,MAAM,CAACxC,EAAE,CAACyC,WAAW,CAAC,CAAC;QAC7B,KAAK,SAAS;UACZ,IAAI,CAACpB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,CAAC,CAAC;UACxB;QACF,KAAK,OAAO;UACV,IAAI,CAACH,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,CAAC,CAAC;UACxB;QACF,KAAK,OAAO;UACV,IAAI,CAACH,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,IAAI,CAAC;UAC3B;QACF,KAAK,MAAM;UACT,IAAI,CAACH,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,IAAI,CAAC;UAC3B;QACF,KAAK,SAAS;UACZ,IAAI,CAACH,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,GAAG,CAAC;UAC1B;QACF;UACET,OAAO,CAACa,IAAI,CAAC,2BAA2BY,MAAM,CAACxC,EAAE,EAAE,CAAC;UACpD,IAAI,CAACqB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,GAAG,CAAC;MAC9B;MAEA,MAAMyC,YAAY,GAAG,IAAI,CAAC5C,MAAM,CAAC6C,MAAM,GAAG,IAAI,CAAC7C,MAAM,CAACM,KAAK,CAACI,CAAC;MAE7D,IAAI,CAACW,eAAe,CAACZ,CAAC,GAAG,CAAC,IAAI,CAACuB,cAAc,GAAG,CAAC;MACjD,IAAI,CAACX,eAAe,CAACX,CAAC,GAAIkC,YAAY,GAAG,CAAC,GAAI,IAAI,CAACb,gBAAgB;MACnE,IAAI,CAACR,QAAQ,CAACb,CAAC,GAAG,EAAEkC,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAACd,WAAW;IAC1D,CAAC,CAAC,OAAOnC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF;EAEAmD,cAAcA,CAAA,EAAG;IACf,IAAI,CAACP,SAAS,CAACG,OAAO,GAAG,IAAI;IAC7B,IAAI,CAACH,SAAS,CAACQ,WAAW,CAAC,CAAC,CAAC;IAC7B,IAAI,CAAC/C,MAAM,CAAC0C,OAAO,GAAG,KAAK;IAC3B,IAAI,CAACrB,eAAe,CAACqB,OAAO,GAAG,KAAK;IACpC,IAAI,CAACnB,QAAQ,CAACmB,OAAO,GAAG,KAAK;EAC/B;EAEAlC,MAAMA,CAACW,MAAM,EAAE6B,MAAM,EAAE;IACrB,IAAI;MACF,IAAI,CAAC3B,eAAe,CAAC4B,KAAK,CAAC,CAAC;MAC5B,IAAI,CAAC5B,eAAe,CAAC6B,SAAS,CAAC,QAAQ,CAAC;MACxC,IAAI,CAAC7B,eAAe,CAAC8B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACnB,cAAc,EAAE,IAAI,CAACC,eAAe,CAAC;MAC9E,IAAI,CAACZ,eAAe,CAAC+B,OAAO,CAAC,CAAC;MAE9B,MAAMC,gBAAgB,GAAGL,MAAM,GAAG7B,MAAM,CAACmC,SAAS;MAClD,MAAMC,eAAe,GAAG,IAAI,CAACvB,cAAc,GAAGqB,gBAAgB;MAE9D,IAAI,CAAChC,eAAe,CAAC6B,SAAS,CAAC,QAAQ,CAAC;MACxC,IAAI,CAAC7B,eAAe,CAAC8B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEI,eAAe,EAAE,IAAI,CAACtB,eAAe,CAAC;MAC1E,IAAI,CAACZ,eAAe,CAAC+B,OAAO,CAAC,CAAC;MAE9B,IAAI,CAAC7B,QAAQ,CAACiC,IAAI,GAAGrC,MAAM,CAACM,IAAI,CAACL,WAAW,CAAC,CAAC;MAE9C,IAAI4B,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAACT,SAAS,CAACkB,OAAO,EAAE;QAC1C,IAAI,CAACX,cAAc,CAAC,CAAC;MACvB;MAEA,IAAI,IAAI,CAACP,SAAS,CAACkB,OAAO,IAAI,IAAI,CAAClB,SAAS,CAACmB,YAAY,KAAK,IAAI,CAACnB,SAAS,CAACoB,WAAW,GAAG,CAAC,EAAE;QAC5F,IAAI,CAACpB,SAAS,CAACG,OAAO,GAAG,KAAK;QAC9B;MACF;IACF,CAAC,CAAC,OAAO/C,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF;AACF;AAEA,OAAO,MAAMiE,YAAY,CAAC;EACxBrE,WAAWA,CAACsE,SAAS,EAAEC,KAAK,EAAEjB,MAAM,EAAEkB,aAAa,EAAE;IACnD,IAAI;MACF,IAAI,CAACD,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACjB,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACmB,GAAG,GAAG,IAAI5F,IAAI,CAAC6F,WAAW,CAAC;QAC9BH,KAAK;QACLjB,MAAM;QACNqB,eAAe,EAAE;MACnB,CAAC,CAAC;MACFL,SAAS,CAACM,WAAW,CAAC,IAAI,CAACH,GAAG,CAACI,IAAI,CAAC;MAEpC,IAAI,CAACC,UAAU,GAAGjG,IAAI,CAAC6B,MAAM,CAACF,IAAI,CAACvB,WAAW,CAACC,UAAU,CAAC;MAC1D,IAAI,CAAC4F,UAAU,CAACP,KAAK,GAAGA,KAAK;MAC7B,IAAI,CAACO,UAAU,CAACxB,MAAM,GAAGA,MAAM;MAC/B,IAAI,CAACmB,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACF,UAAU,CAAC;MAExC,IAAI,CAACG,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC9B,IAAI,CAACC,eAAe,GAAG,IAAID,GAAG,CAAC,CAAC;MAEhC,IAAI,CAACE,cAAc,GAAG,IAAIzD,cAAc,CAAC6C,aAAa,CAAC;MACvD,IAAI,CAACY,cAAc,CAAC3E,MAAM,CAACS,CAAC,GAAGqD,KAAK,GAAG,CAAC;MACxC,IAAI,CAACa,cAAc,CAAC3E,MAAM,CAACU,CAAC,GAAGmC,MAAM,GAAG,CAAC;MAEzC,IAAI,CAACmB,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACI,cAAc,CAAC3E,MAAM,CAAC;MACnD,IAAI,CAACgE,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACI,cAAc,CAACtD,eAAe,CAAC;MAC5D,IAAI,CAAC2C,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACI,cAAc,CAACpD,QAAQ,CAAC;MACrD,IAAI,CAACyC,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACI,cAAc,CAACpC,SAAS,CAAC,CAAC,CAAE;;MAEzD,IAAI,CAACqC,QAAQ,GAAG,IAAIrG,UAAU,CAAC,MAAM,IAAIe,YAAY,CAAC;QAAEG,IAAI,EAAE;UAAEd,EAAE,EAAEL,KAAK,CAACI,KAAK,CAACC;QAAG;MAAE,CAAC,CAAC,CAAC;MACxF,IAAI,CAACkG,UAAU,GAAG,IAAItG,UAAU,CAAC,MAAM,IAAIwC,cAAc,CAAC;QAAEE,QAAQ,EAAE3C,KAAK,CAACI,KAAK,CAACC;MAAG,CAAC,CAAC,CAAC;MAExF,IAAI,CAACmG,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAEhC,IAAI,CAACC,eAAe,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOtF,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF;EAEAsF,eAAeA,CAAA,EAAG;IAChBC,MAAM,CAACC,MAAM,CAAC3G,WAAW,CAACF,KAAK,CAAC,CAAC8G,OAAO,CAACC,IAAI,IAAI;MAC/CjH,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACsF,IAAI,CAAC;IACzB,CAAC,CAAC;IACFH,MAAM,CAACC,MAAM,CAAC3G,WAAW,CAACM,OAAO,CAAC,CAACsG,OAAO,CAACC,IAAI,IAAI;MACjDjH,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACsF,IAAI,CAAC;IACzB,CAAC,CAAC;IACFH,MAAM,CAACC,MAAM,CAAC3G,WAAW,CAACY,OAAO,CAAC,CAACgG,OAAO,CAACC,IAAI,IAAI;MACjDjH,IAAI,CAAC0B,OAAO,CAACC,IAAI,CAACsF,IAAI,CAAC;IACzB,CAAC,CAAC;EACJ;EAEAC,eAAeA,CAAC9F,IAAI,EAAE;IACpB,IAAI;MACF,IAAI,CAAC,IAAI,CAACgF,aAAa,CAACe,GAAG,CAAC/F,IAAI,CAAC,EAAE;QACjCE,OAAO,CAAC8F,GAAG,CAAC,qCAAqC,EAAEhG,IAAI,CAAC;QACxD,MAAMiG,QAAQ,GAAG,IAAI,CAACb,QAAQ,CAACc,GAAG,CAAC,CAAC;QACpCD,QAAQ,CAACrF,YAAY,CAACZ,IAAI,CAAC;QAC3B,IAAI,CAACwE,GAAG,CAACM,KAAK,CAACC,QAAQ,CAACkB,QAAQ,CAACzF,MAAM,CAAC;QACxC,IAAI,CAACwE,aAAa,CAACrE,GAAG,CAACX,IAAI,EAAEiG,QAAQ,CAAC;MACxC;MACA,OAAO,IAAI,CAACjB,aAAa,CAACkB,GAAG,CAAClG,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDD,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEH,IAAI,CAAC;MACnC,MAAMG,KAAK;IACb;EACF;EAEAgG,iBAAiBA,CAAC3E,MAAM,EAAE;IACxB,IAAI,CAAC,IAAI,CAAC0D,eAAe,CAACa,GAAG,CAACvE,MAAM,CAAC,EAAE;MACrC,MAAMyE,QAAQ,GAAG,IAAI,CAACZ,UAAU,CAACa,GAAG,CAAC,CAAC;MACtCD,QAAQ,CAACrF,YAAY,CAACY,MAAM,CAAC;MAC7B,IAAI,CAACgD,GAAG,CAACM,KAAK,CAACC,QAAQ,CAACkB,QAAQ,CAACzF,MAAM,CAAC;MACxC,IAAI,CAAC0E,eAAe,CAACvE,GAAG,CAACa,MAAM,EAAEyE,QAAQ,CAAC;IAC5C;IACA,OAAO,IAAI,CAACf,eAAe,CAACgB,GAAG,CAAC1E,MAAM,CAAC;EACzC;EAEA4E,iBAAiBA,CAACzE,MAAM,EAAE;IACxB,IAAI,IAAI,CAACwD,cAAc,CAAC3E,MAAM,CAACK,OAAO,KAAK,IAAI,CAACsE,cAAc,CAAC9E,QAAQ,CAACsB,MAAM,CAACxC,EAAE,CAACyC,WAAW,CAAC,CAAC,CAAC,EAAE;MAChG,IAAI,CAACuD,cAAc,CAACvE,YAAY,CAACe,MAAM,CAAC;IAC1C;IACA,OAAO,IAAI,CAACwD,cAAc;EAC5B;EAEAkB,kBAAkBA,CAACrG,IAAI,EAAE;IACvB,MAAMiG,QAAQ,GAAG,IAAI,CAACjB,aAAa,CAACkB,GAAG,CAAClG,IAAI,CAAC;IAC7C,IAAIiG,QAAQ,EAAE;MACZ,IAAI,CAACzB,GAAG,CAACM,KAAK,CAACwB,WAAW,CAACL,QAAQ,CAACzF,MAAM,CAAC;MAC3C,IAAI,CAAC4E,QAAQ,CAACmB,OAAO,CAACN,QAAQ,CAAC;MAC/B,IAAI,CAACjB,aAAa,CAACwB,MAAM,CAACxG,IAAI,CAAC;IACjC;EACF;EAEAyG,oBAAoBA,CAACjF,MAAM,EAAE;IAC3B,MAAMyE,QAAQ,GAAG,IAAI,CAACf,eAAe,CAACgB,GAAG,CAAC1E,MAAM,CAAC;IACjD,IAAIyE,QAAQ,EAAE;MACZ,IAAI,CAACzB,GAAG,CAACM,KAAK,CAACwB,WAAW,CAACL,QAAQ,CAACzF,MAAM,CAAC;MAC3C,IAAI,CAAC6E,UAAU,CAACkB,OAAO,CAACN,QAAQ,CAAC;MACjC,IAAI,CAACf,eAAe,CAACsB,MAAM,CAAChF,MAAM,CAAC;IACrC;EACF;EAEAkF,oBAAoBA,CAAA,EAAG;IACrB,MAAMC,WAAW,GAAGpB,IAAI,CAACC,GAAG,CAAC,CAAC;IAC9B,MAAMoB,SAAS,GAAG,CAACD,WAAW,GAAG,IAAI,CAACrB,cAAc,IAAI,IAAI;IAC5D,IAAI,CAACH,cAAc,CAAC0B,cAAc,CAACD,SAAS,CAAC;IAC7C,IAAI,CAACtB,cAAc,GAAGqB,WAAW;EACnC;EAEA3F,MAAMA,CAAC8F,UAAU,EAAE;IACjB,IAAI;MACF,IAAI,CAACJ,oBAAoB,CAAC,CAAC;MAE3BI,UAAU,CAACC,KAAK,CAACnB,OAAO,CAAC5F,IAAI,IAAI;QAC/B,IAAI;UACF,MAAMiG,QAAQ,GAAG,IAAI,CAACH,eAAe,CAAC9F,IAAI,CAAC;UAC3CiG,QAAQ,CAACjF,MAAM,CAAChB,IAAI,CAAC;QACvB,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;UAC7CD,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEH,IAAI,CAAC;QAC1C;MACF,CAAC,CAAC;MAEF,IAAI,CAACgF,aAAa,CAACY,OAAO,CAAC,CAACK,QAAQ,EAAEjG,IAAI,KAAK;QAC7C,IAAI,CAAC8G,UAAU,CAACC,KAAK,CAACC,QAAQ,CAAChH,IAAI,CAAC,EAAE;UACpC,IAAI,CAACqG,kBAAkB,CAACrG,IAAI,CAAC;QAC/B;MACF,CAAC,CAAC;MAEF8G,UAAU,CAACG,OAAO,CAACrB,OAAO,CAACpE,MAAM,IAAI;QACnC,MAAMyE,QAAQ,GAAG,IAAI,CAACE,iBAAiB,CAAC3E,MAAM,CAAC;QAC/CyE,QAAQ,CAACjF,MAAM,CAACQ,MAAM,CAAC;MACzB,CAAC,CAAC;MAEF,IAAI,CAAC0D,eAAe,CAACU,OAAO,CAAC,CAACK,QAAQ,EAAEzE,MAAM,KAAK;QACjD,IAAI,CAACsF,UAAU,CAACG,OAAO,CAACD,QAAQ,CAACxF,MAAM,CAAC,EAAE;UACxC,IAAI,CAACiF,oBAAoB,CAACjF,MAAM,CAAC;QACnC;MACF,CAAC,CAAC;MAEF,MAAM0F,aAAa,GAAGJ,UAAU,CAACK,gBAAgB,CAAC,CAAC;MACnD,MAAMhC,cAAc,GAAG,IAAI,CAACiB,iBAAiB,CAACc,aAAa,CAAC;MAC5D/B,cAAc,CAACnE,MAAM,CAACkG,aAAa,EAAEJ,UAAU,CAACM,eAAe,CAAC,CAAC,CAAC;MAElEjC,cAAc,CAAC3E,MAAM,CAACS,CAAC,GAAG,IAAI,CAACqD,KAAK,GAAG,CAAC;MACxCa,cAAc,CAAC3E,MAAM,CAACU,CAAC,GAAG,IAAI,CAACmC,MAAM,GAAG,CAAC;MACzC8B,cAAc,CAACtD,eAAe,CAACZ,CAAC,GAAG,IAAI,CAACqD,KAAK,GAAG,CAAC,GAAGa,cAAc,CAAC3C,cAAc,GAAG,CAAC;MACrF2C,cAAc,CAACtD,eAAe,CAACX,CAAC,GAAG,IAAI,CAACmC,MAAM,GAAG,CAAC,GAC/C8B,cAAc,CAAC3E,MAAM,CAAC6C,MAAM,GAAG8B,cAAc,CAAC3E,MAAM,CAACM,KAAK,CAACI,CAAC,GAAG,CAAE,GAClEiE,cAAc,CAAC5C,gBAAgB;MAEjC4C,cAAc,CAACpD,QAAQ,CAACd,CAAC,GAAG,IAAI,CAACqD,KAAK,GAAG,CAAC;MAC1Ca,cAAc,CAACpD,QAAQ,CAACb,CAAC,GAAG,IAAI,CAACmC,MAAM,GAAG,CAAC,GACxC8B,cAAc,CAAC3E,MAAM,CAAC6C,MAAM,GAAG8B,cAAc,CAAC3E,MAAM,CAACM,KAAK,CAACI,CAAC,GAAG,CAAE,GAClEiE,cAAc,CAAC7C,WAAW;IAC9B,CAAC,CAAC,OAAOnC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF;EAEAkH,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC7C,GAAG,CAAC6C,OAAO,CAAC,IAAI,CAAC;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}