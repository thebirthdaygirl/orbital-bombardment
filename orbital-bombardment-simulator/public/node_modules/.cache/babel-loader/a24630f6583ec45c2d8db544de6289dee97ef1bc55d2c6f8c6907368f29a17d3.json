{"ast":null,"code":"/*!\n * @pixi/mesh - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/mesh is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { State, Program, TextureMatrix, Shader, Buffer, Geometry } from '@pixi/core';\nimport { Point, Polygon, Matrix } from '@pixi/math';\nimport { DRAW_MODES, BLEND_MODES, TYPES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { premultiplyTintToRgba } from '@pixi/utils';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nvar MeshBatchUvs = /** @class */function () {\n  /**\n   * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n   * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n   */\n  function MeshBatchUvs(uvBuffer, uvMatrix) {\n    /**\n     * Buffer with normalized UV's\n     * @member {PIXI.Buffer}\n     */\n    this.uvBuffer = uvBuffer;\n    /**\n     * Material UV matrix\n     * @member {PIXI.TextureMatrix}\n     */\n    this.uvMatrix = uvMatrix;\n    /**\n     * UV Buffer data\n     * @member {Float32Array}\n     * @readonly\n     */\n    this.data = null;\n    this._bufferUpdateId = -1;\n    this._textureUpdateId = -1;\n    this._updateID = 0;\n  }\n  /**\n   * updates\n   *\n   * @param {boolean} [forceUpdate] - force the update\n   */\n  MeshBatchUvs.prototype.update = function (forceUpdate) {\n    if (!forceUpdate && this._bufferUpdateId === this.uvBuffer._updateID && this._textureUpdateId === this.uvMatrix._updateID) {\n      return;\n    }\n    this._bufferUpdateId = this.uvBuffer._updateID;\n    this._textureUpdateId = this.uvMatrix._updateID;\n    var data = this.uvBuffer.data;\n    if (!this.data || this.data.length !== data.length) {\n      this.data = new Float32Array(data.length);\n    }\n    this.uvMatrix.multiplyUvs(data, this.data);\n    this._updateID++;\n  };\n  return MeshBatchUvs;\n}();\nvar tempPoint = new Point();\nvar tempPolygon = new Polygon();\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make you life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nvar Mesh = /** @class */function (_super) {\n  __extends(Mesh, _super);\n  /**\n   * @param {PIXI.Geometry} geometry - the geometry the mesh will use\n   * @param {PIXI.MeshMaterial} shader - the shader the mesh will use\n   * @param {PIXI.State} [state] - the state that the WebGL context is required to be in to render the mesh\n   *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n   * @param {number} [drawMode=PIXI.DRAW_MODES.TRIANGLES] - the drawMode, can be any of the PIXI.DRAW_MODES consts\n   */\n  function Mesh(geometry, shader, state, drawMode) {\n    if (drawMode === void 0) {\n      drawMode = DRAW_MODES.TRIANGLES;\n    }\n    var _this = _super.call(this) || this;\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh objects.\n     * @member {PIXI.Geometry}\n     * @readonly\n     */\n    _this.geometry = geometry;\n    geometry.refCount++;\n    /**\n     * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n     * Can be shared between multiple Mesh objects.\n     * @member {PIXI.Shader|PIXI.MeshMaterial}\n     */\n    _this.shader = shader;\n    /**\n     * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n     * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n     * @member {PIXI.State}\n     */\n    _this.state = state || State.for2d();\n    /**\n     * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n     *\n     * @member {number}\n     * @see PIXI.DRAW_MODES\n     */\n    _this.drawMode = drawMode;\n    /**\n     * Typically the index of the IndexBuffer where to start drawing.\n     * @member {number}\n     * @default 0\n     */\n    _this.start = 0;\n    /**\n     * How much of the geometry to draw, by default `0` renders everything.\n     * @member {number}\n     * @default 0\n     */\n    _this.size = 0;\n    /**\n     * thease are used as easy access for batching\n     * @member {Float32Array}\n     * @private\n     */\n    _this.uvs = null;\n    /**\n     * thease are used as easy access for batching\n     * @member {Uint16Array}\n     * @private\n     */\n    _this.indices = null;\n    /**\n     * this is the caching layer used by the batcher\n     * @member {Float32Array}\n     * @private\n     */\n    _this.vertexData = new Float32Array(1);\n    /**\n     * If geometry is changed used to decide to re-transform\n     * the vertexData.\n     * @member {number}\n     * @private\n     */\n    _this.vertexDirty = 0;\n    _this._transformID = -1;\n    // Inherited from DisplayMode, set defaults\n    _this.tint = 0xFFFFFF;\n    _this.blendMode = BLEND_MODES.NORMAL;\n    /**\n     * Internal roundPixels field\n     *\n     * @member {boolean}\n     * @private\n     */\n    _this._roundPixels = settings.ROUND_PIXELS;\n    /**\n     * Batched UV's are cached for atlas textures\n     * @member {PIXI.MeshBatchUvs}\n     * @private\n     */\n    _this.batchUvs = null;\n    return _this;\n  }\n  Object.defineProperty(Mesh.prototype, \"uvBuffer\", {\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get: function () {\n      return this.geometry.buffers[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"verticesBuffer\", {\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get: function () {\n      return this.geometry.buffers[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"material\", {\n    get: function () {\n      return this.shader;\n    },\n    /**\n     * Alias for {@link PIXI.Mesh#shader}.\n     * @member {PIXI.MeshMaterial}\n     */\n    set: function (value) {\n      this.shader = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"blendMode\", {\n    get: function () {\n      return this.state.blendMode;\n    },\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set: function (value) {\n      this.state.blendMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"roundPixels\", {\n    get: function () {\n      return this._roundPixels;\n    },\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set: function (value) {\n      if (this._roundPixels !== value) {\n        this._transformID = -1;\n      }\n      this._roundPixels = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"tint\", {\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get: function () {\n      return this.shader.tint;\n    },\n    set: function (value) {\n      this.shader.tint = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"texture\", {\n    /**\n     * The texture that the Mesh uses.\n     *\n     * @member {PIXI.Texture}\n     */\n    get: function () {\n      return this.shader.texture;\n    },\n    set: function (value) {\n      this.shader.texture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Standard renderer draw.\n   * @protected\n   * @param {PIXI.Renderer} renderer - Instance to renderer.\n   */\n  Mesh.prototype._render = function (renderer) {\n    // set properties for batching..\n    // TODO could use a different way to grab verts?\n    var vertices = this.geometry.buffers[0].data;\n    // TODO benchmark check for attribute size..\n    if (this.shader.batchable && this.drawMode === DRAW_MODES.TRIANGLES && vertices.length < Mesh.BATCHABLE_SIZE * 2) {\n      this._renderToBatch(renderer);\n    } else {\n      this._renderDefault(renderer);\n    }\n  };\n  /**\n   * Standard non-batching way of rendering.\n   * @protected\n   * @param {PIXI.Renderer} renderer - Instance to renderer.\n   */\n  Mesh.prototype._renderDefault = function (renderer) {\n    var shader = this.shader;\n    shader.alpha = this.worldAlpha;\n    if (shader.update) {\n      shader.update();\n    }\n    renderer.batch.flush();\n    if (shader.program.uniformData.translationMatrix) {\n      shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n    }\n    // bind and sync uniforms..\n    renderer.shader.bind(shader);\n    // set state..\n    renderer.state.set(this.state);\n    // bind the geometry...\n    renderer.geometry.bind(this.geometry, shader);\n    // then render it\n    renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n  };\n  /**\n   * Rendering by using the Batch system.\n   * @protected\n   * @param {PIXI.Renderer} renderer - Instance to renderer.\n   */\n  Mesh.prototype._renderToBatch = function (renderer) {\n    var geometry = this.geometry;\n    if (this.shader.uvMatrix) {\n      this.shader.uvMatrix.update();\n      this.calculateUvs();\n    }\n    // set properties for batching..\n    this.calculateVertices();\n    this.indices = geometry.indexBuffer.data;\n    this._tintRGB = this.shader._tintRGB;\n    this._texture = this.shader.texture;\n    var pluginName = this.material.pluginName;\n    renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n    renderer.plugins[pluginName].render(this);\n  };\n  /**\n   * Updates vertexData field based on transform and vertices\n   */\n  Mesh.prototype.calculateVertices = function () {\n    var geometry = this.geometry;\n    var vertices = geometry.buffers[0].data;\n    if (geometry.vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID) {\n      return;\n    }\n    this._transformID = this.transform._worldID;\n    if (this.vertexData.length !== vertices.length) {\n      this.vertexData = new Float32Array(vertices.length);\n    }\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var vertexData = this.vertexData;\n    for (var i = 0; i < vertexData.length / 2; i++) {\n      var x = vertices[i * 2];\n      var y = vertices[i * 2 + 1];\n      vertexData[i * 2] = a * x + c * y + tx;\n      vertexData[i * 2 + 1] = b * x + d * y + ty;\n    }\n    if (this._roundPixels) {\n      var resolution = settings.RESOLUTION;\n      for (var i = 0; i < vertexData.length; ++i) {\n        vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n      }\n    }\n    this.vertexDirty = geometry.vertexDirtyId;\n  };\n  /**\n   * Updates uv field based on from geometry uv's or batchUvs\n   */\n  Mesh.prototype.calculateUvs = function () {\n    var geomUvs = this.geometry.buffers[1];\n    if (!this.shader.uvMatrix.isSimple) {\n      if (!this.batchUvs) {\n        this.batchUvs = new MeshBatchUvs(geomUvs, this.shader.uvMatrix);\n      }\n      this.batchUvs.update();\n      this.uvs = this.batchUvs.data;\n    } else {\n      this.uvs = geomUvs.data;\n    }\n  };\n  /**\n   * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n   * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n   *\n   * @protected\n   */\n  Mesh.prototype._calculateBounds = function () {\n    this.calculateVertices();\n    this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n  };\n  /**\n   * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n   *\n   * @param {PIXI.IPointData} point - the point to test\n   * @return {boolean} the result of the test\n   */\n  Mesh.prototype.containsPoint = function (point) {\n    if (!this.getBounds().contains(point.x, point.y)) {\n      return false;\n    }\n    this.worldTransform.applyInverse(point, tempPoint);\n    var vertices = this.geometry.getBuffer('aVertexPosition').data;\n    var points = tempPolygon.points;\n    var indices = this.geometry.getIndex().data;\n    var len = indices.length;\n    var step = this.drawMode === 4 ? 3 : 1;\n    for (var i = 0; i + 2 < len; i += step) {\n      var ind0 = indices[i] * 2;\n      var ind1 = indices[i + 1] * 2;\n      var ind2 = indices[i + 2] * 2;\n      points[0] = vertices[ind0];\n      points[1] = vertices[ind0 + 1];\n      points[2] = vertices[ind1];\n      points[3] = vertices[ind1 + 1];\n      points[4] = vertices[ind2];\n      points[5] = vertices[ind2 + 1];\n      if (tempPolygon.contains(tempPoint.x, tempPoint.y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Destroys the Mesh object.\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n   *  options have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have\n   *  their destroy method called as well. 'options' will be passed on to those calls.\n   */\n  Mesh.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n    this.geometry.refCount--;\n    if (this.geometry.refCount === 0) {\n      this.geometry.dispose();\n    }\n    this.geometry = null;\n    this.shader = null;\n    this.state = null;\n    this.uvs = null;\n    this.indices = null;\n    this.vertexData = null;\n  };\n  /**\n   * The maximum number of vertices to consider batchable. Generally, the complexity\n   * of the geometry.\n   * @memberof PIXI.Mesh\n   * @static\n   * @member {number} BATCHABLE_SIZE\n   */\n  Mesh.BATCHABLE_SIZE = 100;\n  return Mesh;\n}(Container);\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform vec4 uColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\\n}\\n\";\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTextureMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nvar MeshMaterial = /** @class */function (_super) {\n  __extends(MeshMaterial, _super);\n  /**\n   * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n   * @param {object} [options] - Additional options\n   * @param {number} [options.alpha=1] - Default alpha.\n   * @param {number} [options.tint=0xFFFFFF] - Default tint.\n   * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n   * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n   * @param {object} [options.uniforms] - Custom uniforms.\n   */\n  function MeshMaterial(uSampler, options) {\n    var _this = this;\n    var uniforms = {\n      uSampler: uSampler,\n      alpha: 1,\n      uTextureMatrix: Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    };\n    // Set defaults\n    options = Object.assign({\n      tint: 0xFFFFFF,\n      alpha: 1,\n      pluginName: 'batch'\n    }, options);\n    if (options.uniforms) {\n      Object.assign(uniforms, options.uniforms);\n    }\n    _this = _super.call(this, options.program || Program.from(vertex, fragment), uniforms) || this;\n    /**\n     * Only do update if tint or alpha changes.\n     * @member {boolean}\n     * @private\n     * @default false\n     */\n    _this._colorDirty = false;\n    /**\n     * TextureMatrix instance for this Mesh, used to track Texture changes\n     *\n     * @member {PIXI.TextureMatrix}\n     * @readonly\n     */\n    _this.uvMatrix = new TextureMatrix(uSampler);\n    /**\n     * `true` if shader can be batch with the renderer's batch system.\n     * @member {boolean}\n     * @default true\n     */\n    _this.batchable = options.program === undefined;\n    /**\n     * Renderer plugin for batching\n     *\n     * @member {string}\n     * @default 'batch'\n     */\n    _this.pluginName = options.pluginName;\n    _this.tint = options.tint;\n    _this.alpha = options.alpha;\n    return _this;\n  }\n  Object.defineProperty(MeshMaterial.prototype, \"texture\", {\n    /**\n     * Reference to the texture being rendered.\n     * @member {PIXI.Texture}\n     */\n    get: function () {\n      return this.uniforms.uSampler;\n    },\n    set: function (value) {\n      if (this.uniforms.uSampler !== value) {\n        this.uniforms.uSampler = value;\n        this.uvMatrix.texture = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MeshMaterial.prototype, \"alpha\", {\n    get: function () {\n      return this._alpha;\n    },\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     * @member {number}\n     */\n    set: function (value) {\n      if (value === this._alpha) {\n        return;\n      }\n      this._alpha = value;\n      this._colorDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MeshMaterial.prototype, \"tint\", {\n    get: function () {\n      return this._tint;\n    },\n    /**\n     * Multiply tint for the material.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    set: function (value) {\n      if (value === this._tint) {\n        return;\n      }\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n      this._colorDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets called automatically by the Mesh. Intended to be overridden for custom\n   * MeshMaterial objects.\n   */\n  MeshMaterial.prototype.update = function () {\n    if (this._colorDirty) {\n      this._colorDirty = false;\n      var baseTexture = this.texture.baseTexture;\n      premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n    }\n    if (this.uvMatrix.update()) {\n      this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n    }\n  };\n  return MeshMaterial;\n}(Shader);\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nvar MeshGeometry = /** @class */function (_super) {\n  __extends(MeshGeometry, _super);\n  /**\n   * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n   * @param {Float32Array|number[]} [uvs] - Texture UVs.\n   * @param {Uint16Array|number[]} [index] - IndexBuffer\n   */\n  function MeshGeometry(vertices, uvs, index) {\n    var _this = _super.call(this) || this;\n    var verticesBuffer = new Buffer(vertices);\n    var uvsBuffer = new Buffer(uvs, true);\n    var indexBuffer = new Buffer(index, true, true);\n    _this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT).addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT).addIndex(indexBuffer);\n    /**\n     * Dirty flag to limit update calls on Mesh. For example,\n     * limiting updates on a single Mesh instance with a shared Geometry\n     * within the render loop.\n     * @private\n     * @member {number}\n     * @default -1\n     */\n    _this._updateId = -1;\n    return _this;\n  }\n  Object.defineProperty(MeshGeometry.prototype, \"vertexDirtyId\", {\n    /**\n     * If the vertex position is updated.\n     * @member {number}\n     * @readonly\n     * @private\n     */\n    get: function () {\n      return this.buffers[0]._updateID;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return MeshGeometry;\n}(Geometry);\nexport { Mesh, MeshBatchUvs, MeshGeometry, MeshMaterial };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","MeshBatchUvs","uvBuffer","uvMatrix","data","_bufferUpdateId","_textureUpdateId","_updateID","update","forceUpdate","length","Float32Array","multiplyUvs","tempPoint","Point","tempPolygon","Polygon","Mesh","_super","geometry","shader","state","drawMode","DRAW_MODES","TRIANGLES","_this","call","refCount","State","for2d","start","size","uvs","indices","vertexData","vertexDirty","_transformID","tint","blendMode","BLEND_MODES","NORMAL","_roundPixels","settings","ROUND_PIXELS","batchUvs","defineProperty","get","buffers","set","value","texture","_render","renderer","vertices","batchable","BATCHABLE_SIZE","_renderToBatch","_renderDefault","alpha","worldAlpha","batch","flush","program","uniformData","translationMatrix","uniforms","transform","worldTransform","toArray","bind","draw","instanceCount","calculateUvs","calculateVertices","indexBuffer","_tintRGB","_texture","pluginName","material","setObjectRenderer","plugins","render","vertexDirtyId","_worldID","wt","a","c","tx","ty","i","x","y","resolution","RESOLUTION","Math","round","geomUvs","isSimple","_calculateBounds","_bounds","addVertexData","containsPoint","point","getBounds","contains","applyInverse","getBuffer","points","getIndex","len","step","ind0","ind1","ind2","destroy","options","dispose","Container","MeshMaterial","uSampler","uTextureMatrix","Matrix","IDENTITY","uColor","assign","Program","from","vertex","fragment","_colorDirty","TextureMatrix","undefined","_alpha","_tint","baseTexture","premultiplyTintToRgba","alphaMode","mapCoord","Shader","MeshGeometry","index","verticesBuffer","Buffer","uvsBuffer","addAttribute","TYPES","FLOAT","addIndex","_updateId","Geometry"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh/src/MeshBatchUvs.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh/src/Mesh.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh/src/MeshMaterial.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh/src/MeshGeometry.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import type { TextureMatrix, Buffer } from '@pixi/core';\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    public readonly data: Float32Array;\n    public uvBuffer: Buffer;\n    public uvMatrix: TextureMatrix;\n\n    private _bufferUpdateId: number;\n    private _textureUpdateId: number;\n\n    // Internal-only properties\n    _updateID: number;\n\n    /**\n     * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n     * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer: Buffer, uvMatrix: TextureMatrix)\n    {\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer}\n         */\n        this.uvBuffer = uvBuffer;\n\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = uvMatrix;\n\n        /**\n         * UV Buffer data\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n\n        this._textureUpdateId = -1;\n\n        this._updateID = 0;\n    }\n\n    /**\n     * updates\n     *\n     * @param {boolean} [forceUpdate] - force the update\n     */\n    public update(forceUpdate?: boolean): void\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID\n        )\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data as Float32Array;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            (this.data as any) = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n","import { State } from '@pixi/core';\nimport { Point, Polygon } from '@pixi/math';\nimport { BLEND_MODES, DRAW_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { MeshBatchUvs } from './MeshBatchUvs';\nimport { MeshMaterial } from './MeshMaterial';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Texture, Renderer, Geometry, Buffer } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\nconst tempPoint = new Point();\nconst tempPolygon = new Polygon();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Mesh extends GlobalMixins.Mesh {}\n\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make you life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Mesh extends Container\n{\n    public readonly geometry: Geometry;\n    public shader: MeshMaterial;\n    public state: State;\n    public drawMode: DRAW_MODES;\n    public start: number;\n    public size: number;\n\n    private vertexData: Float32Array;\n    private vertexDirty: number;\n    private _transformID: number;\n    private _roundPixels: boolean;\n    private batchUvs: MeshBatchUvs;\n\n    // Internal-only properties\n    uvs: Float32Array;\n    indices: Uint16Array;\n    _tintRGB: number;\n    _texture: Texture;\n\n    /**\n     * @param {PIXI.Geometry} geometry - the geometry the mesh will use\n     * @param {PIXI.MeshMaterial} shader - the shader the mesh will use\n     * @param {PIXI.State} [state] - the state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param {number} [drawMode=PIXI.DRAW_MODES.TRIANGLES] - the drawMode, can be any of the PIXI.DRAW_MODES consts\n     */\n    constructor(geometry: Geometry, shader: MeshMaterial, state?: State, drawMode = DRAW_MODES.TRIANGLES)\n    {\n        super();\n\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry}\n         * @readonly\n         */\n        this.geometry = geometry;\n\n        geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial}\n         */\n        this.shader = shader;\n\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        this.state = state || State.for2d();\n\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number}\n         * @see PIXI.DRAW_MODES\n         */\n        this.drawMode = drawMode;\n\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number}\n         * @default 0\n         */\n        this.start = 0;\n\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number}\n         * @default 0\n         */\n        this.size = 0;\n\n        /**\n         * thease are used as easy access for batching\n         * @member {Float32Array}\n         * @private\n         */\n        this.uvs = null;\n\n        /**\n         * thease are used as easy access for batching\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indices = null;\n\n        /**\n         * this is the caching layer used by the batcher\n         * @member {Float32Array}\n         * @private\n         */\n        this.vertexData = new Float32Array(1);\n\n        /**\n         * If geometry is changed used to decide to re-transform\n         * the vertexData.\n         * @member {number}\n         * @private\n         */\n        this.vertexDirty = 0;\n\n        this._transformID = -1;\n\n        // Inherited from DisplayMode, set defaults\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Batched UV's are cached for atlas textures\n         * @member {PIXI.MeshBatchUvs}\n         * @private\n         */\n        this.batchUvs = null;\n    }\n\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get uvBuffer(): Buffer\n    {\n        return this.geometry.buffers[1];\n    }\n\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get verticesBuffer(): Buffer\n    {\n        return this.geometry.buffers[0];\n    }\n\n    /**\n     * Alias for {@link PIXI.Mesh#shader}.\n     * @member {PIXI.MeshMaterial}\n     */\n    set material(value: MeshMaterial)\n    {\n        this.shader = value;\n    }\n\n    get material(): MeshMaterial\n    {\n        return this.shader;\n    }\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this.shader.tint;\n    }\n\n    set tint(value: number)\n    {\n        this.shader.tint = value;\n    }\n\n    /**\n     * The texture that the Mesh uses.\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture(): Texture\n    {\n        return this.shader.texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this.shader.texture = value;\n    }\n\n    /**\n     * Standard renderer draw.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        const vertices = this.geometry.buffers[0].data;\n\n        // TODO benchmark check for attribute size..\n        if (\n            this.shader.batchable\n            && this.drawMode === DRAW_MODES.TRIANGLES\n            && vertices.length < Mesh.BATCHABLE_SIZE * 2\n        )\n        {\n            this._renderToBatch(renderer);\n        }\n        else\n        {\n            this._renderDefault(renderer);\n        }\n    }\n\n    /**\n     * Standard non-batching way of rendering.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _renderDefault(renderer: Renderer): void\n    {\n        const shader = this.shader;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        if (shader.program.uniformData.translationMatrix)\n        {\n            shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        }\n\n        // bind and sync uniforms..\n        renderer.shader.bind(shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n\n    /**\n     * Rendering by using the Batch system.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _renderToBatch(renderer: Renderer): void\n    {\n        const geometry = this.geometry;\n\n        if (this.shader.uvMatrix)\n        {\n            this.shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data as Uint16Array;\n        this._tintRGB = this.shader._tintRGB;\n        this._texture = this.shader.texture;\n\n        const pluginName = this.material.pluginName;\n\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    }\n\n    /**\n     * Updates vertexData field based on transform and vertices\n     */\n    public calculateVertices(): void\n    {\n        const geometry = this.geometry;\n        const vertices = geometry.buffers[0].data;\n\n        if ((geometry as any).vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        if (this.vertexData.length !== vertices.length)\n        {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const vertexData = this.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n\n        this.vertexDirty = (geometry as any).vertexDirtyId;\n    }\n\n    /**\n     * Updates uv field based on from geometry uv's or batchUvs\n     */\n    public calculateUvs(): void\n    {\n        const geomUvs = this.geometry.buffers[1];\n\n        if (!this.shader.uvMatrix.isSimple)\n        {\n            if (!this.batchUvs)\n            {\n                this.batchUvs = new MeshBatchUvs(geomUvs, this.shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else\n        {\n            this.uvs = geomUvs.data as Float32Array;\n        }\n    }\n\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     *\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    }\n\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        if (!this.getBounds().contains(point.x, point.y))\n        {\n            return false;\n        }\n\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const vertices = this.geometry.getBuffer('aVertexPosition').data;\n\n        const points = tempPolygon.points;\n        const indices =  this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.drawMode === 4 ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    /**\n     * Destroys the Mesh object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     */\n    public destroy(options: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0)\n        {\n            this.geometry.dispose();\n        }\n\n        (this as any).geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    }\n\n    /**\n     * The maximum number of vertices to consider batchable. Generally, the complexity\n     * of the geometry.\n     * @memberof PIXI.Mesh\n     * @static\n     * @member {number} BATCHABLE_SIZE\n     */\n    public static BATCHABLE_SIZE = 100;\n}\n\n","import { Program, Shader, TextureMatrix } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba } from '@pixi/utils';\nimport fragment from './shader/mesh.frag';\nimport vertex from './shader/mesh.vert';\n\nimport type { Texture } from '@pixi/core';\nimport type { Dict } from '@pixi/utils';\n\nexport interface IMeshMaterialOptions {\n    alpha?: number;\n    tint?: number;\n    pluginName?: string;\n    program?: Program;\n    uniforms?: Dict<unknown>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MeshMaterial extends GlobalMixins.MeshMaterial {}\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nexport class MeshMaterial extends Shader\n{\n    public readonly uvMatrix: TextureMatrix;\n\n    public batchable: boolean;\n    public pluginName: string;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    private _colorDirty: boolean;\n    private _alpha: number;\n    private _tint: number;\n\n    /**\n     * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n     * @param {object} [options] - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler: Texture, options?: IMeshMaterialOptions)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        /**\n         * Only do update if tint or alpha changes.\n         * @member {boolean}\n         * @private\n         * @default false\n         */\n        this._colorDirty = false;\n\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix}\n         * @readonly\n         */\n        this.uvMatrix = new TextureMatrix(uSampler);\n\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean}\n         * @default true\n         */\n        this.batchable = options.program === undefined;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /**\n     * Reference to the texture being rendered.\n     * @member {PIXI.Texture}\n     */\n    get texture(): Texture\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value: Texture)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     * @member {number}\n     */\n    set alpha(value: number)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    set tint(value: number)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * MeshMaterial objects.\n     */\n    public update(): void\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            premultiplyTintToRgba(\n                this._tint, this._alpha, this.uniforms.uColor, (baseTexture.alphaMode as unknown as boolean)\n            );\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { Buffer, Geometry } from '@pixi/core';\n\nimport type { IArrayBuffer } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nexport class MeshGeometry extends Geometry\n{\n    // Internal-only properties\n    _updateId: number;\n\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    constructor(vertices?: IArrayBuffer, uvs?: IArrayBuffer, index?: IArrayBuffer)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        /**\n         * Dirty flag to limit update calls on Mesh. For example,\n         * limiting updates on a single Mesh instance with a shared Geometry\n         * within the render loop.\n         * @private\n         * @member {number}\n         * @default -1\n         */\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     * @member {number}\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId(): number\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,IAAIA,aAAa,GAAG,SAAAA,CAASC,CAAC,EAAEC,CAAC,EAAE;EAC/BF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;IAAEC,SAAS,EAAE;EAAE,CAAE,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;IAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;EAAC,CAAG,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;IAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC;MAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC;QAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;MAAA;IAAA;EAAC,CAAE;EAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;CAC7B;AAED,SAAgBO,SAASA,CAACR,CAAC,EAAEC,CAAC,EAAE;EAC5BF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EACnB,SAASQ,EAAEA,CAAA,EAAG;IAAE,IAAI,CAACC,WAAW,GAAGV,CAAC;EAAC;EACrCA,CAAC,CAACW,SAAS,GAAGV,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACU,MAAM,CAACX,CAAC,CAAC,IAAIQ,EAAE,CAACE,SAAS,GAAGV,CAAC,CAACU,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;;;ACxBxF;;;;;;AAMA,IAAAI,YAAA;;;;;EAgBI,SAAAA,aAAYC,QAAgB,EAAEC,QAAuB;;;;;IAMjD,IAAI,CAACD,QAAQ,GAAGA,QAAQ;;;;;IAMxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;;;;;;IAOxB,IAAI,CAACC,IAAI,GAAG,IAAI;IAEhB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;IAEzB,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;IAE1B,IAAI,CAACC,SAAS,GAAG,CAAC;;;;;;;EAQfN,YAAA,CAAAF,SAAA,CAAAS,MAAM,GAAb,UAAcC,WAAqB;IAE/B,IAAI,CAACA,WAAW,IACT,IAAI,CAACJ,eAAe,KAAK,IAAI,CAACH,QAAQ,CAACK,SAAS,IAChD,IAAI,CAACD,gBAAgB,KAAK,IAAI,CAACH,QAAQ,CAACI,SAAS,EAExD;MACI;;IAGJ,IAAI,CAACF,eAAe,GAAG,IAAI,CAACH,QAAQ,CAACK,SAAS;IAC9C,IAAI,CAACD,gBAAgB,GAAG,IAAI,CAACH,QAAQ,CAACI,SAAS;IAE/C,IAAMH,IAAI,GAAG,IAAI,CAACF,QAAQ,CAACE,IAAoB;IAE/C,IAAI,CAAC,IAAI,CAACA,IAAI,IAAI,IAAI,CAACA,IAAI,CAACM,MAAM,KAAKN,IAAI,CAACM,MAAM,EAClD;MACK,IAAI,CAACN,IAAY,GAAG,IAAIO,YAAY,CAACP,IAAI,CAACM,MAAM,CAAC;;IAGtD,IAAI,CAACP,QAAQ,CAACS,WAAW,CAACR,IAAI,EAAE,IAAI,CAACA,IAAI,CAAC;IAE1C,IAAI,CAACG,SAAS,EAAE;GACnB;EACL,OAAAN,YAAC;CAAA;ACrED,IAAMY,SAAS,GAAG,IAAIC,KAAK,EAAE;AAC7B,IAAMC,WAAW,GAAG,IAAIC,OAAO,EAAE;;;;;;;;;;;;;;;;;;;AAuBjC,IAAAC,IAAA,0BAAAC,MAAA;EAA0BtB,SAAA,CAAAqB,IAAA,EAAAC,MAAA;;;;;;;;EA4BtB,SAAAD,KAAYE,QAAkB,EAAEC,MAAoB,EAAEC,KAAa,EAAEC,QAA+B;IAA/B,IAAAA,QAAA;MAAAA,QAAA,GAAWC,UAAU,CAACC,SAAS;IAAA;IAApG,IAAAC,KAAA,GAEIP,MAAA,CAAAQ,IAAA,MAAO;;;;;;;;IASPD,KAAI,CAACN,QAAQ,GAAGA,QAAQ;IAExBA,QAAQ,CAACQ,QAAQ,EAAE;;;;;;IAOnBF,KAAI,CAACL,MAAM,GAAGA,MAAM;;;;;;IAOpBK,KAAI,CAACJ,KAAK,GAAGA,KAAK,IAAIO,KAAK,CAACC,KAAK,EAAE;;;;;;;IAQnCJ,KAAI,CAACH,QAAQ,GAAGA,QAAQ;;;;;;IAOxBG,KAAI,CAACK,KAAK,GAAG,CAAC;;;;;;IAOdL,KAAI,CAACM,IAAI,GAAG,CAAC;;;;;;IAObN,KAAI,CAACO,GAAG,GAAG,IAAI;;;;;;IAOfP,KAAI,CAACQ,OAAO,GAAG,IAAI;;;;;;IAOnBR,KAAI,CAACS,UAAU,GAAG,IAAIvB,YAAY,CAAC,CAAC,CAAC;;;;;;;IAQrCc,KAAI,CAACU,WAAW,GAAG,CAAC;IAEpBV,KAAI,CAACW,YAAY,GAAG,CAAC,CAAC;;IAGtBX,KAAI,CAACY,IAAI,GAAG,QAAQ;IACpBZ,KAAI,CAACa,SAAS,GAAGC,WAAW,CAACC,MAAM;;;;;;;IAQnCf,KAAI,CAACgB,YAAY,GAAGC,QAAQ,CAACC,YAAY;;;;;;IAOzClB,KAAI,CAACmB,QAAQ,GAAG,IAAI;;;EAQxBtD,MAAA,CAAAuD,cAAA,CAAI5B,IAAA,CAAAlB,SAAA,YAAQ;;;;;;SAAZ,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAAC3B,QAAQ,CAAC4B,OAAO,CAAC,CAAC,CAAC;KAClC;;;;EAQDzD,MAAA,CAAAuD,cAAA,CAAI5B,IAAA,CAAAlB,SAAA,kBAAc;;;;;;;SAAlB,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAAC3B,QAAQ,CAAC4B,OAAO,CAAC,CAAC,CAAC;KAClC;;;;EAMDzD,MAAA,CAAAuD,cAAA,CAAI5B,IAAA,CAAAlB,SAAA,YAAQ;SAKZ,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAAC1B,MAAM;KACrB;;;;;SARD,SAAA4B,CAAaC,KAAmB;MAE5B,IAAI,CAAC7B,MAAM,GAAG6B,KAAK;KACtB;;;;EAeD3D,MAAA,CAAAuD,cAAA,CAAI5B,IAAA,CAAAlB,SAAA,aAAS;SAKb,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAACzB,KAAK,CAACiB,SAAS;KAC9B;;;;;;;;;SARD,SAAAU,CAAcC,KAAkB;MAE5B,IAAI,CAAC5B,KAAK,CAACiB,SAAS,GAAGW,KAAK;KAC/B;;;;EAgBD3D,MAAA,CAAAuD,cAAA,CAAI5B,IAAA,CAAAlB,SAAA,eAAW;SASf,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAACL,YAAY;KAC3B;;;;;;;;;;SAZD,SAAAO,CAAgBC,KAAc;MAE1B,IAAI,IAAI,CAACR,YAAY,KAAKQ,KAAK,EAC/B;QACI,IAAI,CAACb,YAAY,GAAG,CAAC,CAAC;;MAE1B,IAAI,CAACK,YAAY,GAAGQ,KAAK;KAC5B;;;;EAcD3D,MAAA,CAAAuD,cAAA,CAAI5B,IAAA,CAAAlB,SAAA,QAAI;;;;;;;;SAAR,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAAC1B,MAAM,CAACiB,IAAI;KAC1B;SAED,SAAAW,CAASC,KAAa;MAElB,IAAI,CAAC7B,MAAM,CAACiB,IAAI,GAAGY,KAAK;KAC3B;;;;EAOD3D,MAAA,CAAAuD,cAAA,CAAI5B,IAAA,CAAAlB,SAAA,WAAO;;;;;;SAAX,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAAC1B,MAAM,CAAC8B,OAAO;KAC7B;SAED,SAAAF,CAAYC,KAAc;MAEtB,IAAI,CAAC7B,MAAM,CAAC8B,OAAO,GAAGD,KAAK;KAC9B;;;;;;;;;EAOShC,IAAA,CAAAlB,SAAA,CAAAoD,OAAO,GAAjB,UAAkBC,QAAkB;;;IAIhC,IAAMC,QAAQ,GAAG,IAAI,CAAClC,QAAQ,CAAC4B,OAAO,CAAC,CAAC,CAAC,CAAC3C,IAAI;;IAG9C,IACI,IAAI,CAACgB,MAAM,CAACkC,SAAS,IAClB,IAAI,CAAChC,QAAQ,KAAKC,UAAU,CAACC,SAAS,IACtC6B,QAAQ,CAAC3C,MAAM,GAAGO,IAAI,CAACsC,cAAc,GAAG,CAAC,EAEhD;MACI,IAAI,CAACC,cAAc,CAACJ,QAAQ,CAAC;KAChC,MAED;MACI,IAAI,CAACK,cAAc,CAACL,QAAQ,CAAC;;GAEpC;;;;;;EAOSnC,IAAA,CAAAlB,SAAA,CAAA0D,cAAc,GAAxB,UAAyBL,QAAkB;IAEvC,IAAMhC,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1BA,MAAM,CAACsC,KAAK,GAAG,IAAI,CAACC,UAAU;IAC9B,IAAIvC,MAAM,CAACZ,MAAM,EACjB;MACIY,MAAM,CAACZ,MAAM,EAAE;;IAGnB4C,QAAQ,CAACQ,KAAK,CAACC,KAAK,EAAE;IAEtB,IAAIzC,MAAM,CAAC0C,OAAO,CAACC,WAAW,CAACC,iBAAiB,EAChD;MACI5C,MAAM,CAAC6C,QAAQ,CAACD,iBAAiB,GAAG,IAAI,CAACE,SAAS,CAACC,cAAc,CAACC,OAAO,CAAC,IAAI,CAAC;;;IAInFhB,QAAQ,CAAChC,MAAM,CAACiD,IAAI,CAACjD,MAAM,CAAC;;IAG5BgC,QAAQ,CAAC/B,KAAK,CAAC2B,GAAG,CAAC,IAAI,CAAC3B,KAAK,CAAC;;IAG9B+B,QAAQ,CAACjC,QAAQ,CAACkD,IAAI,CAAC,IAAI,CAAClD,QAAQ,EAAEC,MAAM,CAAC;;IAG7CgC,QAAQ,CAACjC,QAAQ,CAACmD,IAAI,CAAC,IAAI,CAAChD,QAAQ,EAAE,IAAI,CAACS,IAAI,EAAE,IAAI,CAACD,KAAK,EAAE,IAAI,CAACX,QAAQ,CAACoD,aAAa,CAAC;GAC5F;;;;;;EAOStD,IAAA,CAAAlB,SAAA,CAAAyD,cAAc,GAAxB,UAAyBJ,QAAkB;IAEvC,IAAMjC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAE9B,IAAI,IAAI,CAACC,MAAM,CAACjB,QAAQ,EACxB;MACI,IAAI,CAACiB,MAAM,CAACjB,QAAQ,CAACK,MAAM,EAAE;MAC7B,IAAI,CAACgE,YAAY,EAAE;;;IAIvB,IAAI,CAACC,iBAAiB,EAAE;IACxB,IAAI,CAACxC,OAAO,GAAGd,QAAQ,CAACuD,WAAW,CAACtE,IAAmB;IACvD,IAAI,CAACuE,QAAQ,GAAG,IAAI,CAACvD,MAAM,CAACuD,QAAQ;IACpC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACxD,MAAM,CAAC8B,OAAO;IAEnC,IAAM2B,UAAU,GAAG,IAAI,CAACC,QAAQ,CAACD,UAAU;IAE3CzB,QAAQ,CAACQ,KAAK,CAACmB,iBAAiB,CAAC3B,QAAQ,CAAC4B,OAAO,CAACH,UAAU,CAAC,CAAC;IAC9DzB,QAAQ,CAAC4B,OAAO,CAACH,UAAU,CAAC,CAACI,MAAM,CAAC,IAAI,CAAC;GAC5C;;;;EAKMhE,IAAA,CAAAlB,SAAA,CAAA0E,iBAAiB,GAAxB;IAEI,IAAMtD,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,IAAMkC,QAAQ,GAAGlC,QAAQ,CAAC4B,OAAO,CAAC,CAAC,CAAC,CAAC3C,IAAI;IAEzC,IAAKe,QAAgB,CAAC+D,aAAa,KAAK,IAAI,CAAC/C,WAAW,IAAI,IAAI,CAACC,YAAY,KAAK,IAAI,CAAC8B,SAAS,CAACiB,QAAQ,EACzG;MACI;;IAGJ,IAAI,CAAC/C,YAAY,GAAG,IAAI,CAAC8B,SAAS,CAACiB,QAAQ;IAE3C,IAAI,IAAI,CAACjD,UAAU,CAACxB,MAAM,KAAK2C,QAAQ,CAAC3C,MAAM,EAC9C;MACI,IAAI,CAACwB,UAAU,GAAG,IAAIvB,YAAY,CAAC0C,QAAQ,CAAC3C,MAAM,CAAC;;IAGvD,IAAM0E,EAAE,GAAG,IAAI,CAAClB,SAAS,CAACC,cAAc;IACxC,IAAMkB,CAAC,GAAGD,EAAE,CAACC,CAAC;IACd,IAAMhG,CAAC,GAAG+F,EAAE,CAAC/F,CAAC;IACd,IAAMiG,CAAC,GAAGF,EAAE,CAACE,CAAC;IACd,IAAMlG,CAAC,GAAGgG,EAAE,CAAChG,CAAC;IACd,IAAMmG,EAAE,GAAGH,EAAE,CAACG,EAAE;IAChB,IAAMC,EAAE,GAAGJ,EAAE,CAACI,EAAE;IAEhB,IAAMtD,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,KAAK,IAAIuD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvD,UAAU,CAACxB,MAAM,GAAG,CAAC,EAAE+E,CAAC,EAAE,EAC9C;MACI,IAAMC,CAAC,GAAGrC,QAAQ,CAAEoC,CAAC,GAAG,CAAC,CAAE;MAC3B,IAAME,CAAC,GAAGtC,QAAQ,CAAEoC,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC;MAE/BvD,UAAU,CAAEuD,CAAC,GAAG,CAAC,CAAE,GAAIJ,CAAC,GAAGK,CAAC,GAAKJ,CAAC,GAAGK,CAAE,GAAGJ,EAAE;MAC5CrD,UAAU,CAAEuD,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC,GAAIpG,CAAC,GAAGqG,CAAC,GAAKtG,CAAC,GAAGuG,CAAE,GAAGH,EAAE;;IAGpD,IAAI,IAAI,CAAC/C,YAAY,EACrB;MACI,IAAMmD,UAAU,GAAGlD,QAAQ,CAACmD,UAAU;MAEtC,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvD,UAAU,CAACxB,MAAM,EAAE,EAAE+E,CAAC,EAC1C;QACIvD,UAAU,CAACuD,CAAC,CAAC,GAAGK,IAAI,CAACC,KAAK,CAAC,CAAC7D,UAAU,CAACuD,CAAC,CAAC,GAAGG,UAAU,GAAG,CAAC,IAAIA,UAAU,CAAC;;;IAIjF,IAAI,CAACzD,WAAW,GAAIhB,QAAgB,CAAC+D,aAAa;GACrD;;;;EAKMjE,IAAA,CAAAlB,SAAA,CAAAyE,YAAY,GAAnB;IAEI,IAAMwB,OAAO,GAAG,IAAI,CAAC7E,QAAQ,CAAC4B,OAAO,CAAC,CAAC,CAAC;IAExC,IAAI,CAAC,IAAI,CAAC3B,MAAM,CAACjB,QAAQ,CAAC8F,QAAQ,EAClC;MACI,IAAI,CAAC,IAAI,CAACrD,QAAQ,EAClB;QACI,IAAI,CAACA,QAAQ,GAAG,IAAI3C,YAAY,CAAC+F,OAAO,EAAE,IAAI,CAAC5E,MAAM,CAACjB,QAAQ,CAAC;;MAEnE,IAAI,CAACyC,QAAQ,CAACpC,MAAM,EAAE;MACtB,IAAI,CAACwB,GAAG,GAAG,IAAI,CAACY,QAAQ,CAACxC,IAAI;KAChC,MAED;MACI,IAAI,CAAC4B,GAAG,GAAGgE,OAAO,CAAC5F,IAAoB;;GAE9C;;;;;;;EAQSa,IAAA,CAAAlB,SAAA,CAAAmG,gBAAgB,GAA1B;IAEI,IAAI,CAACzB,iBAAiB,EAAE;IAExB,IAAI,CAAC0B,OAAO,CAACC,aAAa,CAAC,IAAI,CAAClE,UAAU,EAAE,CAAC,EAAE,IAAI,CAACA,UAAU,CAACxB,MAAM,CAAC;GACzE;;;;;;;EAQMO,IAAA,CAAAlB,SAAA,CAAAsG,aAAa,GAApB,UAAqBC,KAAiB;IAElC,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE,CAACC,QAAQ,CAACF,KAAK,CAACZ,CAAC,EAAEY,KAAK,CAACX,CAAC,CAAC,EAChD;MACI,OAAO,KAAK;;IAGhB,IAAI,CAACxB,cAAc,CAACsC,YAAY,CAACH,KAAK,EAAEzF,SAAS,CAAC;IAElD,IAAMwC,QAAQ,GAAG,IAAI,CAAClC,QAAQ,CAACuF,SAAS,CAAC,iBAAiB,CAAC,CAACtG,IAAI;IAEhE,IAAMuG,MAAM,GAAG5F,WAAW,CAAC4F,MAAM;IACjC,IAAM1E,OAAO,GAAI,IAAI,CAACd,QAAQ,CAACyF,QAAQ,EAAE,CAACxG,IAAI;IAC9C,IAAMyG,GAAG,GAAG5E,OAAO,CAACvB,MAAM;IAC1B,IAAMoG,IAAI,GAAG,IAAI,CAACxF,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;IAExC,KAAK,IAAImE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,GAAGoB,GAAG,EAAEpB,CAAC,IAAIqB,IAAI,EACtC;MACI,IAAMC,IAAI,GAAG9E,OAAO,CAACwD,CAAC,CAAC,GAAG,CAAC;MAC3B,IAAMuB,IAAI,GAAG/E,OAAO,CAACwD,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAC/B,IAAMwB,IAAI,GAAGhF,OAAO,CAACwD,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAE/BkB,MAAM,CAAC,CAAC,CAAC,GAAGtD,QAAQ,CAAC0D,IAAI,CAAC;MAC1BJ,MAAM,CAAC,CAAC,CAAC,GAAGtD,QAAQ,CAAC0D,IAAI,GAAG,CAAC,CAAC;MAC9BJ,MAAM,CAAC,CAAC,CAAC,GAAGtD,QAAQ,CAAC2D,IAAI,CAAC;MAC1BL,MAAM,CAAC,CAAC,CAAC,GAAGtD,QAAQ,CAAC2D,IAAI,GAAG,CAAC,CAAC;MAC9BL,MAAM,CAAC,CAAC,CAAC,GAAGtD,QAAQ,CAAC4D,IAAI,CAAC;MAC1BN,MAAM,CAAC,CAAC,CAAC,GAAGtD,QAAQ,CAAC4D,IAAI,GAAG,CAAC,CAAC;MAE9B,IAAIlG,WAAW,CAACyF,QAAQ,CAAC3F,SAAS,CAAC6E,CAAC,EAAE7E,SAAS,CAAC8E,CAAC,CAAC,EAClD;QACI,OAAO,IAAI;;;IAInB,OAAO,KAAK;GACf;;;;;;;;;EASM1E,IAAA,CAAAlB,SAAA,CAAAmH,OAAO,GAAd,UAAeC,OAAgC;IAE3CjG,MAAA,CAAAnB,SAAA,CAAMmH,OAAO,CAAAxF,IAAA,OAACyF,OAAO,CAAC;IAEtB,IAAI,CAAChG,QAAQ,CAACQ,QAAQ,EAAE;IACxB,IAAI,IAAI,CAACR,QAAQ,CAACQ,QAAQ,KAAK,CAAC,EAChC;MACI,IAAI,CAACR,QAAQ,CAACiG,OAAO,EAAE;;IAG1B,IAAY,CAACjG,QAAQ,GAAG,IAAI;IAC7B,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACW,GAAG,GAAG,IAAI;IACf,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,UAAU,GAAG,IAAI;GACzB;;;;;;;;EASajB,IAAA,CAAAsC,cAAc,GAAG,GAAG;EACtC,OAAAtC,IAAC;CAAA,CA1eyBoG,SAAS;;;;;;;;;;ACVnC,IAAAC,YAAA,0BAAApG,MAAA;EAAkCtB,SAAA,CAAA0H,YAAA,EAAApG,MAAA;;;;;;;;;;EAuB9B,SAAAoG,aAAYC,QAAiB,EAAEJ,OAA8B;IAA7D,IAAA1F,KAAA;IAEI,IAAMwC,QAAQ,GAAG;MACbsD,QAAQ,EAAAA,QAAA;MACR7D,KAAK,EAAE,CAAC;MACR8D,cAAc,EAAEC,MAAM,CAACC,QAAQ;MAC/BC,MAAM,EAAE,IAAIhH,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;KACxC;;IAGDwG,OAAO,GAAG7H,MAAM,CAACsI,MAAM,CAAC;MACpBvF,IAAI,EAAE,QAAQ;MACdqB,KAAK,EAAE,CAAC;MACRmB,UAAU,EAAE;KACf,EAAEsC,OAAO,CAAC;IAEX,IAAIA,OAAO,CAAClD,QAAQ,EACpB;MACI3E,MAAM,CAACsI,MAAM,CAAC3D,QAAQ,EAAEkD,OAAO,CAAClD,QAAQ,CAAC;;IAG7CxC,KAAA,GAAAP,MAAA,CAAAQ,IAAA,OAAMyF,OAAO,CAACrD,OAAO,IAAI+D,OAAO,CAACC,IAAI,CAACC,MAAM,EAAEC,QAAQ,CAAC,EAAE/D,QAAQ,CAAC;;;;;;;IAQlExC,KAAI,CAACwG,WAAW,GAAG,KAAK;;;;;;;IAQxBxG,KAAI,CAACtB,QAAQ,GAAG,IAAI+H,aAAa,CAACX,QAAQ,CAAC;;;;;;IAO3C9F,KAAI,CAAC6B,SAAS,GAAG6D,OAAO,CAACrD,OAAO,KAAKqE,SAAS;;;;;;;IAQ9C1G,KAAI,CAACoD,UAAU,GAAGsC,OAAO,CAACtC,UAAU;IAEpCpD,KAAI,CAACY,IAAI,GAAG8E,OAAO,CAAC9E,IAAI;IACxBZ,KAAI,CAACiC,KAAK,GAAGyD,OAAO,CAACzD,KAAK;;;EAO9BpE,MAAA,CAAAuD,cAAA,CAAIyE,YAAA,CAAAvH,SAAA,WAAO;;;;;SAAX,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAACmB,QAAQ,CAACsD,QAAQ;KAChC;SACD,SAAAvE,CAAYC,KAAc;MAEtB,IAAI,IAAI,CAACgB,QAAQ,CAACsD,QAAQ,KAAKtE,KAAK,EACpC;QACI,IAAI,CAACgB,QAAQ,CAACsD,QAAQ,GAAGtE,KAAK;QAC9B,IAAI,CAAC9C,QAAQ,CAAC+C,OAAO,GAAGD,KAAK;;KAEpC;;;;EAQD3D,MAAA,CAAAuD,cAAA,CAAIyE,YAAA,CAAAvH,SAAA,SAAK;SAOT,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAACsF,MAAM;KACrB;;;;;;;SAVD,SAAApF,CAAUC,KAAa;MAEnB,IAAIA,KAAK,KAAK,IAAI,CAACmF,MAAM,E;QAAE;MAAA;MAE3B,IAAI,CAACA,MAAM,GAAGnF,KAAK;MACnB,IAAI,CAACgF,WAAW,GAAG,IAAI;KAC1B;;;;EAWD3I,MAAA,CAAAuD,cAAA,CAAIyE,YAAA,CAAAvH,SAAA,QAAI;SAQR,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAACuF,KAAK;KACpB;;;;;;SAXD,SAAArF,CAASC,KAAa;MAElB,IAAIA,KAAK,KAAK,IAAI,CAACoF,KAAK,E;QAAE;MAAA;MAE1B,IAAI,CAACA,KAAK,GAAGpF,KAAK;MAClB,IAAI,CAAC0B,QAAQ,GAAG,CAAC1B,KAAK,IAAI,EAAE,KAAKA,KAAK,GAAG,MAAM,CAAC,IAAI,CAACA,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;MACzE,IAAI,CAACgF,WAAW,GAAG,IAAI;KAC1B;;;;;;;;EAUMX,YAAA,CAAAvH,SAAA,CAAAS,MAAM,GAAb;IAEI,IAAI,IAAI,CAACyH,WAAW,EACpB;MACI,IAAI,CAACA,WAAW,GAAG,KAAK;MACxB,IAAMK,WAAW,GAAG,IAAI,CAACpF,OAAO,CAACoF,WAAW;MAE5CC,qBAAqB,CACjB,IAAI,CAACF,KAAK,EAAE,IAAI,CAACD,MAAM,EAAE,IAAI,CAACnE,QAAQ,CAAC0D,MAAM,EAAGW,WAAW,CAACE,SAAgC,CAC/F;;IAEL,IAAI,IAAI,CAACrI,QAAQ,CAACK,MAAM,EAAE,EAC1B;MACI,IAAI,CAACyD,QAAQ,CAACuD,cAAc,GAAG,IAAI,CAACrH,QAAQ,CAACsI,QAAQ;;GAE5D;EACL,OAAAnB,YAAC;CA1JD,CAAkCoB,MAAM;;;;;;;;;;;;;;;;;;;ACJxC,IAAAC,YAAA,0BAAAzH,MAAA;EAAkCtB,SAAA,CAAA+I,YAAA,EAAAzH,MAAA;;;;;;EAU9B,SAAAyH,aAAYtF,QAAuB,EAAErB,GAAkB,EAAE4G,KAAoB;IAA7E,IAAAnH,KAAA,GAEIP,MAAA,CAAAQ,IAAA,MAAO;IAEP,IAAMmH,cAAc,GAAG,IAAIC,MAAM,CAACzF,QAAQ,CAAC;IAC3C,IAAM0F,SAAS,GAAG,IAAID,MAAM,CAAC9G,GAAG,EAAE,IAAI,CAAC;IACvC,IAAM0C,WAAW,GAAG,IAAIoE,MAAM,CAACF,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IAEjDnH,KAAI,CAACuH,YAAY,CAAC,iBAAiB,EAAEH,cAAc,EAAE,CAAC,EAAE,KAAK,EAAEI,KAAK,CAACC,KAAK,CAAC,CACtEF,YAAY,CAAC,eAAe,EAAED,SAAS,EAAE,CAAC,EAAE,KAAK,EAAEE,KAAK,CAACC,KAAK,CAAC,CAC/DC,QAAQ,CAACzE,WAAW,CAAC;;;;;;;;;IAU1BjD,KAAI,CAAC2H,SAAS,GAAG,CAAC,CAAC;;;EASvB9J,MAAA,CAAAuD,cAAA,CAAI8F,YAAA,CAAA5I,SAAA,iBAAa;;;;;;;SAAjB,SAAA+C,CAAA;MAEI,OAAO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACxC,SAAS;KACnC;;;;EACL,OAAAoI,YAAC;CA3CD,CAAkCU,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}