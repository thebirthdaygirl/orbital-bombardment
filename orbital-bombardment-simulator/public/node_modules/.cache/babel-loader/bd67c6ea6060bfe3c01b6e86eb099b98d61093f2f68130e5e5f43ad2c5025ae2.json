{"ast":null,"code":"/*!\n * @pixi/interaction - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/interaction is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Point } from '@pixi/math';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { DisplayObject, TemporaryDisplayObject } from '@pixi/display';\nimport { EventEmitter } from '@pixi/utils';\n\n/**\n * Holds all information related to an Interaction event\n *\n * @class\n * @memberof PIXI\n */\nvar InteractionData = /** @class */function () {\n  function InteractionData() {\n    this.pressure = 0;\n    this.rotationAngle = 0;\n    this.twist = 0;\n    this.tangentialPressure = 0;\n    /**\n     * This point stores the global coords of where the touch/mouse event happened\n     *\n     * @member {PIXI.Point}\n     */\n    this.global = new Point();\n    /**\n     * The target Sprite that was interacted with\n     *\n     * @member {PIXI.Sprite}\n     */\n    this.target = null;\n    /**\n     * When passed to an event handler, this will be the original DOM Event that was captured\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\n     * @member {MouseEvent|TouchEvent|PointerEvent}\n     */\n    this.originalEvent = null;\n    /**\n     * Unique identifier for this interaction\n     *\n     * @member {number}\n     */\n    this.identifier = null;\n    /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     * @type {Boolean}\n     */\n    this.isPrimary = false;\n    /**\n     * Indicates which button was pressed on the mouse or pointer device to trigger the event.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n     * @type {number}\n     */\n    this.button = 0;\n    /**\n     * Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n     * @type {number}\n     */\n    this.buttons = 0;\n    /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     * @type {number}\n     */\n    this.width = 0;\n    /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     * @type {number}\n     */\n    this.height = 0;\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     * @type {number}\n     */\n    this.tiltX = 0;\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     * @type {number}\n     */\n    this.tiltY = 0;\n    /**\n     * The type of pointer that triggered the event.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     * @type {string}\n     */\n    this.pointerType = null;\n    /**\n     * Pressure applied by the pointing device during the event. A Touch's force property\n     * will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     * @type {number}\n     */\n    this.pressure = 0;\n    /**\n     * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle\n     * @type {number}\n     */\n    this.rotationAngle = 0;\n    /**\n     * Twist of a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     * @type {number}\n     */\n    this.twist = 0;\n    /**\n     * Barrel pressure on a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     * @type {number}\n     */\n    this.tangentialPressure = 0;\n  }\n  Object.defineProperty(InteractionData.prototype, \"pointerId\", {\n    /**\n     * The unique identifier of the pointer. It will be the same as `identifier`.\n     * @readonly\n     * @member {number}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n     */\n    get: function () {\n      return this.identifier;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * This will return the local coordinates of the specified displayObject for this InteractionData\n   *\n   * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n   *  coords off\n   * @param {PIXI.Point} [point] - A Point object in which to store the value, optional (otherwise\n   *  will create a new point)\n   * @param {PIXI.Point} [globalPos] - A Point object containing your custom global coords, optional\n   *  (otherwise will use the current global coords)\n   * @return {PIXI.Point} A point containing the coordinates of the InteractionData position relative\n   *  to the DisplayObject\n   */\n  InteractionData.prototype.getLocalPosition = function (displayObject, point, globalPos) {\n    return displayObject.worldTransform.applyInverse(globalPos || this.global, point);\n  };\n  /**\n   * Copies properties from normalized event data.\n   *\n   * @param {Touch|MouseEvent|PointerEvent} event - The normalized event data\n   */\n  InteractionData.prototype.copyEvent = function (event) {\n    // isPrimary should only change on touchstart/pointerdown, so we don't want to overwrite\n    // it with \"false\" on later events when our shim for it on touch events might not be\n    // accurate\n    if ('isPrimary' in event && event.isPrimary) {\n      this.isPrimary = true;\n    }\n    this.button = 'button' in event && event.button;\n    // event.buttons is not available in all browsers (ie. Safari), but it does have a non-standard\n    // event.which property instead, which conveys the same information.\n    var buttons = 'buttons' in event && event.buttons;\n    this.buttons = Number.isInteger(buttons) ? buttons : 'which' in event && event.which;\n    this.width = 'width' in event && event.width;\n    this.height = 'height' in event && event.height;\n    this.tiltX = 'tiltX' in event && event.tiltX;\n    this.tiltY = 'tiltY' in event && event.tiltY;\n    this.pointerType = 'pointerType' in event && event.pointerType;\n    this.pressure = 'pressure' in event && event.pressure;\n    this.rotationAngle = 'rotationAngle' in event && event.rotationAngle;\n    this.twist = 'twist' in event && event.twist || 0;\n    this.tangentialPressure = 'tangentialPressure' in event && event.tangentialPressure || 0;\n  };\n  /**\n   * Resets the data for pooling.\n   */\n  InteractionData.prototype.reset = function () {\n    // isPrimary is the only property that we really need to reset - everything else is\n    // guaranteed to be overwritten\n    this.isPrimary = false;\n  };\n  return InteractionData;\n}();\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * Event class that mimics native DOM events.\n *\n * @class\n * @memberof PIXI\n */\nvar InteractionEvent = /** @class */function () {\n  function InteractionEvent() {\n    /**\n     * Whether this event will continue propagating in the tree.\n     *\n     * Remaining events for the {@link stopsPropagatingAt} object\n     * will still be dispatched.\n     *\n     * @member {boolean}\n     */\n    this.stopped = false;\n    /**\n     * At which object this event stops propagating.\n     *\n     * @private\n     * @member {PIXI.DisplayObject}\n     */\n    this.stopsPropagatingAt = null;\n    /**\n     * Whether we already reached the element we want to\n     * stop propagating at. This is important for delayed events,\n     * where we start over deeper in the tree again.\n     *\n     * @private\n     * @member {boolean}\n     */\n    this.stopPropagationHint = false;\n    /**\n     * The object which caused this event to be dispatched.\n     * For listener callback see {@link PIXI.InteractionEvent.currentTarget}.\n     *\n     * @member {PIXI.DisplayObject}\n     */\n    this.target = null;\n    /**\n     * The object whose event listener’s callback is currently being invoked.\n     *\n     * @member {PIXI.DisplayObject}\n     */\n    this.currentTarget = null;\n    /**\n     * Type of the event\n     *\n     * @member {string}\n     */\n    this.type = null;\n    /**\n     * InteractionData related to this event\n     *\n     * @member {PIXI.InteractionData}\n     */\n    this.data = null;\n  }\n  /**\n   * Prevents event from reaching any objects other than the current object.\n   *\n   */\n  InteractionEvent.prototype.stopPropagation = function () {\n    this.stopped = true;\n    this.stopPropagationHint = true;\n    this.stopsPropagatingAt = this.currentTarget;\n  };\n  /**\n   * Resets the event.\n   */\n  InteractionEvent.prototype.reset = function () {\n    this.stopped = false;\n    this.stopsPropagatingAt = null;\n    this.stopPropagationHint = false;\n    this.currentTarget = null;\n    this.target = null;\n  };\n  return InteractionEvent;\n}();\n\n/**\n * DisplayObjects with the {@link PIXI.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar InteractionTrackingData = /** @class */function () {\n  /**\n   * @param {number} pointerId - Unique pointer id of the event\n   * @private\n   */\n  function InteractionTrackingData(pointerId) {\n    this._pointerId = pointerId;\n    this._flags = InteractionTrackingData.FLAGS.NONE;\n  }\n  /**\n   *\n   * @private\n   * @param {number} flag - The interaction flag to set\n   * @param {boolean} yn - Should the flag be set or unset\n   */\n  InteractionTrackingData.prototype._doSet = function (flag, yn) {\n    if (yn) {\n      this._flags = this._flags | flag;\n    } else {\n      this._flags = this._flags & ~flag;\n    }\n  };\n  Object.defineProperty(InteractionTrackingData.prototype, \"pointerId\", {\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @private\n     * @member {number}\n     */\n    get: function () {\n      return this._pointerId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"flags\", {\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @private\n     * @member {number}\n     */\n    get: function () {\n      return this._flags;\n    },\n    set: function (flags) {\n      this._flags = flags;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"none\", {\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @private\n     * @member {number}\n     */\n    get: function () {\n      return this._flags === InteractionTrackingData.FLAGS.NONE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"over\", {\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function () {\n      return (this._flags & InteractionTrackingData.FLAGS.OVER) !== 0;\n    },\n    set: function (yn) {\n      this._doSet(InteractionTrackingData.FLAGS.OVER, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"rightDown\", {\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function () {\n      return (this._flags & InteractionTrackingData.FLAGS.RIGHT_DOWN) !== 0;\n    },\n    set: function (yn) {\n      this._doSet(InteractionTrackingData.FLAGS.RIGHT_DOWN, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"leftDown\", {\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function () {\n      return (this._flags & InteractionTrackingData.FLAGS.LEFT_DOWN) !== 0;\n    },\n    set: function (yn) {\n      this._doSet(InteractionTrackingData.FLAGS.LEFT_DOWN, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  InteractionTrackingData.FLAGS = Object.freeze({\n    NONE: 0,\n    OVER: 1 << 0,\n    LEFT_DOWN: 1 << 1,\n    RIGHT_DOWN: 1 << 2\n  });\n  return InteractionTrackingData;\n}();\n\n/**\n * Strategy how to search through stage tree for interactive objects\n *\n * @private\n * @class\n * @memberof PIXI\n */\nvar TreeSearch = /** @class */function () {\n  function TreeSearch() {\n    this._tempPoint = new Point();\n  }\n  /**\n   * Recursive implementation for findHit\n   *\n   * @private\n   * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param {Function} [func] - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n   * @param {boolean} [interactive] - Whether the displayObject is interactive\n   * @return {boolean} returns true if the displayObject hit the point\n   */\n  TreeSearch.prototype.recursiveFindHit = function (interactionEvent, displayObject, func, hitTest, interactive) {\n    if (!displayObject || !displayObject.visible) {\n      return false;\n    }\n    var point = interactionEvent.data.global;\n    // Took a little while to rework this function correctly! But now it is done and nice and optimized! ^_^\n    //\n    // This function will now loop through all objects and then only hit test the objects it HAS\n    // to, not all of them. MUCH faster..\n    // An object will be hit test if the following is true:\n    //\n    // 1: It is interactive.\n    // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n    //\n    // As another little optimization once an interactive object has been hit we can carry on\n    // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n    // A final optimization is that an object is not hit test directly if a child has already been hit.\n    interactive = displayObject.interactive || interactive;\n    var hit = false;\n    var interactiveParent = interactive;\n    // Flag here can set to false if the event is outside the parents hitArea or mask\n    var hitTestChildren = true;\n    // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n    // There is also no longer a need to hitTest children.\n    if (displayObject.hitArea) {\n      if (hitTest) {\n        displayObject.worldTransform.applyInverse(point, this._tempPoint);\n        if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y)) {\n          hitTest = false;\n          hitTestChildren = false;\n        } else {\n          hit = true;\n        }\n      }\n      interactiveParent = false;\n    }\n    // If there is a mask, no need to hitTest against anything else if the pointer is not within the mask.\n    // We still want to hitTestChildren, however, to ensure a mouseout can still be generated.\n    // https://github.com/pixijs/pixi.js/issues/5135\n    else if (displayObject._mask) {\n      if (hitTest) {\n        if (!(displayObject._mask.containsPoint && displayObject._mask.containsPoint(point))) {\n          hitTest = false;\n        }\n      }\n    }\n    // ** FREE TIP **! If an object is not interactive or has no buttons in it\n    // (such as a game scene!) set interactiveChildren to false for that displayObject.\n    // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n    if (hitTestChildren && displayObject.interactiveChildren && displayObject.children) {\n      var children = displayObject.children;\n      for (var i = children.length - 1; i >= 0; i--) {\n        var child = children[i];\n        // time to get recursive.. if this function will return if something is hit..\n        var childHit = this.recursiveFindHit(interactionEvent, child, func, hitTest, interactiveParent);\n        if (childHit) {\n          // its a good idea to check if a child has lost its parent.\n          // this means it has been removed whilst looping so its best\n          if (!child.parent) {\n            continue;\n          }\n          // we no longer need to hit test any more objects in this container as we we\n          // now know the parent has been hit\n          interactiveParent = false;\n          // If the child is interactive , that means that the object hit was actually\n          // interactive and not just the child of an interactive object.\n          // This means we no longer need to hit test anything else. We still need to run\n          // through all objects, but we don't need to perform any hit tests.\n          if (childHit) {\n            if (interactionEvent.target) {\n              hitTest = false;\n            }\n            hit = true;\n          }\n        }\n      }\n    }\n    // no point running this if the item is not interactive or does not have an interactive parent.\n    if (interactive) {\n      // if we are hit testing (as in we have no hit any objects yet)\n      // We also don't need to worry about hit testing if once of the displayObjects children\n      // has already been hit - but only if it was interactive, otherwise we need to keep\n      // looking for an interactive child, just in case we hit one\n      if (hitTest && !interactionEvent.target) {\n        // already tested against hitArea if it is defined\n        if (!displayObject.hitArea && displayObject.containsPoint) {\n          if (displayObject.containsPoint(point)) {\n            hit = true;\n          }\n        }\n      }\n      if (displayObject.interactive) {\n        if (hit && !interactionEvent.target) {\n          interactionEvent.target = displayObject;\n        }\n        if (func) {\n          func(interactionEvent, displayObject, !!hit);\n        }\n      }\n    }\n    return hit;\n  };\n  /**\n   * This function is provides a neat way of crawling through the scene graph and running a\n   * specified function on all interactive objects it finds. It will also take care of hit\n   * testing the interactive objects and passes the hit across in the function.\n   *\n   * @private\n   * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param {Function} [func] - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n   * @return {boolean} returns true if the displayObject hit the point\n   */\n  TreeSearch.prototype.findHit = function (interactionEvent, displayObject, func, hitTest) {\n    this.recursiveFindHit(interactionEvent, displayObject, func, hitTest, false);\n  };\n  return TreeSearch;\n}();\n\n/**\n * Interface for classes that represent a hit area.\n *\n * It is implemented by the following classes:\n * - {@link PIXI.Circle}\n * - {@link PIXI.Ellipse}\n * - {@link PIXI.Polygon}\n * - {@link PIXI.RoundedRectangle}\n *\n * @interface IHitArea\n * @memberof PIXI\n */\n/**\n * Checks whether the x and y coordinates given are contained within this area\n *\n * @method\n * @name contains\n * @memberof PIXI.IHitArea#\n * @param {number} x - The X coordinate of the point to test\n * @param {number} y - The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this area\n */\n/**\n * Default property values of interactive objects\n * Used by {@link PIXI.InteractionManager} to automatically give all DisplayObjects these properties\n *\n * @private\n * @name interactiveTarget\n * @type {Object}\n * @memberof PIXI\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          DisplayObject.prototype,\n *          PIXI.interactiveTarget\n *      );\n */\nvar interactiveTarget = {\n  /**\n   * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n   * events will not be emitted unless `interactive` is set to `true`.\n   *\n   * @example\n   * const sprite = new PIXI.Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.on('tap', (event) => {\n   *    //handle event\n   * });\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  interactive: false,\n  /**\n   * Determines if the children to the displayObject can be clicked/touched\n   * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n   *\n   * @member {boolean}\n   * @memberof PIXI.Container#\n   */\n  interactiveChildren: true,\n  /**\n   * Interaction shape. Children will be hit first, then this shape will be checked.\n   * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n   *\n   * @example\n   * const sprite = new PIXI.Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n   * @member {PIXI.IHitArea}\n   * @memberof PIXI.DisplayObject#\n   */\n  hitArea: null,\n  /**\n   * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n   * Setting this changes the 'cursor' property to `'pointer'`.\n   *\n   * @example\n   * const sprite = new PIXI.Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.buttonMode = true;\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  get buttonMode() {\n    return this.cursor === 'pointer';\n  },\n  set buttonMode(value) {\n    if (value) {\n      this.cursor = 'pointer';\n    } else if (this.cursor === 'pointer') {\n      this.cursor = null;\n    }\n  },\n  /**\n   * This defines what cursor mode is used when the mouse cursor\n   * is hovered over the displayObject.\n   *\n   * @example\n   * const sprite = new PIXI.Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.cursor = 'wait';\n   * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  cursor: null,\n  /**\n   * Internal set of all active pointers, by identifier\n   *\n   * @member {Map<number, InteractionTrackingData>}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   */\n  get trackedPointers() {\n    if (this._trackedPointers === undefined) {\n      this._trackedPointers = {};\n    }\n    return this._trackedPointers;\n  },\n  /**\n   * Map of all tracked pointers, by identifier. Use trackedPointers to access.\n   *\n   * @private\n   * @type {Map<number, InteractionTrackingData>}\n   */\n  _trackedPointers: undefined\n};\n\n// Mix interactiveTarget into DisplayObject.prototype,\n// after deprecation has been handled\nDisplayObject.mixin(interactiveTarget);\nvar MOUSE_POINTER_ID = 1;\n// helpers for hitTest() - only used inside hitTest()\nvar hitTestEvent = {\n  target: null,\n  data: {\n    global: null\n  }\n};\n/**\n * The interaction manager deals with mouse, touch and pointer events.\n *\n * Any DisplayObject can be interactive if its `interactive` property is set to true.\n *\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nvar InteractionManager = /** @class */function (_super) {\n  __extends(InteractionManager, _super);\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   * @param {object} [options] - The options for the manager.\n   * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n   * @param {number} [options.interactionFrequency=10] - Maximum requency (ms) at pointer over/out states will be checked.\n   * @param {number} [options.useSystemTicker=true] - Whether to add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n   */\n  function InteractionManager(renderer, options) {\n    var _this = _super.call(this) || this;\n    options = options || {};\n    /**\n     * The renderer this interaction manager works for.\n     *\n     * @member {PIXI.AbstractRenderer}\n     */\n    _this.renderer = renderer;\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    _this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n    /**\n     * Maximum requency in milliseconds at which pointer over/out states will be checked by {@link tickerUpdate}.\n     *\n     * @member {number}\n     * @default 10\n     */\n    _this.interactionFrequency = options.interactionFrequency || 10;\n    /**\n     * The mouse data\n     *\n     * @member {PIXI.InteractionData}\n     */\n    _this.mouse = new InteractionData();\n    _this.mouse.identifier = MOUSE_POINTER_ID;\n    // setting the mouse to start off far off screen will mean that mouse over does\n    //  not get called before we even move the mouse.\n    _this.mouse.global.set(-999999);\n    /**\n     * Actively tracked InteractionData\n     *\n     * @private\n     * @member {Object.<number,PIXI.InteractionData>}\n     */\n    _this.activeInteractionData = {};\n    _this.activeInteractionData[MOUSE_POINTER_ID] = _this.mouse;\n    /**\n     * Pool of unused InteractionData\n     *\n     * @private\n     * @member {PIXI.InteractionData[]}\n     */\n    _this.interactionDataPool = [];\n    /**\n     * An event data object to handle all the event tracking/dispatching\n     *\n     * @member {object}\n     */\n    _this.eventData = new InteractionEvent();\n    /**\n     * The DOM element to bind to.\n     *\n     * @protected\n     * @member {HTMLElement}\n     */\n    _this.interactionDOMElement = null;\n    /**\n     * This property determines if mousemove and touchmove events are fired only when the cursor\n     * is over the object.\n     * Setting to true will make things work more in line with how the DOM version works.\n     * Setting to false can make things easier for things like dragging\n     * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n     * future versions of pixi.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    _this.moveWhenInside = false;\n    /**\n     * Have events been attached to the dom element?\n     *\n     * @protected\n     * @member {boolean}\n     */\n    _this.eventsAdded = false;\n    /**\n     * Has the system ticker been added?\n     *\n     * @protected\n     * @member {boolean}\n     */\n    _this.tickerAdded = false;\n    /**\n     * Is the mouse hovering over the renderer?\n     *\n     * @protected\n     * @member {boolean}\n     */\n    _this.mouseOverRenderer = false;\n    /**\n     * Does the device support touch events\n     * https://www.w3.org/TR/touch-events/\n     *\n     * @readonly\n     * @member {boolean}\n     */\n    _this.supportsTouchEvents = 'ontouchstart' in window;\n    /**\n     * Does the device support pointer events\n     * https://www.w3.org/Submission/pointer-events/\n     *\n     * @readonly\n     * @member {boolean}\n     */\n    _this.supportsPointerEvents = !!window.PointerEvent;\n    // this will make it so that you don't have to call bind all the time\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerUp = _this.onPointerUp.bind(_this);\n    _this.processPointerUp = _this.processPointerUp.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerCancel = _this.onPointerCancel.bind(_this);\n    _this.processPointerCancel = _this.processPointerCancel.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerDown = _this.onPointerDown.bind(_this);\n    _this.processPointerDown = _this.processPointerDown.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerMove = _this.onPointerMove.bind(_this);\n    _this.processPointerMove = _this.processPointerMove.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerOut = _this.onPointerOut.bind(_this);\n    _this.processPointerOverOut = _this.processPointerOverOut.bind(_this);\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerOver = _this.onPointerOver.bind(_this);\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     * @member {Object.<string, Object>}\n     */\n    _this.cursorStyles = {\n      default: 'inherit',\n      pointer: 'pointer'\n    };\n    /**\n     * The mode of the cursor that is being used.\n     * The value of this is a key from the cursorStyles dictionary.\n     *\n     * @member {string}\n     */\n    _this.currentCursorMode = null;\n    /**\n     * Internal cached let.\n     *\n     * @private\n     * @member {string}\n     */\n    _this.cursor = null;\n    /**\n     * The current resolution / device pixel ratio.\n     *\n     * @member {number}\n     * @default 1\n     */\n    _this.resolution = 1;\n    /**\n     * Delayed pointer events. Used to guarantee correct ordering of over/out events.\n     *\n     * @private\n     * @member {Array}\n     */\n    _this.delayedEvents = [];\n    /**\n     * TreeSearch component that is used to hitTest stage tree\n     *\n     * @private\n     * @member {PIXI.TreeSearch}\n     */\n    _this.search = new TreeSearch();\n    /**\n     * Used as a last rendered object in case renderer doesnt have _lastObjectRendered\n     * @member {DisplayObject}\n     * @private\n     */\n    _this._tempDisplayObject = new TemporaryDisplayObject();\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n     * object.\n     *\n     * @event PIXI.InteractionManager#mousedown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object.\n     *\n     * @event PIXI.InteractionManager#rightdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object.\n     *\n     * @event PIXI.InteractionManager#mouseup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object.\n     *\n     * @event PIXI.InteractionManager#rightup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object.\n     *\n     * @event PIXI.InteractionManager#click\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object.\n     *\n     * @event PIXI.InteractionManager#rightclick\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.InteractionManager#event:mousedown}.\n     *\n     * @event PIXI.InteractionManager#mouseupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.InteractionManager#event:rightdown}.\n     *\n     * @event PIXI.InteractionManager#rightupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object\n     *\n     * @event PIXI.InteractionManager#mousemove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object\n     *\n     * @event PIXI.InteractionManager#mouseover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object\n     *\n     * @event PIXI.InteractionManager#mouseout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     *\n     * @event PIXI.InteractionManager#pointerdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * Not always fired when some buttons are held down while others are released. In those cases,\n     * use [mousedown]{@link PIXI.InteractionManager#event:mousedown} and\n     * [mouseup]{@link PIXI.InteractionManager#event:mouseup} instead.\n     *\n     * @event PIXI.InteractionManager#pointerup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when the operating system cancels a pointer event\n     *\n     * @event PIXI.InteractionManager#pointercancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     *\n     * @event PIXI.InteractionManager#pointertap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.InteractionManager#event:pointerdown}.\n     *\n     * @event PIXI.InteractionManager#pointerupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved while over the display object\n     *\n     * @event PIXI.InteractionManager#pointermove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved onto the display object\n     *\n     * @event PIXI.InteractionManager#pointerover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved off the display object\n     *\n     * @event PIXI.InteractionManager#pointerout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is placed on the display object.\n     *\n     * @event PIXI.InteractionManager#touchstart\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is removed from the display object.\n     *\n     * @event PIXI.InteractionManager#touchend\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when the operating system cancels a touch\n     *\n     * @event PIXI.InteractionManager#touchcancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     *\n     * @event PIXI.InteractionManager#tap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.InteractionManager#event:touchstart}.\n     *\n     * @event PIXI.InteractionManager#touchendoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is moved along the display object.\n     *\n     * @event PIXI.InteractionManager#touchmove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mousedown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#click\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightclick\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mousemove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when the operating system cancels a pointer event.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointercancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointertap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointermove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is placed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchstart\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchend\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when the operating system cancels a touch.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchcancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#tap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchendoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is moved along the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchmove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    _this._useSystemTicker = options.useSystemTicker !== undefined ? options.useSystemTicker : true;\n    _this.setTargetElement(_this.renderer.view, _this.renderer.resolution);\n    return _this;\n  }\n  Object.defineProperty(InteractionManager.prototype, \"useSystemTicker\", {\n    /**\n     * Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    get: function () {\n      return this._useSystemTicker;\n    },\n    set: function (useSystemTicker) {\n      this._useSystemTicker = useSystemTicker;\n      if (useSystemTicker) {\n        this.addTickerListener();\n      } else {\n        this.removeTickerListener();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionManager.prototype, \"lastObjectRendered\", {\n    /**\n     * Last rendered object or temp object\n     * @readonly\n     * @protected\n     * @member {PIXI.DisplayObject}\n     */\n    get: function () {\n      return this.renderer._lastObjectRendered || this._tempDisplayObject;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Hit tests a point against the display tree, returning the first interactive object that is hit.\n   *\n   * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n   * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n   * to the last rendered root of the associated renderer.\n   * @return {PIXI.DisplayObject} The hit display object, if any.\n   */\n  InteractionManager.prototype.hitTest = function (globalPoint, root) {\n    // clear the target for our hit test\n    hitTestEvent.target = null;\n    // assign the global point\n    hitTestEvent.data.global = globalPoint;\n    // ensure safety of the root\n    if (!root) {\n      root = this.lastObjectRendered;\n    }\n    // run the hit test\n    this.processInteractive(hitTestEvent, root, null, true);\n    // return our found object - it'll be null if we didn't hit anything\n    return hitTestEvent.target;\n  };\n  /**\n   * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n   * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\n   * another DOM element to receive those events.\n   *\n   * @param {HTMLElement} element - the DOM element which will receive mouse and touch events.\n   * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n   */\n  InteractionManager.prototype.setTargetElement = function (element, resolution) {\n    if (resolution === void 0) {\n      resolution = 1;\n    }\n    this.removeTickerListener();\n    this.removeEvents();\n    this.interactionDOMElement = element;\n    this.resolution = resolution;\n    this.addEvents();\n    this.addTickerListener();\n  };\n  /**\n   * Add the ticker listener\n   *\n   * @private\n   */\n  InteractionManager.prototype.addTickerListener = function () {\n    if (this.tickerAdded || !this.interactionDOMElement || !this._useSystemTicker) {\n      return;\n    }\n    Ticker.system.add(this.tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n    this.tickerAdded = true;\n  };\n  /**\n   * Remove the ticker listener\n   *\n   * @private\n   */\n  InteractionManager.prototype.removeTickerListener = function () {\n    if (!this.tickerAdded) {\n      return;\n    }\n    Ticker.system.remove(this.tickerUpdate, this);\n    this.tickerAdded = false;\n  };\n  /**\n   * Registers all the DOM events\n   *\n   * @private\n   */\n  InteractionManager.prototype.addEvents = function () {\n    if (this.eventsAdded || !this.interactionDOMElement) {\n      return;\n    }\n    var style = this.interactionDOMElement.style;\n    if (window.navigator.msPointerEnabled) {\n      style.msContentZooming = 'none';\n      style.msTouchAction = 'none';\n    } else if (this.supportsPointerEvents) {\n      style.touchAction = 'none';\n    }\n    /**\n     * These events are added first, so that if pointer events are normalized, they are fired\n     * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n     */\n    if (this.supportsPointerEvents) {\n      window.document.addEventListener('pointermove', this.onPointerMove, true);\n      this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n      // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n      // we already handle those, so for the purposes of what we do in onPointerOut, we only\n      // care about the pointerleave event\n      this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n      this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n      window.addEventListener('pointercancel', this.onPointerCancel, true);\n      window.addEventListener('pointerup', this.onPointerUp, true);\n    } else {\n      window.document.addEventListener('mousemove', this.onPointerMove, true);\n      this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n      this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n      this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n      window.addEventListener('mouseup', this.onPointerUp, true);\n    }\n    // always look directly for touch events so that we can provide original data\n    // In a future version we should change this to being just a fallback and rely solely on\n    // PointerEvents whenever available\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n      this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n      this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n      this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n    }\n    this.eventsAdded = true;\n  };\n  /**\n   * Removes all the DOM events that were previously registered\n   *\n   * @private\n   */\n  InteractionManager.prototype.removeEvents = function () {\n    if (!this.eventsAdded || !this.interactionDOMElement) {\n      return;\n    }\n    var style = this.interactionDOMElement.style;\n    if (window.navigator.msPointerEnabled) {\n      style.msContentZooming = '';\n      style.msTouchAction = '';\n    } else if (this.supportsPointerEvents) {\n      style.touchAction = '';\n    }\n    if (this.supportsPointerEvents) {\n      window.document.removeEventListener('pointermove', this.onPointerMove, true);\n      this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n      this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n      window.removeEventListener('pointercancel', this.onPointerCancel, true);\n      window.removeEventListener('pointerup', this.onPointerUp, true);\n    } else {\n      window.document.removeEventListener('mousemove', this.onPointerMove, true);\n      this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n      this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n      window.removeEventListener('mouseup', this.onPointerUp, true);\n    }\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n      this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n      this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n    }\n    this.interactionDOMElement = null;\n    this.eventsAdded = false;\n  };\n  /**\n   * Updates the state of interactive objects if at least {@link interactionFrequency}\n   * milliseconds have passed since the last invocation.\n   *\n   * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n   *\n   * @param {number} deltaTime - time delta since the last call\n   */\n  InteractionManager.prototype.tickerUpdate = function (deltaTime) {\n    this._deltaTime += deltaTime;\n    if (this._deltaTime < this.interactionFrequency) {\n      return;\n    }\n    this._deltaTime = 0;\n    this.update();\n  };\n  /**\n   * Updates the state of interactive objects.\n   */\n  InteractionManager.prototype.update = function () {\n    if (!this.interactionDOMElement) {\n      return;\n    }\n    // if the user move the mouse this check has already been done using the mouse move!\n    if (this._didMove) {\n      this._didMove = false;\n      return;\n    }\n    this.cursor = null;\n    // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n    // but there was a scenario of a display object moving under a static mouse cursor.\n    // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n    for (var k in this.activeInteractionData) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.activeInteractionData.hasOwnProperty(k)) {\n        var interactionData = this.activeInteractionData[k];\n        if (interactionData.originalEvent && interactionData.pointerType !== 'touch') {\n          var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, interactionData.originalEvent, interactionData);\n          this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, true);\n        }\n      }\n    }\n    this.setCursorMode(this.cursor);\n  };\n  /**\n   * Sets the current cursor mode, handling any callbacks or CSS style changes.\n   *\n   * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n   */\n  InteractionManager.prototype.setCursorMode = function (mode) {\n    mode = mode || 'default';\n    // if the mode didn't actually change, bail early\n    if (this.currentCursorMode === mode) {\n      return;\n    }\n    this.currentCursorMode = mode;\n    var style = this.cursorStyles[mode];\n    // only do things if there is a cursor style for it\n    if (style) {\n      switch (typeof style) {\n        case 'string':\n          // string styles are handled as cursor CSS\n          this.interactionDOMElement.style.cursor = style;\n          break;\n        case 'function':\n          // functions are just called, and passed the cursor mode\n          style(mode);\n          break;\n        case 'object':\n          // if it is an object, assume that it is a dictionary of CSS styles,\n          // apply it to the interactionDOMElement\n          Object.assign(this.interactionDOMElement.style, style);\n          break;\n      }\n    } else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {\n      // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n      // for the mode, then assume that the dev wants it to be CSS for the cursor.\n      this.interactionDOMElement.style.cursor = mode;\n    }\n  };\n  /**\n   * Dispatches an event on the display object that was interacted with\n   *\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the display object in question\n   * @param {string} eventString - the name of the event (e.g, mousedown)\n   * @param {PIXI.InteractionEvent} eventData - the event data object\n   * @private\n   */\n  InteractionManager.prototype.dispatchEvent = function (displayObject, eventString, eventData) {\n    // Even if the event was stopped, at least dispatch any remaining events\n    // for the same display object.\n    if (!eventData.stopPropagationHint || displayObject === eventData.stopsPropagatingAt) {\n      eventData.currentTarget = displayObject;\n      eventData.type = eventString;\n      displayObject.emit(eventString, eventData);\n      if (displayObject[eventString]) {\n        displayObject[eventString](eventData);\n      }\n    }\n  };\n  /**\n   * Puts a event on a queue to be dispatched later. This is used to guarantee correct\n   * ordering of over/out events.\n   *\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the display object in question\n   * @param {string} eventString - the name of the event (e.g, mousedown)\n   * @param {object} eventData - the event data object\n   * @private\n   */\n  InteractionManager.prototype.delayDispatchEvent = function (displayObject, eventString, eventData) {\n    this.delayedEvents.push({\n      displayObject: displayObject,\n      eventString: eventString,\n      eventData: eventData\n    });\n  };\n  /**\n   * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n   * resulting value is stored in the point. This takes into account the fact that the DOM\n   * element could be scaled and positioned anywhere on the screen.\n   *\n   * @param  {PIXI.IPointData} point - the point that the result will be stored in\n   * @param  {number} x - the x coord of the position to map\n   * @param  {number} y - the y coord of the position to map\n   */\n  InteractionManager.prototype.mapPositionToPoint = function (point, x, y) {\n    var rect;\n    // IE 11 fix\n    if (!this.interactionDOMElement.parentElement) {\n      rect = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    } else {\n      rect = this.interactionDOMElement.getBoundingClientRect();\n    }\n    var resolutionMultiplier = 1.0 / this.resolution;\n    point.x = (x - rect.left) * (this.interactionDOMElement.width / rect.width) * resolutionMultiplier;\n    point.y = (y - rect.top) * (this.interactionDOMElement.height / rect.height) * resolutionMultiplier;\n  };\n  /**\n   * This function is provides a neat way of crawling through the scene graph and running a\n   * specified function on all interactive objects it finds. It will also take care of hit\n   * testing the interactive objects and passes the hit across in the function.\n   *\n   * @protected\n   * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param {Function} [func] - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param {boolean} [hitTest] - indicates whether we want to calculate hits\n   *  or just iterate through all interactive objects\n   */\n  InteractionManager.prototype.processInteractive = function (interactionEvent, displayObject, func, hitTest) {\n    var hit = this.search.findHit(interactionEvent, displayObject, func, hitTest);\n    var delayedEvents = this.delayedEvents;\n    if (!delayedEvents.length) {\n      return hit;\n    }\n    // Reset the propagation hint, because we start deeper in the tree again.\n    interactionEvent.stopPropagationHint = false;\n    var delayedLen = delayedEvents.length;\n    this.delayedEvents = [];\n    for (var i = 0; i < delayedLen; i++) {\n      var _a = delayedEvents[i],\n        displayObject_1 = _a.displayObject,\n        eventString = _a.eventString,\n        eventData = _a.eventData;\n      // When we reach the object we wanted to stop propagating at,\n      // set the propagation hint.\n      if (eventData.stopsPropagatingAt === displayObject_1) {\n        eventData.stopPropagationHint = true;\n      }\n      this.dispatchEvent(displayObject_1, eventString, eventData);\n    }\n    return hit;\n  };\n  /**\n   * Is called when the pointer button is pressed down on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n   */\n  InteractionManager.prototype.onPointerDown = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n    var events = this.normalizeToPointerData(originalEvent);\n    /**\n     * No need to prevent default on natural pointer events, as there are no side effects\n     * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n     * so still need to be prevented.\n     */\n    // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n    if (this.autoPreventDefault && events[0].isNormalized) {\n      var cancelable = originalEvent.cancelable || !('cancelable' in originalEvent);\n      if (cancelable) {\n        originalEvent.preventDefault();\n      }\n    }\n    var eventLen = events.length;\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerDown, true);\n      this.emit('pointerdown', interactionEvent);\n      if (event.pointerType === 'touch') {\n        this.emit('touchstart', interactionEvent);\n      }\n      // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n      else if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n      }\n    }\n  };\n  /**\n   * Processes the result of the pointer down check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n  InteractionManager.prototype.processPointerDown = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    if (hit) {\n      if (!displayObject.trackedPointers[id]) {\n        displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n      }\n      this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n      } else if (data.pointerType === 'mouse' || data.pointerType === 'pen') {\n        var isRightButton = data.button === 2;\n        if (isRightButton) {\n          displayObject.trackedPointers[id].rightDown = true;\n        } else {\n          displayObject.trackedPointers[id].leftDown = true;\n        }\n        this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n   * @param {boolean} cancelled - true if the pointer is cancelled\n   * @param {Function} func - Function passed to {@link processInteractive}\n   */\n  InteractionManager.prototype.onPointerComplete = function (originalEvent, cancelled, func) {\n    var events = this.normalizeToPointerData(originalEvent);\n    var eventLen = events.length;\n    // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n    // in all cases (unless it was a pointercancel)\n    var eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      // perform hit testing for events targeting our canvas or cancel events\n      this.processInteractive(interactionEvent, this.lastObjectRendered, func, cancelled || !eventAppend);\n      this.emit(cancelled ? 'pointercancel' : \"pointerup\" + eventAppend, interactionEvent);\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? \"rightup\" + eventAppend : \"mouseup\" + eventAppend, interactionEvent);\n      } else if (event.pointerType === 'touch') {\n        this.emit(cancelled ? 'touchcancel' : \"touchend\" + eventAppend, interactionEvent);\n        this.releaseInteractionDataForPointerId(event.pointerId);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is cancelled\n   *\n   * @private\n   * @param {PointerEvent} event - The DOM event of a pointer button being released\n   */\n  InteractionManager.prototype.onPointerCancel = function (event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') {\n      return;\n    }\n    this.onPointerComplete(event, true, this.processPointerCancel);\n  };\n  /**\n   * Processes the result of the pointer cancel check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n   */\n  InteractionManager.prototype.processPointerCancel = function (interactionEvent, displayObject) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    if (displayObject.trackedPointers[id] !== undefined) {\n      delete displayObject.trackedPointers[id];\n      this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} event - The DOM event of a pointer button being released\n   */\n  InteractionManager.prototype.onPointerUp = function (event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') {\n      return;\n    }\n    this.onPointerComplete(event, false, this.processPointerUp);\n  };\n  /**\n   * Processes the result of the pointer up check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n  InteractionManager.prototype.processPointerUp = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var trackingData = displayObject.trackedPointers[id];\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    // need to track mouse down status in the mouse block so that we can emit\n    // event in a later block\n    var isMouseTap = false;\n    // Mouse only\n    if (isMouse) {\n      var isRightButton = data.button === 2;\n      var flags = InteractionTrackingData.FLAGS;\n      var test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n      var isDown = trackingData !== undefined && trackingData.flags & test;\n      if (hit) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n        if (isDown) {\n          this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n          // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n          isMouseTap = true;\n        }\n      } else if (isDown) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n      }\n      // update the down state of the tracking data\n      if (trackingData) {\n        if (isRightButton) {\n          trackingData.rightDown = false;\n        } else {\n          trackingData.leftDown = false;\n        }\n      }\n    }\n    // Pointers and Touches, and Mouse\n    if (hit) {\n      this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n      }\n      if (trackingData) {\n        // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n        if (!isMouse || isMouseTap) {\n          this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n        }\n        if (isTouch) {\n          this.dispatchEvent(displayObject, 'tap', interactionEvent);\n          // touches are no longer over (if they ever were) when we get the touchend\n          // so we should ensure that we don't keep pretending that they are\n          trackingData.over = false;\n        }\n      }\n    } else if (trackingData) {\n      this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n      }\n    }\n    // Only remove the tracking data if there is no over/down state still associated with it\n    if (trackingData && trackingData.none) {\n      delete displayObject.trackedPointers[id];\n    }\n  };\n  /**\n   * Is called when the pointer moves across the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n   */\n  InteractionManager.prototype.onPointerMove = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n    var events = this.normalizeToPointerData(originalEvent);\n    if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen') {\n      this._didMove = true;\n      this.cursor = null;\n    }\n    var eventLen = events.length;\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerMove, true);\n      this.emit('pointermove', interactionEvent);\n      if (event.pointerType === 'touch') {\n        this.emit('touchmove', interactionEvent);\n      }\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        this.emit('mousemove', interactionEvent);\n      }\n    }\n    if (events[0].pointerType === 'mouse') {\n      this.setCursorMode(this.cursor);\n      // TODO BUG for parents interactive object (border order issue)\n    }\n  };\n  /**\n   * Processes the result of the pointer move check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n  InteractionManager.prototype.processPointerMove = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    if (isMouse) {\n      this.processPointerOverOut(interactionEvent, displayObject, hit);\n    }\n    if (!this.moveWhenInside || hit) {\n      this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n      }\n      if (isMouse) {\n        this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer is moved out of the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n   */\n  InteractionManager.prototype.onPointerOut = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n    var events = this.normalizeToPointerData(originalEvent);\n    // Only mouse and pointer can call onPointerOut, so events will always be length 1\n    var event = events[0];\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = false;\n      this.setCursorMode(null);\n    }\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n    this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, false);\n    this.emit('pointerout', interactionEvent);\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseout', interactionEvent);\n    } else {\n      // we can get touchleave events after touchend, so we want to make sure we don't\n      // introduce memory leaks\n      this.releaseInteractionDataForPointerId(interactionData.identifier);\n    }\n  };\n  /**\n   * Processes the result of the pointer over/out check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n  InteractionManager.prototype.processPointerOverOut = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    var trackingData = displayObject.trackedPointers[id];\n    // if we just moused over the display object, then we need to track that state\n    if (hit && !trackingData) {\n      trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n    }\n    if (trackingData === undefined) {\n      return;\n    }\n    if (hit && this.mouseOverRenderer) {\n      if (!trackingData.over) {\n        trackingData.over = true;\n        this.delayDispatchEvent(displayObject, 'pointerover', interactionEvent);\n        if (isMouse) {\n          this.delayDispatchEvent(displayObject, 'mouseover', interactionEvent);\n        }\n      }\n      // only change the cursor if it has not already been changed (by something deeper in the\n      // display tree)\n      if (isMouse && this.cursor === null) {\n        this.cursor = displayObject.cursor;\n      }\n    } else if (trackingData.over) {\n      trackingData.over = false;\n      this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n      if (isMouse) {\n        this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n      }\n      // if there is no mouse down information for the pointer, then it is safe to delete\n      if (trackingData.none) {\n        delete displayObject.trackedPointers[id];\n      }\n    }\n  };\n  /**\n   * Is called when the pointer is moved into the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n   */\n  InteractionManager.prototype.onPointerOver = function (originalEvent) {\n    var events = this.normalizeToPointerData(originalEvent);\n    // Only mouse and pointer can call onPointerOver, so events will always be length 1\n    var event = events[0];\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = true;\n    }\n    this.emit('pointerover', interactionEvent);\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseover', interactionEvent);\n    }\n  };\n  /**\n   * Get InteractionData for a given pointerId. Store that data as well\n   *\n   * @private\n   * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n   * @return {PIXI.InteractionData} - Interaction data for the given pointer identifier\n   */\n  InteractionManager.prototype.getInteractionDataForPointerId = function (event) {\n    var pointerId = event.pointerId;\n    var interactionData;\n    if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse') {\n      interactionData = this.mouse;\n    } else if (this.activeInteractionData[pointerId]) {\n      interactionData = this.activeInteractionData[pointerId];\n    } else {\n      interactionData = this.interactionDataPool.pop() || new InteractionData();\n      interactionData.identifier = pointerId;\n      this.activeInteractionData[pointerId] = interactionData;\n    }\n    // copy properties from the event, so that we can make sure that touch/pointer specific\n    // data is available\n    interactionData.copyEvent(event);\n    return interactionData;\n  };\n  /**\n   * Return unused InteractionData to the pool, for a given pointerId\n   *\n   * @private\n   * @param {number} pointerId - Identifier from a pointer event\n   */\n  InteractionManager.prototype.releaseInteractionDataForPointerId = function (pointerId) {\n    var interactionData = this.activeInteractionData[pointerId];\n    if (interactionData) {\n      delete this.activeInteractionData[pointerId];\n      interactionData.reset();\n      this.interactionDataPool.push(interactionData);\n    }\n  };\n  /**\n   * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n   *\n   * @private\n   * @param {PIXI.InteractionEvent} interactionEvent - The event to be configured\n   * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n   * @param {PIXI.InteractionData} interactionData - The InteractionData that will be paired\n   *        with the InteractionEvent\n   * @return {PIXI.InteractionEvent} the interaction event that was passed in\n   */\n  InteractionManager.prototype.configureInteractionEventForDOMEvent = function (interactionEvent, pointerEvent, interactionData) {\n    interactionEvent.data = interactionData;\n    this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n    // Not really sure why this is happening, but it's how a previous version handled things\n    if (pointerEvent.pointerType === 'touch') {\n      pointerEvent.globalX = interactionData.global.x;\n      pointerEvent.globalY = interactionData.global.y;\n    }\n    interactionData.originalEvent = pointerEvent;\n    interactionEvent.reset();\n    return interactionEvent;\n  };\n  /**\n   * Ensures that the original event object contains all data that a regular pointer event would have\n   *\n   * @private\n   * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n   * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n   *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n   */\n  InteractionManager.prototype.normalizeToPointerData = function (event) {\n    var normalizedEvents = [];\n    if (this.supportsTouchEvents && event instanceof TouchEvent) {\n      for (var i = 0, li = event.changedTouches.length; i < li; i++) {\n        var touch = event.changedTouches[i];\n        if (typeof touch.button === 'undefined') {\n          touch.button = event.touches.length ? 1 : 0;\n        }\n        if (typeof touch.buttons === 'undefined') {\n          touch.buttons = event.touches.length ? 1 : 0;\n        }\n        if (typeof touch.isPrimary === 'undefined') {\n          touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n        }\n        if (typeof touch.width === 'undefined') {\n          touch.width = touch.radiusX || 1;\n        }\n        if (typeof touch.height === 'undefined') {\n          touch.height = touch.radiusY || 1;\n        }\n        if (typeof touch.tiltX === 'undefined') {\n          touch.tiltX = 0;\n        }\n        if (typeof touch.tiltY === 'undefined') {\n          touch.tiltY = 0;\n        }\n        if (typeof touch.pointerType === 'undefined') {\n          touch.pointerType = 'touch';\n        }\n        if (typeof touch.pointerId === 'undefined') {\n          touch.pointerId = touch.identifier || 0;\n        }\n        if (typeof touch.pressure === 'undefined') {\n          touch.pressure = touch.force || 0.5;\n        }\n        if (typeof touch.twist === 'undefined') {\n          touch.twist = 0;\n        }\n        if (typeof touch.tangentialPressure === 'undefined') {\n          touch.tangentialPressure = 0;\n        }\n        // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n        // support, and the fill ins are not quite the same\n        // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n        // left is not 0,0 on the page\n        if (typeof touch.layerX === 'undefined') {\n          touch.layerX = touch.offsetX = touch.clientX;\n        }\n        if (typeof touch.layerY === 'undefined') {\n          touch.layerY = touch.offsetY = touch.clientY;\n        }\n        // mark the touch as normalized, just so that we know we did it\n        touch.isNormalized = true;\n        normalizedEvents.push(touch);\n      }\n    }\n    // apparently PointerEvent subclasses MouseEvent, so yay\n    else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent))) {\n      var tempEvent = event;\n      if (typeof tempEvent.isPrimary === 'undefined') {\n        tempEvent.isPrimary = true;\n      }\n      if (typeof tempEvent.width === 'undefined') {\n        tempEvent.width = 1;\n      }\n      if (typeof tempEvent.height === 'undefined') {\n        tempEvent.height = 1;\n      }\n      if (typeof tempEvent.tiltX === 'undefined') {\n        tempEvent.tiltX = 0;\n      }\n      if (typeof tempEvent.tiltY === 'undefined') {\n        tempEvent.tiltY = 0;\n      }\n      if (typeof tempEvent.pointerType === 'undefined') {\n        tempEvent.pointerType = 'mouse';\n      }\n      if (typeof tempEvent.pointerId === 'undefined') {\n        tempEvent.pointerId = MOUSE_POINTER_ID;\n      }\n      if (typeof tempEvent.pressure === 'undefined') {\n        tempEvent.pressure = 0.5;\n      }\n      if (typeof tempEvent.twist === 'undefined') {\n        tempEvent.twist = 0;\n      }\n      if (typeof tempEvent.tangentialPressure === 'undefined') {\n        tempEvent.tangentialPressure = 0;\n      }\n      // mark the mouse event as normalized, just so that we know we did it\n      tempEvent.isNormalized = true;\n      normalizedEvents.push(tempEvent);\n    } else {\n      normalizedEvents.push(event);\n    }\n    return normalizedEvents;\n  };\n  /**\n   * Destroys the interaction manager\n   *\n   */\n  InteractionManager.prototype.destroy = function () {\n    this.removeEvents();\n    this.removeTickerListener();\n    this.removeAllListeners();\n    this.renderer = null;\n    this.mouse = null;\n    this.eventData = null;\n    this.interactionDOMElement = null;\n    this.onPointerDown = null;\n    this.processPointerDown = null;\n    this.onPointerUp = null;\n    this.processPointerUp = null;\n    this.onPointerCancel = null;\n    this.processPointerCancel = null;\n    this.onPointerMove = null;\n    this.processPointerMove = null;\n    this.onPointerOut = null;\n    this.processPointerOverOut = null;\n    this.onPointerOver = null;\n    this.search = null;\n  };\n  return InteractionManager;\n}(EventEmitter);\nexport { InteractionData, InteractionEvent, InteractionManager, InteractionTrackingData, interactiveTarget };","map":{"version":3,"names":["InteractionData","pressure","rotationAngle","twist","tangentialPressure","global","Point","target","originalEvent","identifier","isPrimary","button","buttons","width","height","tiltX","tiltY","pointerType","Object","defineProperty","prototype","get","getLocalPosition","displayObject","point","globalPos","worldTransform","applyInverse","copyEvent","event","Number","isInteger","which","reset","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","InteractionEvent","stopped","stopsPropagatingAt","stopPropagationHint","currentTarget","type","data","stopPropagation","InteractionTrackingData","pointerId","_pointerId","_flags","FLAGS","NONE","_doSet","flag","yn","set","flags","OVER","RIGHT_DOWN","LEFT_DOWN","freeze","TreeSearch","_tempPoint","recursiveFindHit","interactionEvent","func","hitTest","interactive","visible","hit","interactiveParent","hitTestChildren","hitArea","contains","x","y","_mask","containsPoint","interactiveChildren","children","i","length","child","childHit","parent","findHit","interactiveTarget","buttonMode","cursor","value","trackedPointers","_trackedPointers","undefined","DisplayObject","mixin","MOUSE_POINTER_ID","hitTestEvent","InteractionManager","_super","renderer","options","_this","call","autoPreventDefault","interactionFrequency","mouse","activeInteractionData","interactionDataPool","eventData","interactionDOMElement","moveWhenInside","eventsAdded","tickerAdded","mouseOverRenderer","supportsTouchEvents","window","supportsPointerEvents","PointerEvent","onPointerUp","bind","processPointerUp","onPointerCancel","processPointerCancel","onPointerDown","processPointerDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","cursorStyles","default","pointer","currentCursorMode","resolution","delayedEvents","search","_tempDisplayObject","TemporaryDisplayObject","_useSystemTicker","useSystemTicker","setTargetElement","view","addTickerListener","removeTickerListener","_lastObjectRendered","globalPoint","root","lastObjectRendered","processInteractive","element","removeEvents","addEvents","Ticker","system","add","tickerUpdate","UPDATE_PRIORITY","INTERACTION","remove","style","navigator","msPointerEnabled","msContentZooming","msTouchAction","touchAction","document","addEventListener","removeEventListener","deltaTime","_deltaTime","update","_didMove","k","interactionData","configureInteractionEventForDOMEvent","setCursorMode","mode","assign","dispatchEvent","eventString","emit","delayDispatchEvent","push","mapPositionToPoint","rect","parentElement","getBoundingClientRect","resolutionMultiplier","left","top","delayedLen","_a","displayObject_1","events","normalizeToPointerData","isNormalized","cancelable","preventDefault","eventLen","getInteractionDataForPointerId","isRightButton","id","rightDown","leftDown","onPointerComplete","cancelled","eventAppend","releaseInteractionDataForPointerId","trackingData","isTouch","isMouse","isMouseTap","test","isDown","over","none","pop","pointerEvent","clientX","clientY","globalX","globalY","normalizedEvents","TouchEvent","li","changedTouches","touch","touches","radiusX","radiusY","force","layerX","offsetX","layerY","offsetY","MouseEvent","tempEvent","destroy","removeAllListeners","EventEmitter"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/interaction/src/InteractionData.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/interaction/src/InteractionEvent.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/interaction/src/InteractionTrackingData.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/interaction/src/TreeSearch.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/interaction/src/interactiveTarget.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/interaction/src/InteractionManager.ts"],"sourcesContent":["import { Point, IPointData } from '@pixi/math';\n\nimport type { DisplayObject } from '@pixi/display';\n\nexport type InteractivePointerEvent = PointerEvent | TouchEvent | MouseEvent;\n\n/**\n * Holds all information related to an Interaction event\n *\n * @class\n * @memberof PIXI\n */\nexport class InteractionData\n{\n    public global: Point;\n    public target: DisplayObject;\n    public originalEvent: InteractivePointerEvent;\n    public identifier: number;\n    public isPrimary: boolean;\n    public button: number;\n    public buttons: number;\n    public width: number;\n    public height: number;\n    public tiltX: number;\n    public tiltY: number;\n    public pointerType: string;\n    public pressure = 0;\n    public rotationAngle = 0;\n    public twist = 0;\n    public tangentialPressure = 0;\n\n    constructor()\n    {\n        /**\n         * This point stores the global coords of where the touch/mouse event happened\n         *\n         * @member {PIXI.Point}\n         */\n        this.global = new Point();\n\n        /**\n         * The target Sprite that was interacted with\n         *\n         * @member {PIXI.Sprite}\n         */\n        this.target = null;\n\n        /**\n         * When passed to an event handler, this will be the original DOM Event that was captured\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\n         * @member {MouseEvent|TouchEvent|PointerEvent}\n         */\n        this.originalEvent = null;\n\n        /**\n         * Unique identifier for this interaction\n         *\n         * @member {number}\n         */\n        this.identifier = null;\n\n        /**\n         * Indicates whether or not the pointer device that created the event is the primary pointer.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n         * @type {Boolean}\n         */\n        this.isPrimary = false;\n\n        /**\n         * Indicates which button was pressed on the mouse or pointer device to trigger the event.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n         * @type {number}\n         */\n        this.button = 0;\n\n        /**\n         * Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n         * @type {number}\n         */\n        this.buttons = 0;\n\n        /**\n         * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n         * radiusX of TouchEvents will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n         * @type {number}\n         */\n        this.width = 0;\n\n        /**\n         * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n         * radiusY of TouchEvents will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n         * @type {number}\n         */\n        this.height = 0;\n\n        /**\n         * The angle, in degrees, between the pointer device and the screen.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n         * @type {number}\n         */\n        this.tiltX = 0;\n\n        /**\n         * The angle, in degrees, between the pointer device and the screen.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n         * @type {number}\n         */\n        this.tiltY = 0;\n\n        /**\n         * The type of pointer that triggered the event.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n         * @type {string}\n         */\n        this.pointerType = null;\n\n        /**\n         * Pressure applied by the pointing device during the event. A Touch's force property\n         * will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n         * @type {number}\n         */\n        this.pressure = 0;\n\n        /**\n         * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle\n         * @type {number}\n         */\n        this.rotationAngle = 0;\n\n        /**\n         * Twist of a stylus pointer.\n         * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n         * @type {number}\n         */\n        this.twist = 0;\n\n        /**\n         * Barrel pressure on a stylus pointer.\n         * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n         * @type {number}\n         */\n        this.tangentialPressure = 0;\n    }\n\n    /**\n     * The unique identifier of the pointer. It will be the same as `identifier`.\n     * @readonly\n     * @member {number}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n     */\n    get pointerId(): number\n    {\n        return this.identifier;\n    }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     *\n     * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PIXI.Point} [globalPos] - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @return {PIXI.Point} A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    public getLocalPosition<P extends IPointData = Point>(displayObject: DisplayObject, point?: P, globalPos?: IPointData): P\n    {\n        return displayObject.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }\n\n    /**\n     * Copies properties from normalized event data.\n     *\n     * @param {Touch|MouseEvent|PointerEvent} event - The normalized event data\n     */\n    public copyEvent(event: Touch | InteractivePointerEvent): void\n    {\n        // isPrimary should only change on touchstart/pointerdown, so we don't want to overwrite\n        // it with \"false\" on later events when our shim for it on touch events might not be\n        // accurate\n        if ('isPrimary' in event && event.isPrimary)\n        {\n            this.isPrimary = true;\n        }\n        this.button = 'button' in event && event.button;\n        // event.buttons is not available in all browsers (ie. Safari), but it does have a non-standard\n        // event.which property instead, which conveys the same information.\n        const buttons = 'buttons' in event && event.buttons;\n\n        this.buttons = Number.isInteger(buttons) ? buttons : 'which' in event && event.which;\n        this.width = 'width' in event && event.width;\n        this.height = 'height' in event && event.height;\n        this.tiltX = 'tiltX' in event && event.tiltX;\n        this.tiltY = 'tiltY' in event && event.tiltY;\n        this.pointerType = 'pointerType' in event && event.pointerType;\n        this.pressure = 'pressure' in event && event.pressure;\n        this.rotationAngle = 'rotationAngle' in event && event.rotationAngle;\n        this.twist = ('twist' in event && event.twist) || 0;\n        this.tangentialPressure = ('tangentialPressure' in event && event.tangentialPressure) || 0;\n    }\n\n    /**\n     * Resets the data for pooling.\n     */\n    public reset(): void\n    {\n        // isPrimary is the only property that we really need to reset - everything else is\n        // guaranteed to be overwritten\n        this.isPrimary = false;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import type { DisplayObject } from '@pixi/display';\nimport type { InteractionData } from './InteractionData';\n\nexport type InteractionCallback = (interactionEvent: InteractionEvent, displayObject: DisplayObject, hit?: boolean) => void;\n\n/**\n * Event class that mimics native DOM events.\n *\n * @class\n * @memberof PIXI\n */\nexport class InteractionEvent\n{\n    public stopped: boolean;\n    public stopsPropagatingAt: DisplayObject;\n    public stopPropagationHint: boolean;\n    public target: DisplayObject;\n    public currentTarget: DisplayObject;\n    public type: string;\n    public data: InteractionData;\n\n    constructor()\n    {\n        /**\n         * Whether this event will continue propagating in the tree.\n         *\n         * Remaining events for the {@link stopsPropagatingAt} object\n         * will still be dispatched.\n         *\n         * @member {boolean}\n         */\n        this.stopped = false;\n\n        /**\n         * At which object this event stops propagating.\n         *\n         * @private\n         * @member {PIXI.DisplayObject}\n         */\n        this.stopsPropagatingAt = null;\n\n        /**\n         * Whether we already reached the element we want to\n         * stop propagating at. This is important for delayed events,\n         * where we start over deeper in the tree again.\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.stopPropagationHint = false;\n\n        /**\n         * The object which caused this event to be dispatched.\n         * For listener callback see {@link PIXI.InteractionEvent.currentTarget}.\n         *\n         * @member {PIXI.DisplayObject}\n         */\n        this.target = null;\n\n        /**\n         * The object whose event listener’s callback is currently being invoked.\n         *\n         * @member {PIXI.DisplayObject}\n         */\n        this.currentTarget = null;\n\n        /**\n         * Type of the event\n         *\n         * @member {string}\n         */\n        this.type = null;\n\n        /**\n         * InteractionData related to this event\n         *\n         * @member {PIXI.InteractionData}\n         */\n        this.data = null;\n    }\n\n    /**\n     * Prevents event from reaching any objects other than the current object.\n     *\n     */\n    public stopPropagation(): void\n    {\n        this.stopped = true;\n        this.stopPropagationHint = true;\n        this.stopsPropagatingAt = this.currentTarget;\n    }\n\n    /**\n     * Resets the event.\n     */\n    public reset(): void\n    {\n        this.stopped = false;\n        this.stopsPropagatingAt = null;\n        this.stopPropagationHint = false;\n        this.currentTarget = null;\n        this.target = null;\n    }\n}\n","export interface InteractionTrackingFlags\n{\n    OVER: number;\n    LEFT_DOWN: number;\n    RIGHT_DOWN: number;\n    NONE: number;\n}\n\n/**\n * DisplayObjects with the {@link PIXI.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport class InteractionTrackingData\n{\n    public static FLAGS: Readonly<InteractionTrackingFlags> = Object.freeze({\n        NONE: 0,\n        OVER: 1 << 0,\n        LEFT_DOWN: 1 << 1,\n        RIGHT_DOWN: 1 << 2,\n    });\n\n    private readonly _pointerId: number;\n    private _flags: number;\n\n    /**\n     * @param {number} pointerId - Unique pointer id of the event\n     * @private\n     */\n    constructor(pointerId: number)\n    {\n        this._pointerId = pointerId;\n        this._flags = InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     *\n     * @private\n     * @param {number} flag - The interaction flag to set\n     * @param {boolean} yn - Should the flag be set or unset\n     */\n    private _doSet(flag: number, yn: boolean): void\n    {\n        if (yn)\n        {\n            this._flags = this._flags | flag;\n        }\n        else\n        {\n            this._flags = this._flags & (~flag);\n        }\n    }\n\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @private\n     * @member {number}\n     */\n    get pointerId(): number\n    {\n        return this._pointerId;\n    }\n\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @private\n     * @member {number}\n     */\n    get flags(): number\n    {\n        return this._flags;\n    }\n\n    set flags(flags: number)\n    {\n        this._flags = flags;\n    }\n\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @private\n     * @member {number}\n     */\n    get none(): boolean\n    {\n        return this._flags === InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get over(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.OVER) !== 0;\n    }\n\n    set over(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.OVER, yn);\n    }\n\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get rightDown(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.RIGHT_DOWN) !== 0;\n    }\n\n    set rightDown(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.RIGHT_DOWN, yn);\n    }\n\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get leftDown(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.LEFT_DOWN) !== 0;\n    }\n\n    set leftDown(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.LEFT_DOWN, yn);\n    }\n}\n","import { Point } from '@pixi/math';\n\nimport type { InteractionEvent, InteractionCallback } from './InteractionEvent';\nimport type { Container, DisplayObject } from '@pixi/display';\n\n/**\n * Strategy how to search through stage tree for interactive objects\n *\n * @private\n * @class\n * @memberof PIXI\n */\nexport class TreeSearch\n{\n    private readonly _tempPoint: Point;\n\n    constructor()\n    {\n        this._tempPoint = new Point();\n    }\n\n    /**\n     * Recursive implementation for findHit\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @param {boolean} [interactive] - Whether the displayObject is interactive\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    public recursiveFindHit(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean, interactive?: boolean\n    ): boolean\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        const point = interactionEvent.data.global;\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimized! ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimization once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimization is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // Flag here can set to false if the event is outside the parents hitArea or mask\n        let hitTestChildren = true;\n\n        // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n        // There is also no longer a need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            if (hitTest)\n            {\n                displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n                else\n                {\n                    hit = true;\n                }\n            }\n            interactiveParent = false;\n        }\n        // If there is a mask, no need to hitTest against anything else if the pointer is not within the mask.\n        // We still want to hitTestChildren, however, to ensure a mouseout can still be generated.\n        // https://github.com/pixijs/pixi.js/issues/5135\n        else if (displayObject._mask)\n        {\n            if (hitTest)\n            {\n                if (!((displayObject._mask as any).containsPoint && (displayObject._mask as any).containsPoint(point)))\n                {\n                    hitTest = false;\n                }\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n        if (hitTestChildren && displayObject.interactiveChildren && (displayObject as Container).children)\n        {\n            const children = (displayObject as Container).children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                const childHit = this.recursiveFindHit(interactionEvent, child, func, hitTest, interactiveParent);\n\n                if (childHit)\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    if (childHit)\n                    {\n                        if (interactionEvent.target)\n                        {\n                            hitTest = false;\n                        }\n                        hit = true;\n                    }\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit - but only if it was interactive, otherwise we need to keep\n            // looking for an interactive child, just in case we hit one\n            if (hitTest && !interactionEvent.target)\n            {\n                // already tested against hitArea if it is defined\n                if (!displayObject.hitArea && (displayObject as any).containsPoint)\n                {\n                    if ((displayObject as any).containsPoint(point))\n                    {\n                        hit = true;\n                    }\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !interactionEvent.target)\n                {\n                    interactionEvent.target = displayObject;\n                }\n\n                if (func)\n                {\n                    func(interactionEvent, displayObject, !!hit);\n                }\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    public findHit(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean\n    ): void\n    {\n        this.recursiveFindHit(interactionEvent, displayObject, func, hitTest, false);\n    }\n}\n","import type { InteractionTrackingData } from './InteractionTrackingData';\n\nexport type Cursor = 'auto'\n    | 'default'\n    | 'none'\n    | 'context-menu'\n    | 'help'\n    | 'pointer'\n    | 'progress'\n    | 'wait'\n    | 'cell'\n    | 'crosshair'\n    | 'text'\n    | 'vertical-text'\n    | 'alias'\n    | 'copy'\n    | 'move'\n    | 'no-drop'\n    | 'not-allowed'\n    | 'e-resize'\n    | 'n-resize'\n    | 'ne-resize'\n    | 'nw-resize'\n    | 's-resize'\n    | 'se-resize'\n    | 'sw-resize'\n    | 'w-resize'\n    | 'ns-resize'\n    | 'ew-resize'\n    | 'nesw-resize'\n    | 'col-resize'\n    | 'nwse-resize'\n    | 'row-resize'\n    | 'all-scroll'\n    | 'zoom-in'\n    | 'zoom-out'\n    | 'grab'\n    | 'grabbing';\n\nexport interface IHitArea {\n    contains(x: number, y: number): boolean;\n}\n\nexport interface InteractiveTarget {\n    interactive: boolean;\n    interactiveChildren: boolean;\n    hitArea: IHitArea;\n    cursor: Cursor | string;\n    buttonMode: boolean;\n    trackedPointers: {[x: number]: InteractionTrackingData};\n    _trackedPointers: {[x: number]: InteractionTrackingData};\n}\n\n/**\n * Interface for classes that represent a hit area.\n *\n * It is implemented by the following classes:\n * - {@link PIXI.Circle}\n * - {@link PIXI.Ellipse}\n * - {@link PIXI.Polygon}\n * - {@link PIXI.RoundedRectangle}\n *\n * @interface IHitArea\n * @memberof PIXI\n */\n\n/**\n * Checks whether the x and y coordinates given are contained within this area\n *\n * @method\n * @name contains\n * @memberof PIXI.IHitArea#\n * @param {number} x - The X coordinate of the point to test\n * @param {number} y - The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this area\n */\n\n/**\n * Default property values of interactive objects\n * Used by {@link PIXI.InteractionManager} to automatically give all DisplayObjects these properties\n *\n * @private\n * @name interactiveTarget\n * @type {Object}\n * @memberof PIXI\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          DisplayObject.prototype,\n *          PIXI.interactiveTarget\n *      );\n */\nexport const interactiveTarget: InteractiveTarget = {\n\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n     * events will not be emitted unless `interactive` is set to `true`.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.on('tap', (event) => {\n     *    //handle event\n     * });\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    interactive: false,\n\n    /**\n     * Determines if the children to the displayObject can be clicked/touched\n     * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n     *\n     * @member {boolean}\n     * @memberof PIXI.Container#\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n     * @member {PIXI.IHitArea}\n     * @memberof PIXI.DisplayObject#\n     */\n    hitArea: null,\n\n    /**\n     * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n     * Setting this changes the 'cursor' property to `'pointer'`.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.buttonMode = true;\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    get buttonMode(): boolean\n    {\n        return this.cursor === 'pointer';\n    },\n    set buttonMode(value: boolean)\n    {\n        if (value)\n        {\n            this.cursor = 'pointer';\n        }\n        else if (this.cursor === 'pointer')\n        {\n            this.cursor = null;\n        }\n    },\n\n    /**\n     * This defines what cursor mode is used when the mouse cursor\n     * is hovered over the displayObject.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.cursor = 'wait';\n     * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    cursor: null,\n\n    /**\n     * Internal set of all active pointers, by identifier\n     *\n     * @member {Map<number, InteractionTrackingData>}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     */\n    get trackedPointers()\n    {\n        if (this._trackedPointers === undefined) this._trackedPointers = {};\n\n        return this._trackedPointers;\n    },\n\n    /**\n     * Map of all tracked pointers, by identifier. Use trackedPointers to access.\n     *\n     * @private\n     * @type {Map<number, InteractionTrackingData>}\n     */\n    _trackedPointers: undefined,\n};\n","import { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { DisplayObject, TemporaryDisplayObject } from '@pixi/display';\nimport { InteractionData, InteractivePointerEvent } from './InteractionData';\nimport { InteractionEvent, InteractionCallback } from './InteractionEvent';\nimport { InteractionTrackingData } from './InteractionTrackingData';\nimport { TreeSearch } from './TreeSearch';\nimport { EventEmitter } from '@pixi/utils';\nimport { interactiveTarget } from './interactiveTarget';\n\nimport type { AbstractRenderer } from '@pixi/core';\nimport type { Point, IPointData } from '@pixi/math';\nimport type { Dict } from '@pixi/utils';\n\n// Mix interactiveTarget into DisplayObject.prototype,\n// after deprecation has been handled\nDisplayObject.mixin(interactiveTarget);\n\nconst MOUSE_POINTER_ID = 1;\n\n// Mock interface for hitTestEvent - only used inside hitTest()\ninterface TestInteractionEvent\n{\n    target: DisplayObject;\n    data: {global: Point};\n}\n\n// helpers for hitTest() - only used inside hitTest()\nconst hitTestEvent: TestInteractionEvent = {\n    target: null,\n    data: {\n        global: null,\n    },\n};\n\nexport interface InteractionManagerOptions {\n    autoPreventDefault?: boolean;\n    interactionFrequency?: number;\n    useSystemTicker?: boolean;\n}\n\nexport interface DelayedEvent {\n    displayObject: DisplayObject;\n    eventString: string;\n    eventData: InteractionEvent;\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\n/**\n * The interaction manager deals with mouse, touch and pointer events.\n *\n * Any DisplayObject can be interactive if its `interactive` property is set to true.\n *\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nexport class InteractionManager extends EventEmitter\n{\n    public readonly activeInteractionData: { [key: number]: InteractionData };\n    public readonly supportsTouchEvents: boolean;\n    public readonly supportsPointerEvents: boolean;\n    public interactionDataPool: InteractionData[];\n    public cursor: string;\n    public delayedEvents: DelayedEvent[];\n    public search: TreeSearch;\n    public renderer: AbstractRenderer;\n    public autoPreventDefault: boolean;\n    public interactionFrequency: number;\n    public mouse: InteractionData;\n    public eventData: InteractionEvent;\n    public moveWhenInside: boolean;\n    public cursorStyles: Dict<string | ((mode: string) => void) | CSSStyleDeclaration>;\n    public currentCursorMode: string;\n    public resolution: number;\n\n    protected interactionDOMElement: HTMLElement;\n    protected eventsAdded: boolean;\n    protected tickerAdded: boolean;\n    protected mouseOverRenderer: boolean;\n\n    private _useSystemTicker: boolean;\n    private _deltaTime: number;\n    private _didMove: boolean;\n    private _tempDisplayObject: DisplayObject;\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     * @param {object} [options] - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Maximum requency (ms) at pointer over/out states will be checked.\n     * @param {number} [options.useSystemTicker=true] - Whether to add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     */\n    constructor(renderer: AbstractRenderer, options: InteractionManagerOptions)\n    {\n        super();\n\n        options = options || {};\n\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.AbstractRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n        /**\n         * Maximum requency in milliseconds at which pointer over/out states will be checked by {@link tickerUpdate}.\n         *\n         * @member {number}\n         * @default 10\n         */\n        this.interactionFrequency = options.interactionFrequency || 10;\n\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.InteractionData}\n         */\n        this.mouse = new InteractionData();\n        this.mouse.identifier = MOUSE_POINTER_ID;\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        /**\n         * Actively tracked InteractionData\n         *\n         * @private\n         * @member {Object.<number,PIXI.InteractionData>}\n         */\n        this.activeInteractionData = {};\n        this.activeInteractionData[MOUSE_POINTER_ID] = this.mouse;\n\n        /**\n         * Pool of unused InteractionData\n         *\n         * @private\n         * @member {PIXI.InteractionData[]}\n         */\n        this.interactionDataPool = [];\n\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object}\n         */\n        this.eventData = new InteractionEvent();\n\n        /**\n         * The DOM element to bind to.\n         *\n         * @protected\n         * @member {HTMLElement}\n         */\n        this.interactionDOMElement = null;\n\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursor\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM version works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.moveWhenInside = false;\n\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @protected\n         * @member {boolean}\n         */\n        this.eventsAdded = false;\n\n        /**\n         * Has the system ticker been added?\n         *\n         * @protected\n         * @member {boolean}\n         */\n        this.tickerAdded = false;\n\n        /**\n         * Is the mouse hovering over the renderer?\n         *\n         * @protected\n         * @member {boolean}\n         */\n        this.mouseOverRenderer = false;\n\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsTouchEvents = 'ontouchstart' in window;\n\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsPointerEvents = !!window.PointerEvent;\n\n        // this will make it so that you don't have to call bind all the time\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerCancel = this.onPointerCancel.bind(this);\n        this.processPointerCancel = this.processPointerCancel.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        /**\n         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n         * and functions are called instead of changing the CSS.\n         * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n         * @member {Object.<string, Object>}\n         */\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        /**\n         * The mode of the cursor that is being used.\n         * The value of this is a key from the cursorStyles dictionary.\n         *\n         * @member {string}\n         */\n        this.currentCursorMode = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {string}\n         */\n        this.cursor = null;\n\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        /**\n         * Delayed pointer events. Used to guarantee correct ordering of over/out events.\n         *\n         * @private\n         * @member {Array}\n         */\n        this.delayedEvents = [];\n\n        /**\n         * TreeSearch component that is used to hitTest stage tree\n         *\n         * @private\n         * @member {PIXI.TreeSearch}\n         */\n        this.search = new TreeSearch();\n\n        /**\n         * Used as a last rendered object in case renderer doesnt have _lastObjectRendered\n         * @member {DisplayObject}\n         * @private\n         */\n        this._tempDisplayObject = new TemporaryDisplayObject();\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n         * object.\n         *\n         * @event PIXI.InteractionManager#mousedown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event PIXI.InteractionManager#rightdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object.\n         *\n         * @event PIXI.InteractionManager#mouseup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event PIXI.InteractionManager#rightup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object.\n         *\n         * @event PIXI.InteractionManager#click\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event PIXI.InteractionManager#rightclick\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.InteractionManager#event:mousedown}.\n         *\n         * @event PIXI.InteractionManager#mouseupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.InteractionManager#event:rightdown}.\n         *\n         * @event PIXI.InteractionManager#rightupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event PIXI.InteractionManager#mousemove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event PIXI.InteractionManager#mouseover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event PIXI.InteractionManager#mouseout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event PIXI.InteractionManager#pointerdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * Not always fired when some buttons are held down while others are released. In those cases,\n         * use [mousedown]{@link PIXI.InteractionManager#event:mousedown} and\n         * [mouseup]{@link PIXI.InteractionManager#event:mouseup} instead.\n         *\n         * @event PIXI.InteractionManager#pointerup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event\n         *\n         * @event PIXI.InteractionManager#pointercancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event PIXI.InteractionManager#pointertap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.InteractionManager#event:pointerdown}.\n         *\n         * @event PIXI.InteractionManager#pointerupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event PIXI.InteractionManager#pointermove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event PIXI.InteractionManager#pointerover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event PIXI.InteractionManager#pointerout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event PIXI.InteractionManager#touchstart\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event PIXI.InteractionManager#touchend\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch\n         *\n         * @event PIXI.InteractionManager#touchcancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event PIXI.InteractionManager#tap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.InteractionManager#event:touchstart}.\n         *\n         * @event PIXI.InteractionManager#touchendoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event PIXI.InteractionManager#touchmove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousedown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#click\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightclick\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousemove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointercancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointertap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointermove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchstart\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchend\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchcancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#tap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchendoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchmove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        this._useSystemTicker = options.useSystemTicker !== undefined ? options.useSystemTicker : true;\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n    }\n\n    /**\n     * Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    get useSystemTicker(): boolean\n    {\n        return this._useSystemTicker;\n    }\n    set useSystemTicker(useSystemTicker: boolean)\n    {\n        this._useSystemTicker = useSystemTicker;\n\n        if (useSystemTicker)\n        {\n            this.addTickerListener();\n        }\n        else\n        {\n            this.removeTickerListener();\n        }\n    }\n\n    /**\n     * Last rendered object or temp object\n     * @readonly\n     * @protected\n     * @member {PIXI.DisplayObject}\n     */\n    get lastObjectRendered(): DisplayObject\n    {\n        return this.renderer._lastObjectRendered || this._tempDisplayObject;\n    }\n\n    /**\n     * Hit tests a point against the display tree, returning the first interactive object that is hit.\n     *\n     * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n     * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n     * to the last rendered root of the associated renderer.\n     * @return {PIXI.DisplayObject} The hit display object, if any.\n     */\n    public hitTest(globalPoint: Point, root?: DisplayObject): DisplayObject\n    {\n        // clear the target for our hit test\n        hitTestEvent.target = null;\n        // assign the global point\n        hitTestEvent.data.global = globalPoint;\n        // ensure safety of the root\n        if (!root)\n        {\n            root = this.lastObjectRendered;\n        }\n        // run the hit test\n        this.processInteractive(hitTestEvent as InteractionEvent, root, null, true);\n        // return our found object - it'll be null if we didn't hit anything\n\n        return hitTestEvent.target;\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\n     * another DOM element to receive those events.\n     *\n     * @param {HTMLElement} element - the DOM element which will receive mouse and touch events.\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n     */\n    public setTargetElement(element: HTMLElement, resolution = 1): void\n    {\n        this.removeTickerListener();\n\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n\n        this.addTickerListener();\n    }\n\n    /**\n     * Add the ticker listener\n     *\n     * @private\n     */\n    private addTickerListener(): void\n    {\n        if (this.tickerAdded || !this.interactionDOMElement || !this._useSystemTicker)\n        {\n            return;\n        }\n\n        Ticker.system.add(this.tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n\n        this.tickerAdded = true;\n    }\n\n    /**\n     * Remove the ticker listener\n     *\n     * @private\n     */\n    private removeTickerListener(): void\n    {\n        if (!this.tickerAdded)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this.tickerUpdate, this);\n\n        this.tickerAdded = false;\n    }\n\n    /**\n     * Registers all the DOM events\n     *\n     * @private\n     */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.interactionDOMElement)\n        {\n            return;\n        }\n\n        const style = this.interactionDOMElement.style as CrossCSSStyleDeclaration;\n\n        if (window.navigator.msPointerEnabled)\n        {\n            style.msContentZooming = 'none';\n            style.msTouchAction = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = 'none';\n        }\n\n        /**\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            window.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n            window.addEventListener('pointercancel', this.onPointerCancel, true);\n            window.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n            window.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /**\n     * Removes all the DOM events that were previously registered\n     *\n     * @private\n     */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.interactionDOMElement)\n        {\n            return;\n        }\n\n        const style = this.interactionDOMElement.style as CrossCSSStyleDeclaration;\n\n        if (window.navigator.msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            window.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n            window.removeEventListener('pointercancel', this.onPointerCancel, true);\n            window.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n            window.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects if at least {@link interactionFrequency}\n     * milliseconds have passed since the last invocation.\n     *\n     * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n     *\n     * @param {number} deltaTime - time delta since the last call\n     */\n    public tickerUpdate(deltaTime: number): void\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        this.update();\n    }\n\n    /**\n     * Updates the state of interactive objects.\n     */\n    public update(): void\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this._didMove)\n        {\n            this._didMove = false;\n\n            return;\n        }\n\n        this.cursor = null;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        for (const k in this.activeInteractionData)\n        {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.activeInteractionData.hasOwnProperty(k))\n            {\n                const interactionData = this.activeInteractionData[k];\n\n                if (interactionData.originalEvent && interactionData.pointerType !== 'touch')\n                {\n                    const interactionEvent = this.configureInteractionEventForDOMEvent(\n                        this.eventData,\n                        interactionData.originalEvent as PointerEvent,\n                        interactionData\n                    );\n\n                    this.processInteractive(\n                        interactionEvent,\n                        this.lastObjectRendered,\n                        this.processPointerOverOut,\n                        true\n                    );\n                }\n            }\n        }\n\n        this.setCursorMode(this.cursor);\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     *\n     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursorMode(mode: string): void\n    {\n        mode = mode || 'default';\n        // if the mode didn't actually change, bail early\n        if (this.currentCursorMode === mode)\n        {\n            return;\n        }\n        this.currentCursorMode = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    this.interactionDOMElement.style.cursor = style;\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    Object.assign(this.interactionDOMElement.style, style);\n                    break;\n            }\n        }\n        else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.interactionDOMElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {PIXI.InteractionEvent} eventData - the event data object\n     * @private\n     */\n    private dispatchEvent(displayObject: DisplayObject, eventString: string, eventData: InteractionEvent): void\n    {\n        // Even if the event was stopped, at least dispatch any remaining events\n        // for the same display object.\n        if (!eventData.stopPropagationHint || displayObject === eventData.stopsPropagatingAt)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if ((displayObject as any)[eventString])\n            {\n                (displayObject as any)[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Puts a event on a queue to be dispatched later. This is used to guarantee correct\n     * ordering of over/out events.\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    private delayDispatchEvent(displayObject: DisplayObject, eventString: string, eventData: InteractionEvent): void\n    {\n        this.delayedEvents.push({ displayObject, eventString, eventData });\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param  {PIXI.IPointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = { x: 0, y: 0, width: 0, height: 0 };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.interactionDOMElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.interactionDOMElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @protected\n     * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - indicates whether we want to calculate hits\n     *  or just iterate through all interactive objects\n     */\n    public processInteractive(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean\n    ): void\n    {\n        const hit = this.search.findHit(interactionEvent, displayObject, func, hitTest);\n\n        const delayedEvents = this.delayedEvents;\n\n        if (!delayedEvents.length)\n        {\n            return hit;\n        }\n        // Reset the propagation hint, because we start deeper in the tree again.\n        interactionEvent.stopPropagationHint = false;\n\n        const delayedLen = delayedEvents.length;\n\n        this.delayedEvents = [];\n\n        for (let i = 0; i < delayedLen; i++)\n        {\n            const { displayObject, eventString, eventData } = delayedEvents[i];\n\n            // When we reach the object we wanted to stop propagating at,\n            // set the propagation hint.\n            if (eventData.stopsPropagatingAt === displayObject)\n            {\n                eventData.stopPropagationHint = true;\n            }\n\n            this.dispatchEvent(displayObject, eventString, eventData);\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n     */\n    private onPointerDown(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        /**\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = originalEvent.cancelable || !('cancelable' in originalEvent);\n\n            if (cancelable)\n            {\n                originalEvent.preventDefault();\n            }\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerDown, true);\n\n            this.emit('pointerdown', interactionEvent);\n            if (event.pointerType === 'touch')\n            {\n                this.emit('touchstart', interactionEvent);\n            }\n            // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n            else if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n            }\n        }\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    private processPointerDown(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n        const id = interactionEvent.data.identifier;\n\n        if (hit)\n        {\n            if (!displayObject.trackedPointers[id])\n            {\n                displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n            }\n            this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n            }\n            else if (data.pointerType === 'mouse' || data.pointerType === 'pen')\n            {\n                const isRightButton = data.button === 2;\n\n                if (isRightButton)\n                {\n                    displayObject.trackedPointers[id].rightDown = true;\n                }\n                else\n                {\n                    displayObject.trackedPointers[id].leftDown = true;\n                }\n\n                this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n     * @param {boolean} cancelled - true if the pointer is cancelled\n     * @param {Function} func - Function passed to {@link processInteractive}\n     */\n    private onPointerComplete(originalEvent: InteractivePointerEvent, cancelled: boolean, func: InteractionCallback): void\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        const eventLen = events.length;\n\n        // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n        // in all cases (unless it was a pointercancel)\n        const eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            // perform hit testing for events targeting our canvas or cancel events\n            this.processInteractive(interactionEvent, this.lastObjectRendered, func, cancelled || !eventAppend);\n\n            this.emit(cancelled ? 'pointercancel' : `pointerup${eventAppend}`, interactionEvent);\n\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? `rightup${eventAppend}` : `mouseup${eventAppend}`, interactionEvent);\n            }\n            else if (event.pointerType === 'touch')\n            {\n                this.emit(cancelled ? 'touchcancel' : `touchend${eventAppend}`, interactionEvent);\n                this.releaseInteractionDataForPointerId(event.pointerId);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is cancelled\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    private onPointerCancel(event: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (event as PointerEvent).pointerType === 'touch') return;\n\n        this.onPointerComplete(event, true, this.processPointerCancel);\n    }\n\n    /**\n     * Processes the result of the pointer cancel check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     */\n    private processPointerCancel(interactionEvent: InteractionEvent, displayObject: DisplayObject): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        if (displayObject.trackedPointers[id] !== undefined)\n        {\n            delete displayObject.trackedPointers[id];\n            this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    private onPointerUp(event: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (event as PointerEvent).pointerType === 'touch') return;\n\n        this.onPointerComplete(event, false, this.processPointerUp);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    private processPointerUp(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const trackingData = displayObject.trackedPointers[id];\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n        // need to track mouse down status in the mouse block so that we can emit\n        // event in a later block\n        let isMouseTap = false;\n\n        // Mouse only\n        if (isMouse)\n        {\n            const isRightButton = data.button === 2;\n\n            const flags = InteractionTrackingData.FLAGS;\n\n            const test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n\n            const isDown = trackingData !== undefined && (trackingData.flags & test);\n\n            if (hit)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n                if (isDown)\n                {\n                    this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n                    // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n                    isMouseTap = true;\n                }\n            }\n            else if (isDown)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n            }\n            // update the down state of the tracking data\n            if (trackingData)\n            {\n                if (isRightButton)\n                {\n                    trackingData.rightDown = false;\n                }\n                else\n                {\n                    trackingData.leftDown = false;\n                }\n            }\n        }\n\n        // Pointers and Touches, and Mouse\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n            if (trackingData)\n            {\n                // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n                if (!isMouse || isMouseTap)\n                {\n                    this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n                }\n                if (isTouch)\n                {\n                    this.dispatchEvent(displayObject, 'tap', interactionEvent);\n                    // touches are no longer over (if they ever were) when we get the touchend\n                    // so we should ensure that we don't keep pretending that they are\n                    trackingData.over = false;\n                }\n            }\n        }\n        else if (trackingData)\n        {\n            this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n        }\n        // Only remove the tracking data if there is no over/down state still associated with it\n        if (trackingData && trackingData.none)\n        {\n            delete displayObject.trackedPointers[id];\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n     */\n    private onPointerMove(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen')\n        {\n            this._didMove = true;\n\n            this.cursor = null;\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerMove, true);\n\n            this.emit('pointermove', interactionEvent);\n            if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n        }\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.setCursorMode(this.cursor);\n\n            // TODO BUG for parents interactive object (border order issue)\n        }\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    private processPointerMove(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        if (isMouse)\n        {\n            this.processPointerOverOut(interactionEvent, displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n            if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n     */\n    private onPointerOut(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOut, so events will always be length 1\n        const event = events[0];\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = false;\n            this.setCursorMode(null);\n        }\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseout', interactionEvent);\n        }\n        else\n        {\n            // we can get touchleave events after touchend, so we want to make sure we don't\n            // introduce memory leaks\n            this.releaseInteractionDataForPointerId(interactionData.identifier);\n        }\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    private processPointerOverOut(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        let trackingData = displayObject.trackedPointers[id];\n\n        // if we just moused over the display object, then we need to track that state\n        if (hit && !trackingData)\n        {\n            trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n        }\n\n        if (trackingData === undefined) return;\n\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!trackingData.over)\n            {\n                trackingData.over = true;\n                this.delayDispatchEvent(displayObject, 'pointerover', interactionEvent);\n                if (isMouse)\n                {\n                    this.delayDispatchEvent(displayObject, 'mouseover', interactionEvent);\n                }\n            }\n\n            // only change the cursor if it has not already been changed (by something deeper in the\n            // display tree)\n            if (isMouse && this.cursor === null)\n            {\n                this.cursor = displayObject.cursor;\n            }\n        }\n        else if (trackingData.over)\n        {\n            trackingData.over = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n            if (isMouse)\n            {\n                this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n            }\n            // if there is no mouse down information for the pointer, then it is safe to delete\n            if (trackingData.none)\n            {\n                delete displayObject.trackedPointers[id];\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n     */\n    private onPointerOver(originalEvent: InteractivePointerEvent): void\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOver, so events will always be length 1\n        const event = events[0];\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = true;\n        }\n\n        this.emit('pointerover', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseover', interactionEvent);\n        }\n    }\n\n    /**\n     * Get InteractionData for a given pointerId. Store that data as well\n     *\n     * @private\n     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n     * @return {PIXI.InteractionData} - Interaction data for the given pointer identifier\n     */\n    private getInteractionDataForPointerId(event: PointerEvent): InteractionData\n    {\n        const pointerId = event.pointerId;\n\n        let interactionData;\n\n        if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse')\n        {\n            interactionData = this.mouse;\n        }\n        else if (this.activeInteractionData[pointerId])\n        {\n            interactionData = this.activeInteractionData[pointerId];\n        }\n        else\n        {\n            interactionData = this.interactionDataPool.pop() || new InteractionData();\n            interactionData.identifier = pointerId;\n            this.activeInteractionData[pointerId] = interactionData;\n        }\n        // copy properties from the event, so that we can make sure that touch/pointer specific\n        // data is available\n        interactionData.copyEvent(event);\n\n        return interactionData;\n    }\n\n    /**\n     * Return unused InteractionData to the pool, for a given pointerId\n     *\n     * @private\n     * @param {number} pointerId - Identifier from a pointer event\n     */\n    private releaseInteractionDataForPointerId(pointerId: number): void\n    {\n        const interactionData = this.activeInteractionData[pointerId];\n\n        if (interactionData)\n        {\n            delete this.activeInteractionData[pointerId];\n            interactionData.reset();\n            this.interactionDataPool.push(interactionData);\n        }\n    }\n\n    /**\n     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The event to be configured\n     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n     * @param {PIXI.InteractionData} interactionData - The InteractionData that will be paired\n     *        with the InteractionEvent\n     * @return {PIXI.InteractionEvent} the interaction event that was passed in\n     */\n    private configureInteractionEventForDOMEvent(interactionEvent: InteractionEvent, pointerEvent: PointerEvent,\n        interactionData: InteractionData\n    ): InteractionEvent\n    {\n        interactionEvent.data = interactionData;\n\n        this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n        // Not really sure why this is happening, but it's how a previous version handled things\n        if (pointerEvent.pointerType === 'touch')\n        {\n            (pointerEvent as any).globalX = interactionData.global.x;\n            (pointerEvent as any).globalY = interactionData.global.y;\n        }\n\n        interactionData.originalEvent = pointerEvent;\n        interactionEvent.reset();\n\n        return interactionEvent;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @private\n     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: InteractivePointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent)))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Destroys the interaction manager\n     *\n     */\n    public destroy(): void\n    {\n        this.removeEvents();\n\n        this.removeTickerListener();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactionDOMElement = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerCancel = null;\n        this.processPointerCancel = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this.search = null;\n    }\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n}\n\ninterface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}