{"ast":null,"code":"/*!\n * @pixi/mixin-cache-as-bitmap - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/mixin-cache-as-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture, BaseTexture, Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { DisplayObject } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nvar _tempMatrix = new Matrix();\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nvar CacheData = /** @class */function () {\n  function CacheData() {\n    this.textureCacheId = null;\n    this.originalRender = null;\n    this.originalRenderCanvas = null;\n    this.originalCalculateBounds = null;\n    this.originalGetLocalBounds = null;\n    this.originalUpdateTransform = null;\n    this.originalDestroy = null;\n    this.originalMask = null;\n    this.originalFilterArea = null;\n    this.originalContainsPoint = null;\n    this.sprite = null;\n  }\n  return CacheData;\n}();\nObject.defineProperties(DisplayObject.prototype, {\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snap shot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to `false`\n   *\n   * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get: function () {\n      return this._cacheAsBitmap;\n    },\n    set: function (value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n      this._cacheAsBitmap = value;\n      var data;\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @function _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObject(renderer);\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._render(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n  // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n  renderer.batch.flush();\n  // this.filters= [];\n  // next we find the dimensions of the untransformed object\n  // this function also calls updatetransform on all its children as part of the measuring.\n  // This means we don't need to update the transform again in this function\n  // TODO pass an object to clone too? saves having to create a new one each time!\n  var bounds = this.getLocalBounds(null, true).clone();\n  // add some padding!\n  if (this.filters) {\n    var padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n  bounds.ceil(settings.RESOLUTION);\n  // for now we cache the current renderTarget that the WebGL renderer is currently using.\n  // this could be more elegant..\n  var cachedRenderTexture = renderer.renderTexture.current;\n  var cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n  var cachedProjectionTransform = renderer.projection.transform;\n  // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n  // const stack = renderer.filterManager.filterStack;\n  // this renderTexture will be used to store the cached DisplayObject\n  var renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height\n  });\n  var textureCacheId = \"cacheAsBitmap_\" + uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId);\n  // need to set //\n  var m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n  // set all properties to there original so we can render to a texture\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, renderTexture, true, m, false);\n  // now restore the state be setting the new properties\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame);\n  // renderer.filterManager.filterStack = stack;\n  this.render = this._renderCached;\n  // the rest is the same as for Canvas\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  // create our cached sprite\n  var cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.enableTempParent();\n    this.updateTransform();\n    this.disableTempParent(null);\n  } else {\n    this.updateTransform();\n  }\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @function _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObjectCanvas(renderer);\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderCanvas(renderer);\n};\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n  // get bounds actually transforms the object for us already!\n  var bounds = this.getLocalBounds(null, true);\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.context;\n  var cachedProjectionTransform = renderer._projTransform;\n  bounds.ceil(settings.RESOLUTION);\n  var renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height\n  });\n  var textureCacheId = \"cacheAsBitmap_\" + uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId);\n  // need to set //\n  var m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y;\n  // m.append(this.transform.worldTransform.)\n  // set all properties to there original so we can render to a texture\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n  renderer.render(this, renderTexture, true, m, false);\n  // now restore the state be setting the new properties\n  renderer.context = cachedRenderTarget;\n  renderer._projTransform = cachedProjectionTransform;\n  this.renderCanvas = this._renderCachedCanvas;\n  // the rest is the same as for WebGL\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  // create our cached sprite\n  var cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite._calculateBounds();\n  this._bounds.updateID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n  this._cacheData.sprite = null;\n  BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};\nexport { CacheData };","map":{"version":3,"names":["_tempMatrix","Matrix","DisplayObject","prototype","_cacheAsBitmap","_cacheData","CacheData","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalDestroy","originalMask","originalFilterArea","originalContainsPoint","sprite","Object","defineProperties","cacheAsBitmap","get","set","value","data","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","cacheAlpha","alpha","batch","flush","bounds","clone","filters","padding","pad","ceil","settings","RESOLUTION","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedProjectionTransform","projection","RenderTexture","create","width","height","uid","BaseTexture","addToCache","baseTexture","Texture","m","localTransform","copyTo","invert","translate","x","y","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","_initCachedDisplayObjectCanvas","_renderCanvas","cachedRenderTarget","context","_projTransform","tx","ty","_tempDisplayObjectParent","clear","_calculateBounds","updateID","_boundsID","_texture","removeFromCache","options"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mixin-cache-as-bitmap/src/index.ts"],"sourcesContent":["import { Texture, BaseTexture, RenderTexture, Renderer, MaskData } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Container, DisplayObject, IDestroyOptions } from '@pixi/display';\nimport { IPointData, Matrix, Rectangle } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport { CanvasRenderer } from '@pixi/canvas-renderer';\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: CanvasRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions|boolean) => void;\n    public originalMask: Container|MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @function _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, renderTexture, true, m, false);\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @function _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: CanvasRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, renderTexture, true, m, false);\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options: IDestroyOptions|boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}