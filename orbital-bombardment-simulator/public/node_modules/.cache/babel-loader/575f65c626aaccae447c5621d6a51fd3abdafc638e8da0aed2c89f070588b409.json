{"ast":null,"code":"import { SHIPS, PLANETS, UPGRADES, PRESTIGE_UPGRADES, PRESTIGE_GOLD_PER_PLANET } from './simulationModels';\nclass Ship {\n  constructor(type, x, y, simulation) {\n    this.type = SHIPS[type.toUpperCase()];\n    this.x = x;\n    this.y = y;\n    this.angle = 0;\n    this.lastFiredTime = 0;\n    this.simulation = simulation;\n    this.orbitRadiusX = 250; // Reduced from 300 to 250\n    this.orbitRadiusY = 150; // Kept the same as before\n  }\n  update(deltaTime, fireRate) {\n    this.angle += deltaTime * 0.5;\n    this.x = this.simulation.width / 2 + Math.cos(this.angle) * this.orbitRadiusX;\n    this.y = this.simulation.height / 2 + Math.sin(this.angle) * this.orbitRadiusY;\n    const currentTime = Date.now();\n    const cooldownReduction = UPGRADES[this.type.id.toUpperCase()].cooldown.levels[this.simulation.getUpgradeLevel(this.type.id, 'cooldown')] / 100;\n    const adjustedFireRate = fireRate * (1 + cooldownReduction);\n    if (currentTime - this.lastFiredTime > 1000 / adjustedFireRate / this.type.fireRateMultiplier) {\n      this.simulation.fireBullet(this);\n      this.lastFiredTime = currentTime;\n    }\n  }\n  getDamage() {\n    const baseDamage = this.type.damagePerShot;\n    const damageIncrease = UPGRADES[this.type.id.toUpperCase()].damage.levels[this.simulation.getUpgradeLevel(this.type.id, 'damage')];\n    const prestigeDamageMultiplier = PRESTIGE_UPGRADES.DAMAGE_MULTIPLIER.levels[this.simulation.getPrestigeUpgradeLevel('DAMAGE_MULTIPLIER')];\n    return (baseDamage + damageIncrease - 1) * prestigeDamageMultiplier;\n  }\n}\nclass Bullet {\n  constructor(ship) {\n    this.x = ship.x;\n    this.y = ship.y;\n    this.damage = ship.getDamage();\n    this.speed = 5;\n    this.shipType = ship.type.id; // Add this line to store the ship type\n  }\n  update(deltaTime, simulation) {\n    const dx = simulation.width / 2 - this.x;\n    const dy = simulation.height / 2 - this.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    if (distance < 10) {\n      simulation.hitPlanet(this.damage);\n      return false;\n    }\n    this.x += dx / distance * this.speed;\n    this.y += dy / distance * this.speed;\n    return true;\n  }\n}\nclass Planet {\n  constructor(planetData, x, y) {\n    this.id = planetData.id;\n    this.name = planetData.name;\n    this.health = planetData.health;\n    this.maxHealth = planetData.health;\n    this.x = x;\n    this.y = y;\n  }\n}\nexport class Simulation {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ships = [];\n    this.bullets = [];\n    this.isRendering = true;\n    this.fireRate = 1;\n    this.money = 1000;\n    this.planetsDestroyed = 0;\n    this.currentPlanetIndex = 0;\n    this.planets = Object.values(PLANETS).map(planet => new Planet(planet, width / 2, height / 2));\n    this.upgrades = {\n      small: {\n        cooldown: 0,\n        damage: 0\n      },\n      medium: {\n        cooldown: 0,\n        damage: 0\n      },\n      large: {\n        cooldown: 0,\n        damage: 0\n      }\n    };\n    this.prestigeLevel = 0;\n    this.gold = 0;\n    this.prestigeUpgrades = {\n      MONEY_MULTIPLIER: 0,\n      DAMAGE_MULTIPLIER: 0\n    };\n    this.explosionTimer = 0;\n    this.explosionDuration = 1500; // Duration of explosion animation in milliseconds\n    this.isExploding = false;\n  }\n  addShip(type, x, y) {\n    const ship = new Ship(type, x, y, this);\n    this.ships.push(ship);\n    return ship;\n  }\n  buyShip(type) {\n    const shipType = SHIPS[type.toUpperCase()];\n    const currentCost = this.getShipCost(type);\n    if (this.money >= currentCost) {\n      const angle = Math.random() * Math.PI * 2;\n      const x = this.width / 2 + Math.cos(angle) * 250; // Updated from 300 to 250\n      const y = this.height / 2 + Math.sin(angle) * 150; // Kept the same as before\n      const ship = this.addShip(type, x, y);\n      this.money -= currentCost;\n      return ship;\n    }\n    return null;\n  }\n  removeShip(ship) {\n    const index = this.ships.indexOf(ship);\n    if (index !== -1) {\n      this.ships.splice(index, 1);\n    }\n  }\n  fireBullet(ship) {\n    const bullet = new Bullet(ship);\n    this.bullets.push(bullet);\n  }\n  hitPlanet(damage) {\n    const currentPlanet = this.planets[this.currentPlanetIndex];\n    currentPlanet.health -= damage;\n    this.addMoney(damage);\n    if (currentPlanet.health <= 0 && !this.isExploding) {\n      this.isExploding = true;\n      this.explosionTimer = this.explosionDuration;\n    }\n  }\n  update(deltaTime) {\n    if (this.isExploding) {\n      this.explosionTimer -= deltaTime * 1000;\n      if (this.explosionTimer <= 0) {\n        this.isExploding = false;\n        this.explosionTimer = 0;\n        this.moveToNextPlanet();\n      }\n    } else {\n      this.ships.forEach(ship => ship.update(deltaTime, this.fireRate));\n      this.bullets = this.bullets.filter(bullet => bullet.update(deltaTime, this));\n    }\n  }\n  addMoney(amount) {\n    const moneyMultiplier = PRESTIGE_UPGRADES.MONEY_MULTIPLIER.levels[this.getPrestigeUpgradeLevel('MONEY_MULTIPLIER')];\n    this.money += amount * moneyMultiplier;\n  }\n  setFireRate(rate) {\n    this.fireRate = rate;\n  }\n  toggleRendering() {\n    this.isRendering = !this.isRendering;\n  }\n  getShipCount(type) {\n    return this.ships.filter(s => s.type.id === type).length;\n  }\n  getTotalShipCount() {\n    return this.ships.length;\n  }\n  getFireRate() {\n    return this.fireRate;\n  }\n  getIsRendering() {\n    return this.isRendering;\n  }\n  getMoney() {\n    return Math.floor(this.money);\n  }\n  getPlanetHealth() {\n    const currentPlanet = this.planets[this.currentPlanetIndex];\n    return Math.max(0, Math.floor(currentPlanet.health));\n  }\n  getPlanetsDestroyed() {\n    return this.planetsDestroyed;\n  }\n  getShipCountByType(type) {\n    return this.ships.filter(ship => ship.type.id === type).length;\n  }\n  getShipCost(type) {\n    const shipType = SHIPS[type.toUpperCase()];\n    const currentCount = this.getShipCountByType(type);\n    return Math.floor(shipType.baseCost * Math.pow(shipType.costIncreaseFactor, currentCount));\n  }\n  getCurrentPlanetIndex() {\n    return this.currentPlanetIndex;\n  }\n  getCurrentPlanet() {\n    return this.planets[this.currentPlanetIndex];\n  }\n  getUpgradeLevel(shipType, upgradeType) {\n    return this.upgrades[shipType][upgradeType];\n  }\n  getUpgradeCost(shipType, upgradeType) {\n    const currentLevel = this.getUpgradeLevel(shipType, upgradeType);\n    if (currentLevel >= 10) return Infinity;\n    return UPGRADES[shipType.toUpperCase()][upgradeType].costs[currentLevel];\n  }\n  canUpgrade(shipType, upgradeType) {\n    const cost = this.getUpgradeCost(shipType, upgradeType);\n    return this.money >= cost && this.getUpgradeLevel(shipType, upgradeType) < 10;\n  }\n  upgrade(shipType, upgradeType) {\n    if (this.canUpgrade(shipType, upgradeType)) {\n      const cost = this.getUpgradeCost(shipType, upgradeType);\n      this.money -= cost;\n      this.upgrades[shipType][upgradeType]++;\n      return true;\n    }\n    return false;\n  }\n  prestige(force = false) {\n    if (this.planetsDestroyed >= 5 || force) {\n      this.gold += this.getGoldGainOnPrestige();\n      this.prestigeLevel++;\n      this.money = 1000;\n      this.planetsDestroyed = 0;\n      this.currentPlanetIndex = 0;\n      this.ships = [];\n      this.bullets = [];\n      this.upgrades = {\n        small: {\n          cooldown: 0,\n          damage: 0\n        },\n        medium: {\n          cooldown: 0,\n          damage: 0\n        },\n        large: {\n          cooldown: 0,\n          damage: 0\n        }\n      };\n      this.planets = Object.values(PLANETS).map(planet => new Planet(planet, this.width / 2, this.height / 2));\n      return true;\n    }\n    return false;\n  }\n  getPrestigeUpgradeLevel(upgradeType) {\n    return this.prestigeUpgrades[upgradeType];\n  }\n  getPrestigeUpgradeCost(upgradeType) {\n    const currentLevel = this.getPrestigeUpgradeLevel(upgradeType);\n    if (currentLevel >= 10) return Infinity;\n    return PRESTIGE_UPGRADES[upgradeType].costs[currentLevel];\n  }\n  canPrestigeUpgrade(upgradeType) {\n    const cost = this.getPrestigeUpgradeCost(upgradeType);\n    return this.gold >= cost && this.getPrestigeUpgradeLevel(upgradeType) < 10;\n  }\n  prestigeUpgrade(upgradeType) {\n    if (this.canPrestigeUpgrade(upgradeType)) {\n      const cost = this.getPrestigeUpgradeCost(upgradeType);\n      this.gold -= cost;\n      this.prestigeUpgrades[upgradeType]++;\n      return true;\n    }\n    return false;\n  }\n  getPrestigeLevel() {\n    return this.prestigeLevel;\n  }\n  getGold() {\n    return this.gold;\n  }\n  getGoldGainOnPrestige() {\n    return this.planetsDestroyed * PRESTIGE_GOLD_PER_PLANET;\n  }\n}","map":{"version":3,"names":["SHIPS","PLANETS","UPGRADES","PRESTIGE_UPGRADES","PRESTIGE_GOLD_PER_PLANET","Ship","constructor","type","x","y","simulation","toUpperCase","angle","lastFiredTime","orbitRadiusX","orbitRadiusY","update","deltaTime","fireRate","width","Math","cos","height","sin","currentTime","Date","now","cooldownReduction","id","cooldown","levels","getUpgradeLevel","adjustedFireRate","fireRateMultiplier","fireBullet","getDamage","baseDamage","damagePerShot","damageIncrease","damage","prestigeDamageMultiplier","DAMAGE_MULTIPLIER","getPrestigeUpgradeLevel","Bullet","ship","speed","shipType","dx","dy","distance","sqrt","hitPlanet","Planet","planetData","name","health","maxHealth","Simulation","ships","bullets","isRendering","money","planetsDestroyed","currentPlanetIndex","planets","Object","values","map","planet","upgrades","small","medium","large","prestigeLevel","gold","prestigeUpgrades","MONEY_MULTIPLIER","explosionTimer","explosionDuration","isExploding","addShip","push","buyShip","currentCost","getShipCost","random","PI","removeShip","index","indexOf","splice","bullet","currentPlanet","addMoney","moveToNextPlanet","forEach","filter","amount","moneyMultiplier","setFireRate","rate","toggleRendering","getShipCount","s","length","getTotalShipCount","getFireRate","getIsRendering","getMoney","floor","getPlanetHealth","max","getPlanetsDestroyed","getShipCountByType","currentCount","baseCost","pow","costIncreaseFactor","getCurrentPlanetIndex","getCurrentPlanet","upgradeType","getUpgradeCost","currentLevel","Infinity","costs","canUpgrade","cost","upgrade","prestige","force","getGoldGainOnPrestige","getPrestigeUpgradeCost","canPrestigeUpgrade","prestigeUpgrade","getPrestigeLevel","getGold"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/src/simulation/simulation.js"],"sourcesContent":["import { SHIPS, PLANETS, UPGRADES, PRESTIGE_UPGRADES, PRESTIGE_GOLD_PER_PLANET } from './simulationModels';\n\nclass Ship {\n  constructor(type, x, y, simulation) {\n    this.type = SHIPS[type.toUpperCase()];\n    this.x = x;\n    this.y = y;\n    this.angle = 0;\n    this.lastFiredTime = 0;\n    this.simulation = simulation;\n    this.orbitRadiusX = 250; // Reduced from 300 to 250\n    this.orbitRadiusY = 150; // Kept the same as before\n  }\n\n  update(deltaTime, fireRate) {\n    this.angle += deltaTime * 0.5;\n    this.x = this.simulation.width / 2 + Math.cos(this.angle) * this.orbitRadiusX;\n    this.y = this.simulation.height / 2 + Math.sin(this.angle) * this.orbitRadiusY;\n\n    const currentTime = Date.now();\n    const cooldownReduction = UPGRADES[this.type.id.toUpperCase()].cooldown.levels[this.simulation.getUpgradeLevel(this.type.id, 'cooldown')] / 100;\n    const adjustedFireRate = fireRate * (1 + cooldownReduction);\n    if (currentTime - this.lastFiredTime > (1000 / adjustedFireRate) / this.type.fireRateMultiplier) {\n      this.simulation.fireBullet(this);\n      this.lastFiredTime = currentTime;\n    }\n  }\n\n  getDamage() {\n    const baseDamage = this.type.damagePerShot;\n    const damageIncrease = UPGRADES[this.type.id.toUpperCase()].damage.levels[this.simulation.getUpgradeLevel(this.type.id, 'damage')];\n    const prestigeDamageMultiplier = PRESTIGE_UPGRADES.DAMAGE_MULTIPLIER.levels[this.simulation.getPrestigeUpgradeLevel('DAMAGE_MULTIPLIER')];\n    return (baseDamage + damageIncrease - 1) * prestigeDamageMultiplier;\n  }\n}\n\nclass Bullet {\n  constructor(ship) {\n    this.x = ship.x;\n    this.y = ship.y;\n    this.damage = ship.getDamage();\n    this.speed = 5;\n    this.shipType = ship.type.id;  // Add this line to store the ship type\n  }\n\n  update(deltaTime, simulation) {\n    const dx = simulation.width / 2 - this.x;\n    const dy = simulation.height / 2 - this.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (distance < 10) {\n      simulation.hitPlanet(this.damage);\n      return false;\n    }\n\n    this.x += (dx / distance) * this.speed;\n    this.y += (dy / distance) * this.speed;\n    return true;\n  }\n}\n\nclass Planet {\n  constructor(planetData, x, y) {\n    this.id = planetData.id;\n    this.name = planetData.name;\n    this.health = planetData.health;\n    this.maxHealth = planetData.health;\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport class Simulation {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ships = [];\n    this.bullets = [];\n    this.isRendering = true;\n    this.fireRate = 1;\n    this.money = 1000;\n    this.planetsDestroyed = 0;\n    this.currentPlanetIndex = 0;\n    this.planets = Object.values(PLANETS).map(planet => new Planet(planet, width / 2, height / 2));\n    this.upgrades = {\n      small: { cooldown: 0, damage: 0 },\n      medium: { cooldown: 0, damage: 0 },\n      large: { cooldown: 0, damage: 0 }\n    };\n    this.prestigeLevel = 0;\n    this.gold = 0;\n    this.prestigeUpgrades = {\n      MONEY_MULTIPLIER: 0,\n      DAMAGE_MULTIPLIER: 0\n    };\n    this.explosionTimer = 0;\n    this.explosionDuration = 1500; // Duration of explosion animation in milliseconds\n    this.isExploding = false;\n  }\n\n  addShip(type, x, y) {\n    const ship = new Ship(type, x, y, this);\n    this.ships.push(ship);\n    return ship;\n  }\n\n  buyShip(type) {\n    const shipType = SHIPS[type.toUpperCase()];\n    const currentCost = this.getShipCost(type);\n    if (this.money >= currentCost) {\n      const angle = Math.random() * Math.PI * 2;\n      const x = this.width / 2 + Math.cos(angle) * 250; // Updated from 300 to 250\n      const y = this.height / 2 + Math.sin(angle) * 150; // Kept the same as before\n      const ship = this.addShip(type, x, y);\n      this.money -= currentCost;\n      return ship;\n    }\n    return null;\n  }\n\n  removeShip(ship) {\n    const index = this.ships.indexOf(ship);\n    if (index !== -1) {\n      this.ships.splice(index, 1);\n    }\n  }\n\n  fireBullet(ship) {\n    const bullet = new Bullet(ship);\n    this.bullets.push(bullet);\n  }\n\n  hitPlanet(damage) {\n    const currentPlanet = this.planets[this.currentPlanetIndex];\n    currentPlanet.health -= damage;\n    this.addMoney(damage);\n    if (currentPlanet.health <= 0 && !this.isExploding) {\n      this.isExploding = true;\n      this.explosionTimer = this.explosionDuration;\n    }\n  }\n\n  update(deltaTime) {\n    if (this.isExploding) {\n      this.explosionTimer -= deltaTime * 1000;\n      if (this.explosionTimer <= 0) {\n        this.isExploding = false;\n        this.explosionTimer = 0;\n        this.moveToNextPlanet();\n      }\n    } else {\n      this.ships.forEach(ship => ship.update(deltaTime, this.fireRate));\n      this.bullets = this.bullets.filter(bullet => bullet.update(deltaTime, this));\n    }\n  }\n\n  addMoney(amount) {\n    const moneyMultiplier = PRESTIGE_UPGRADES.MONEY_MULTIPLIER.levels[this.getPrestigeUpgradeLevel('MONEY_MULTIPLIER')];\n    this.money += amount * moneyMultiplier;\n  }\n\n  setFireRate(rate) {\n    this.fireRate = rate;\n  }\n\n  toggleRendering() {\n    this.isRendering = !this.isRendering;\n  }\n\n  getShipCount(type) {\n    return this.ships.filter(s => s.type.id === type).length;\n  }\n\n  getTotalShipCount() {\n    return this.ships.length;\n  }\n\n  getFireRate() {\n    return this.fireRate;\n  }\n\n  getIsRendering() {\n    return this.isRendering;\n  }\n\n  getMoney() {\n    return Math.floor(this.money);\n  }\n\n  getPlanetHealth() {\n    const currentPlanet = this.planets[this.currentPlanetIndex];\n    return Math.max(0, Math.floor(currentPlanet.health));\n  }\n\n  getPlanetsDestroyed() {\n    return this.planetsDestroyed;\n  }\n\n  getShipCountByType(type) {\n    return this.ships.filter(ship => ship.type.id === type).length;\n  }\n\n  getShipCost(type) {\n    const shipType = SHIPS[type.toUpperCase()];\n    const currentCount = this.getShipCountByType(type);\n    return Math.floor(shipType.baseCost * Math.pow(shipType.costIncreaseFactor, currentCount));\n  }\n\n  getCurrentPlanetIndex() {\n    return this.currentPlanetIndex;\n  }\n\n  getCurrentPlanet() {\n    return this.planets[this.currentPlanetIndex];\n  }\n\n  getUpgradeLevel(shipType, upgradeType) {\n    return this.upgrades[shipType][upgradeType];\n  }\n\n  getUpgradeCost(shipType, upgradeType) {\n    const currentLevel = this.getUpgradeLevel(shipType, upgradeType);\n    if (currentLevel >= 10) return Infinity;\n    return UPGRADES[shipType.toUpperCase()][upgradeType].costs[currentLevel];\n  }\n\n  canUpgrade(shipType, upgradeType) {\n    const cost = this.getUpgradeCost(shipType, upgradeType);\n    return this.money >= cost && this.getUpgradeLevel(shipType, upgradeType) < 10;\n  }\n\n  upgrade(shipType, upgradeType) {\n    if (this.canUpgrade(shipType, upgradeType)) {\n      const cost = this.getUpgradeCost(shipType, upgradeType);\n      this.money -= cost;\n      this.upgrades[shipType][upgradeType]++;\n      return true;\n    }\n    return false;\n  }\n\n  prestige(force=false) {\n    if (this.planetsDestroyed >= 5 || force) {\n      this.gold += this.getGoldGainOnPrestige();\n      this.prestigeLevel++;\n      this.money = 1000;\n      this.planetsDestroyed = 0;\n      this.currentPlanetIndex = 0;\n      this.ships = [];\n      this.bullets = [];\n      this.upgrades = {\n        small: { cooldown: 0, damage: 0 },\n        medium: { cooldown: 0, damage: 0 },\n        large: { cooldown: 0, damage: 0 }\n      };\n      this.planets = Object.values(PLANETS).map(planet => new Planet(planet, this.width /2, this.height / 2));\n      return true;\n    }\n    return false;\n  }\n\n  getPrestigeUpgradeLevel(upgradeType) {\n    return this.prestigeUpgrades[upgradeType];\n  }\n\n  getPrestigeUpgradeCost(upgradeType) {\n    const currentLevel = this.getPrestigeUpgradeLevel(upgradeType);\n    if (currentLevel >= 10) return Infinity;\n    return PRESTIGE_UPGRADES[upgradeType].costs[currentLevel];\n  }\n\n  canPrestigeUpgrade(upgradeType) {\n    const cost = this.getPrestigeUpgradeCost(upgradeType);\n    return this.gold >= cost && this.getPrestigeUpgradeLevel(upgradeType) < 10;\n  }\n\n  prestigeUpgrade(upgradeType) {\n    if (this.canPrestigeUpgrade(upgradeType)) {\n      const cost = this.getPrestigeUpgradeCost(upgradeType);\n      this.gold -= cost;\n      this.prestigeUpgrades[upgradeType]++;\n      return true;\n    }\n    return false;\n  }\n\n  getPrestigeLevel() {\n    return this.prestigeLevel;\n  }\n\n  getGold() {\n    return this.gold;\n  }\n\n  getGoldGainOnPrestige() {\n    return this.planetsDestroyed * PRESTIGE_GOLD_PER_PLANET;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}