{"ast":null,"code":"/*!\n * @pixi/math - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/math is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n/**\n * Two Pi.\n *\n * @static\n * @constant {number} PI_2\n * @memberof PIXI\n */\nvar PI_2 = Math.PI * 2;\n/**\n * Conversion factor for converting radians to degrees.\n *\n * @static\n * @constant {number} RAD_TO_DEG\n * @memberof PIXI\n */\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * Conversion factor for converting degrees to radians.\n *\n * @static\n * @constant {number} DEG_TO_RAD\n * @memberof PIXI\n */\nvar DEG_TO_RAD = Math.PI / 180;\nvar SHAPES;\n(function (SHAPES) {\n  SHAPES[SHAPES[\"POLY\"] = 0] = \"POLY\";\n  SHAPES[SHAPES[\"RECT\"] = 1] = \"RECT\";\n  SHAPES[SHAPES[\"CIRC\"] = 2] = \"CIRC\";\n  SHAPES[SHAPES[\"ELIP\"] = 3] = \"ELIP\";\n  SHAPES[SHAPES[\"RREC\"] = 4] = \"RREC\";\n})(SHAPES || (SHAPES = {}));\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n *\n * @static\n * @constant\n * @name SHAPES\n * @memberof PIXI\n * @type {enum}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n * @enum {number}\n */\n\n/**\n * Size object, contains width and height\n *\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nvar Rectangle = /** @class */function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n   * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n   * @param {number} [width=0] - The overall width of this rectangle\n   * @param {number} [height=0] - The overall height of this rectangle\n   */\n  function Rectangle(x, y, width, height) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (width === void 0) {\n      width = 0;\n    }\n    if (height === void 0) {\n      height = 0;\n    }\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = Number(x);\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = Number(y);\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = Number(width);\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = Number(height);\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    this.type = SHAPES.RECT;\n  }\n  Object.defineProperty(Rectangle.prototype, \"left\", {\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this.x;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"right\", {\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this.x + this.width;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"top\", {\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this.y;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"bottom\", {\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this.y + this.height;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle, \"EMPTY\", {\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     * @member {PIXI.Rectangle}\n     * @return {PIXI.Rectangle} An empty rectangle\n     */\n    get: function () {\n      return new Rectangle(0, 0, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a clone of this Rectangle\n   *\n   * @return {PIXI.Rectangle} a copy of the rectangle\n   */\n  Rectangle.prototype.clone = function () {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Copies another rectangle to this one.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.\n   * @return {PIXI.Rectangle} Returns itself.\n   */\n  Rectangle.prototype.copyFrom = function (rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  };\n  /**\n   * Copies this rectangle to another one.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.\n   * @return {PIXI.Rectangle} Returns given parameter.\n   */\n  Rectangle.prototype.copyTo = function (rectangle) {\n    rectangle.x = this.x;\n    rectangle.y = this.y;\n    rectangle.width = this.width;\n    rectangle.height = this.height;\n    return rectangle;\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Rectangle\n   */\n  Rectangle.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Pads the rectangle making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   *\n   * @param {number} [paddingX=0] - The horizontal padding amount.\n   * @param {number} [paddingY=0] - The vertical padding amount.\n   * @return {PIXI.Rectangle} Returns itself.\n   */\n  Rectangle.prototype.pad = function (paddingX, paddingY) {\n    if (paddingX === void 0) {\n      paddingX = 0;\n    }\n    if (paddingY === void 0) {\n      paddingY = paddingX;\n    }\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n    return this;\n  };\n  /**\n   * Fits this rectangle around the passed one.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n   * @return {PIXI.Rectangle} Returns itself.\n   */\n  Rectangle.prototype.fit = function (rectangle) {\n    var x1 = Math.max(this.x, rectangle.x);\n    var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.max(this.y, rectangle.y);\n    var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n    return this;\n  };\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   *\n   * @param {number} [resolution=1] resolution\n   * @param {number} [eps=0.001] precision\n   * @return {PIXI.Rectangle} Returns itself.\n   */\n  Rectangle.prototype.ceil = function (resolution, eps) {\n    if (resolution === void 0) {\n      resolution = 1;\n    }\n    if (eps === void 0) {\n      eps = 0.001;\n    }\n    var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n    return this;\n  };\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n   * @return {PIXI.Rectangle} Returns itself.\n   */\n  Rectangle.prototype.enlarge = function (rectangle) {\n    var x1 = Math.min(this.x, rectangle.x);\n    var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.min(this.y, rectangle.y);\n    var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n    return this;\n  };\n  return Rectangle;\n}();\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nvar Circle = /** @class */function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the center of this circle\n   * @param {number} [y=0] - The Y coordinate of the center of this circle\n   * @param {number} [radius=0] - The radius of the circle\n   */\n  function Circle(x, y, radius) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (radius === void 0) {\n      radius = 0;\n    }\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.radius = radius;\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default PIXI.SHAPES.CIRC\n     * @see PIXI.SHAPES\n     */\n    this.type = SHAPES.CIRC;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   *\n   * @return {PIXI.Circle} a copy of the Circle\n   */\n  Circle.prototype.clone = function () {\n    return new Circle(this.x, this.y, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Circle\n   */\n  Circle.prototype.contains = function (x, y) {\n    if (this.radius <= 0) {\n      return false;\n    }\n    var r2 = this.radius * this.radius;\n    var dx = this.x - x;\n    var dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  };\n  /**\n  * Returns the framing rectangle of the circle as a Rectangle object\n  *\n  * @return {PIXI.Rectangle} the framing rectangle\n  */\n  Circle.prototype.getBounds = function () {\n    return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n  };\n  return Circle;\n}();\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nvar Ellipse = /** @class */function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the center of this ellipse\n   * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n   * @param {number} [halfWidth=0] - The half width of this ellipse\n   * @param {number} [halfHeight=0] - The half height of this ellipse\n   */\n  function Ellipse(x, y, halfWidth, halfHeight) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (halfWidth === void 0) {\n      halfWidth = 0;\n    }\n    if (halfHeight === void 0) {\n      halfHeight = 0;\n    }\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = halfWidth;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = halfHeight;\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default PIXI.SHAPES.ELIP\n     * @see PIXI.SHAPES\n     */\n    this.type = SHAPES.ELIP;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   *\n   * @return {PIXI.Ellipse} a copy of the ellipse\n   */\n  Ellipse.prototype.clone = function () {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coords are within this ellipse\n   */\n  Ellipse.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    // normalize the coords to an ellipse with center 0,0\n    var normx = (x - this.x) / this.width;\n    var normy = (y - this.y) / this.height;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  };\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   *\n   * @return {PIXI.Rectangle} the framing rectangle\n   */\n  Ellipse.prototype.getBounds = function () {\n    return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n  };\n  return Ellipse;\n}();\n\n/**\n * A class to define a shape via user defined co-orinates.\n *\n * @class\n * @memberof PIXI\n */\nvar Polygon = /** @class */function () {\n  /**\n   * @param {PIXI.IPoint[]|number[]} points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  function Polygon() {\n    var arguments$1 = arguments;\n    var points = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      points[_i] = arguments$1[_i];\n    }\n    var flat = Array.isArray(points[0]) ? points[0] : points;\n    // if this is an array of points, convert it to a flat array of numbers\n    if (typeof flat[0] !== 'number') {\n      var p = [];\n      for (var i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    /**\n     * An array of the points of this polygon\n     *\n     * @member {number[]}\n     */\n    this.points = flat;\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default PIXI.SHAPES.POLY\n     * @see PIXI.SHAPES\n     */\n    this.type = SHAPES.POLY;\n    /**\n     * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.\n     * @member {boolean}\n     * @default true\n     */\n    this.closeStroke = true;\n  }\n  /**\n   * Creates a clone of this polygon\n   *\n   * @return {PIXI.Polygon} a copy of the polygon\n   */\n  Polygon.prototype.clone = function () {\n    var points = this.points.slice();\n    var polygon = new Polygon(points);\n    polygon.closeStroke = this.closeStroke;\n    return polygon;\n  };\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this polygon\n   */\n  Polygon.prototype.contains = function (x, y) {\n    var inside = false;\n    // use some raycasting to test hits\n    // https://github.com/substack/point-in-polygon/blob/master/index.js\n    var length = this.points.length / 2;\n    for (var i = 0, j = length - 1; i < length; j = i++) {\n      var xi = this.points[i * 2];\n      var yi = this.points[i * 2 + 1];\n      var xj = this.points[j * 2];\n      var yj = this.points[j * 2 + 1];\n      var intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  };\n  return Polygon;\n}();\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @class\n * @memberof PIXI\n */\nvar RoundedRectangle = /** @class */function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param {number} [width=0] - The overall width of this rounded rectangle\n   * @param {number} [height=0] - The overall height of this rounded rectangle\n   * @param {number} [radius=20] - Controls the radius of the rounded corners\n   */\n  function RoundedRectangle(x, y, width, height, radius) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (width === void 0) {\n      width = 0;\n    }\n    if (height === void 0) {\n      height = 0;\n    }\n    if (radius === void 0) {\n      radius = 20;\n    }\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = width;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = height;\n    /**\n     * @member {number}\n     * @default 20\n     */\n    this.radius = radius;\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readonly\n     * @default PIXI.SHAPES.RREC\n     * @see PIXI.SHAPES\n     */\n    this.type = SHAPES.RREC;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle\n   *\n   * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n   */\n  RoundedRectangle.prototype.clone = function () {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n   */\n  RoundedRectangle.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        if (y >= this.y + this.radius && y <= this.y + this.height - this.radius || x >= this.x + this.radius && x <= this.x + this.width - this.radius) {\n          return true;\n        }\n        var dx = x - (this.x + this.radius);\n        var dy = y - (this.y + this.radius);\n        var radius2 = this.radius * this.radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - this.radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - this.radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  return RoundedRectangle;\n}();\n\n/**\n * Common interface for points. Both Point and ObservablePoint implement it\n * @memberof PIXI\n * @interface IPointData\n */\n/**\n * X coord\n * @memberof PIXI.IPointData#\n * @member {number} x\n */\n/**\n * Y coord\n * @memberof PIXI.IPointData#\n * @member {number} y\n */\n\n/**\n * Common interface for points. Both Point and ObservablePoint implement it\n * @memberof PIXI\n * @interface IPoint\n * @extends PIXI.IPointData\n */\n/**\n * Sets the point to a new x and y position.\n * If y is omitted, both x and y will be set to x.\n *\n * @method set\n * @memberof PIXI.IPoint#\n * @param {number} [x=0] - position of the point on the x axis\n * @param {number} [y=x] - position of the point on the y axis\n */\n/**\n * Copies x and y from the given point\n * @method copyFrom\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPointData} p - The point to copy from\n * @returns {this} Returns itself.\n */\n/**\n * Copies x and y into the given point\n * @method copyTo\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPoint} p - The point to copy.\n * @returns {PIXI.IPoint} Given point with values updated\n */\n/**\n * Returns true if the given point is equal to this point\n *\n * @method equals\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPointData} p - The point to check\n * @returns {boolean} Whether the given point equal to this point\n */\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nvar Point = /** @class */function () {\n  /**\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  function Point(x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n  }\n  /**\n   * Creates a clone of this point\n   *\n   * @return {PIXI.Point} a copy of the point\n   */\n  Point.prototype.clone = function () {\n    return new Point(this.x, this.y);\n  };\n  /**\n   * Copies x and y from the given point\n   *\n   * @param {PIXI.IPointData} p - The point to copy from\n   * @returns {this} Returns itself.\n   */\n  Point.prototype.copyFrom = function (p) {\n    this.set(p.x, p.y);\n    return this;\n  };\n  /**\n   * Copies x and y into the given point\n   *\n   * @param {PIXI.IPoint} p - The point to copy.\n   * @returns {PIXI.IPoint} Given point with values updated\n   */\n  Point.prototype.copyTo = function (p) {\n    p.set(this.x, this.y);\n    return p;\n  };\n  /**\n   * Returns true if the given point is equal to this point\n   *\n   * @param {PIXI.IPointData} p - The point to check\n   * @returns {boolean} Whether the given point equal to this point\n   */\n  Point.prototype.equals = function (p) {\n    return p.x === this.x && p.y === this.y;\n  };\n  /**\n   * Sets the point to a new x and y position.\n   * If y is omitted, both x and y will be set to x.\n   *\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns {this} Returns itself.\n   */\n  Point.prototype.set = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = x;\n    }\n    this.x = x;\n    this.y = y;\n    return this;\n  };\n  return Point;\n}();\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * An ObservablePoint is a point that triggers a callback when the point's position is changed.\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nvar ObservablePoint = /** @class */function () {\n  /**\n   * @param {Function} cb - callback when changed\n   * @param {object} scope - owner of callback\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  function ObservablePoint(cb, scope, x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    this._x = x;\n    this._y = y;\n    this.cb = cb;\n    this.scope = scope;\n  }\n  /**\n   * Creates a clone of this point.\n   * The callback and scope params can be overidden otherwise they will default\n   * to the clone object's values.\n   *\n   * @override\n   * @param {Function} [cb=null] - callback when changed\n   * @param {object} [scope=null] - owner of callback\n   * @return {PIXI.ObservablePoint} a copy of the point\n   */\n  ObservablePoint.prototype.clone = function (cb, scope) {\n    if (cb === void 0) {\n      cb = this.cb;\n    }\n    if (scope === void 0) {\n      scope = this.scope;\n    }\n    return new ObservablePoint(cb, scope, this._x, this._y);\n  };\n  /**\n   * Sets the point to a new x and y position.\n   * If y is omitted, both x and y will be set to x.\n   *\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns {this} Returns itself.\n   */\n  ObservablePoint.prototype.set = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = x;\n    }\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  };\n  /**\n   * Copies x and y from the given point\n   *\n   * @param {PIXI.IPointData} p - The point to copy from.\n   * @returns {this} Returns itself.\n   */\n  ObservablePoint.prototype.copyFrom = function (p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  };\n  /**\n   * Copies x and y into the given point\n   *\n   * @param {PIXI.IPoint} p - The point to copy.\n   * @returns {PIXI.IPoint} Given point with values updated\n   */\n  ObservablePoint.prototype.copyTo = function (p) {\n    p.set(this._x, this._y);\n    return p;\n  };\n  /**\n   * Returns true if the given point is equal to this point\n   *\n   * @param {PIXI.IPointData} p - The point to check\n   * @returns {boolean} Whether the given point equal to this point\n   */\n  ObservablePoint.prototype.equals = function (p) {\n    return p.x === this._x && p.y === this._y;\n  };\n  Object.defineProperty(ObservablePoint.prototype, \"x\", {\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._x;\n    },\n    set: function (value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.cb.call(this.scope);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservablePoint.prototype, \"y\", {\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._y;\n    },\n    set: function (value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.cb.call(this.scope);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ObservablePoint;\n}();\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @class\n * @memberof PIXI\n */\nvar Matrix = /** @class */function () {\n  /**\n   * @param {number} [a=1] - x scale\n   * @param {number} [b=0] - x skew\n   * @param {number} [c=0] - y skew\n   * @param {number} [d=1] - y scale\n   * @param {number} [tx=0] - x translation\n   * @param {number} [ty=0] - y translation\n   */\n  function Matrix(a, b, c, d, tx, ty) {\n    if (a === void 0) {\n      a = 1;\n    }\n    if (b === void 0) {\n      b = 0;\n    }\n    if (c === void 0) {\n      c = 0;\n    }\n    if (d === void 0) {\n      d = 1;\n    }\n    if (tx === void 0) {\n      tx = 0;\n    }\n    if (ty === void 0) {\n      ty = 0;\n    }\n    this.array = null;\n    /**\n     * @member {number}\n     * @default 1\n     */\n    this.a = a;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.b = b;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.c = c;\n    /**\n     * @member {number}\n     * @default 1\n     */\n    this.d = d;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.tx = tx;\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   *\n   * @param {number[]} array - The array that the matrix will be populated from.\n   */\n  Matrix.prototype.fromArray = function (array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  };\n  /**\n   * sets the matrix properties\n   *\n   * @param {number} a - Matrix component\n   * @param {number} b - Matrix component\n   * @param {number} c - Matrix component\n   * @param {number} d - Matrix component\n   * @param {number} tx - Matrix component\n   * @param {number} ty - Matrix component\n   *\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.set = function (a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  };\n  /**\n   * Creates an array from the current Matrix object.\n   *\n   * @param {boolean} transpose - Whether we need to transpose the matrix or not\n   * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @return {number[]} the newly created array which contains the matrix\n   */\n  Matrix.prototype.toArray = function (transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n    var array = out || this.array;\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n    return array;\n  };\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   *\n   * @param {PIXI.IPointData} pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {PIXI.Point} The new point, transformed through this matrix\n   */\n  Matrix.prototype.apply = function (pos, newPos) {\n    newPos = newPos || new Point();\n    var x = pos.x;\n    var y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  };\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   *\n   * @param {PIXI.IPointData} pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n   */\n  Matrix.prototype.applyInverse = function (pos, newPos) {\n    newPos = newPos || new Point();\n    var id = 1 / (this.a * this.d + this.c * -this.b);\n    var x = pos.x;\n    var y = pos.y;\n    newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;\n    return newPos;\n  };\n  /**\n   * Translates the matrix on the x and y.\n   *\n   * @param {number} x - How much to translate x by\n   * @param {number} y - How much to translate y by\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.translate = function (x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  };\n  /**\n   * Applies a scale transformation to the matrix.\n   *\n   * @param {number} x - The amount to scale horizontally\n   * @param {number} y - The amount to scale vertically\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.scale = function (x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  };\n  /**\n   * Applies a rotation transformation to the matrix.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.rotate = function (angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  };\n  /**\n   * Appends the given Matrix to this Matrix.\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to append.\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.append = function (matrix) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  };\n  /**\n   * Sets the matrix based on all the available properties\n   *\n   * @param {number} x - Position on the x axis\n   * @param {number} y - Position on the y axis\n   * @param {number} pivotX - Pivot on the x axis\n   * @param {number} pivotY - Pivot on the y axis\n   * @param {number} scaleX - Scale on the x axis\n   * @param {number} scaleY - Scale on the y axis\n   * @param {number} rotation - Rotation in radians\n   * @param {number} skewX - Skew on the x axis\n   * @param {number} skewY - Skew on the y axis\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  };\n  /**\n   * Prepends the given Matrix to this Matrix.\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to prepend\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.prepend = function (matrix) {\n    var tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      var a1 = this.a;\n      var c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  };\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   *\n   * @param {PIXI.Transform} transform - The transform to apply the properties to.\n   * @return {PIXI.Transform} The transform with the newly applied properties\n   */\n  Matrix.prototype.decompose = function (transform) {\n    // sort out rotation / skew..\n    var a = this.a;\n    var b = this.b;\n    var c = this.c;\n    var d = this.d;\n    var skewX = -Math.atan2(-c, d);\n    var skewY = Math.atan2(b, a);\n    var delta = Math.abs(skewX + skewY);\n    if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n    // next set scale\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n    // next set position\n    transform.position.x = this.tx;\n    transform.position.y = this.ty;\n    return transform;\n  };\n  /**\n   * Inverts this matrix\n   *\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.invert = function () {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    var tx1 = this.tx;\n    var n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  };\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   *\n   * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.identity = function () {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  };\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   *\n   * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.clone = function () {\n    var matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  };\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to copy to.\n   * @return {PIXI.Matrix} The matrix given in parameter with its values updated.\n   */\n  Matrix.prototype.copyTo = function (matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  };\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to copy from.\n   * @return {PIXI.Matrix} this\n   */\n  Matrix.prototype.copyFrom = function (matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  };\n  Object.defineProperty(Matrix, \"IDENTITY\", {\n    /**\n     * A default (identity) matrix\n     *\n     * @static\n     * @const\n     * @member {PIXI.Matrix}\n     */\n    get: function () {\n      return new Matrix();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Matrix, \"TEMP_MATRIX\", {\n    /**\n     * A temp matrix\n     *\n     * @static\n     * @const\n     * @member {PIXI.Matrix}\n     */\n    get: function () {\n      return new Matrix();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Matrix;\n}();\n\n// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\nvar ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nvar uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n *\n * @type number[][]\n * @private\n */\nvar rotationCayley = [];\n/**\n * Matrices for each `GD8Symmetry` rotation.\n *\n * @type Matrix[]\n * @private\n */\nvar rotationMatrices = [];\n/*\n * Alias for {@code Math.sign}.\n */\nvar signum = Math.sign;\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init() {\n  for (var i = 0; i < 16; i++) {\n    var row = [];\n    rotationCayley.push(row);\n    for (var j = 0; j < 16; j++) {\n      /* Multiplies rotation matrices i and j. */\n      var _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);\n      var _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);\n      var _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);\n      var _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);\n      /* Finds rotation matrix matching the product and pushes it. */\n      for (var k = 0; k < 16; k++) {\n        if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {\n          row.push(k);\n          break;\n        }\n      }\n    }\n  }\n  for (var i = 0; i < 16; i++) {\n    var mat = new Matrix();\n    mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n    rotationMatrices.push(mat);\n  }\n}\ninit();\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n *\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nvar groupD8 = {\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 0°       | East      |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  E: 0,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 45°↻     | Southeast |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  SE: 1,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 90°↻     | South     |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  S: 2,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 135°↻    | Southwest |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  SW: 3,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 180°     | West      |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  W: 4,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -135°/225°↻ | Northwest    |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  NW: 5,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -90°/270°↻  | North        |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  N: 6,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -45°/315°↻  | Northeast    |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  NE: 7,\n  /**\n   * Reflection about Y-axis.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MIRROR_VERTICAL: 8,\n  /**\n   * Reflection about the main diagonal.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MAIN_DIAGONAL: 10,\n  /**\n   * Reflection about X-axis.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MIRROR_HORIZONTAL: 12,\n  /**\n   * Reflection about reverse diagonal.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  REVERSE_DIAGONAL: 14,\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The X-component of the U-axis\n   *    after rotating the axes.\n   */\n  uX: function (ind) {\n    return ux[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The Y-component of the U-axis\n   *    after rotating the axes.\n   */\n  uY: function (ind) {\n    return uy[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The X-component of the V-axis\n   *    after rotating the axes.\n   */\n  vX: function (ind) {\n    return vx[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The Y-component of the V-axis\n   *    after rotating the axes.\n   */\n  vY: function (ind) {\n    return vy[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n   *   is needed. Only rotations have opposite symmetries while\n   *   reflections don't.\n   * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n   */\n  inv: function (rotation) {\n    if (rotation & 8)\n      // true only if between 8 & 15 (reflections)\n      {\n        return rotation & 15; // or rotation % 16\n      }\n    return -rotation & 7; // or (8 - rotation) % 8\n  },\n  /**\n   * Composes the two D8 operations.\n   *\n   * Taking `^` as reflection:\n   *\n   * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n   * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n   * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n   * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n   * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n   * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n   * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n   * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n   * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n   * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n   *\n   * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n   *   is the row in the above cayley table.\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n   *   is the column in the above cayley table.\n   * @return {PIXI.GD8Symmetry} Composed operation\n   */\n  add: function (rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][rotationFirst];\n  },\n  /**\n   * Reverse of `add`.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n   * @return {PIXI.GD8Symmetry} Result\n   */\n  sub: function (rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][groupD8.inv(rotationFirst)];\n  },\n  /**\n   * Adds 180 degrees to rotation, which is a commutative\n   * operation.\n   *\n   * @memberof PIXI.groupD8\n   * @param {number} rotation - The number to rotate.\n   * @returns {number} Rotated number\n   */\n  rotate180: function (rotation) {\n    return rotation ^ 4;\n  },\n  /**\n   * Checks if the rotation angle is vertical, i.e. south\n   * or north. It doesn't work for reflections.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotation - The number to check.\n   * @returns {boolean} Whether or not the direction is vertical\n   */\n  isVertical: function (rotation) {\n    return (rotation & 3) === 2;\n  },\n  /**\n   * Approximates the vector `V(dx,dy)` into one of the\n   * eight directions provided by `groupD8`.\n   *\n   * @memberof PIXI.groupD8\n   * @param {number} dx - X-component of the vector\n   * @param {number} dy - Y-component of the vector\n   * @return {PIXI.GD8Symmetry} Approximation of the vector into\n   *  one of the eight symmetries.\n   */\n  byDirection: function (dx, dy) {\n    if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n      if (dy >= 0) {\n        return groupD8.S;\n      }\n      return groupD8.N;\n    } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n      if (dx > 0) {\n        return groupD8.E;\n      }\n      return groupD8.W;\n    } else if (dy > 0) {\n      if (dx > 0) {\n        return groupD8.SE;\n      }\n      return groupD8.SW;\n    } else if (dx > 0) {\n      return groupD8.NE;\n    }\n    return groupD8.NW;\n  },\n  /**\n   * Helps sprite to compensate texture packer rotation.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.Matrix} matrix - sprite world matrix\n   * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n   * @param {number} tx - sprite anchoring\n   * @param {number} ty - sprite anchoring\n   */\n  matrixAppendRotationInv: function (matrix, rotation, tx, ty) {\n    if (tx === void 0) {\n      tx = 0;\n    }\n    if (ty === void 0) {\n      ty = 0;\n    }\n    // Packer used \"rotation\", we use \"inv(rotation)\"\n    var mat = rotationMatrices[groupD8.inv(rotation)];\n    mat.tx = tx;\n    mat.ty = ty;\n    matrix.append(mat);\n  }\n};\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @memberof PIXI\n */\nvar Transform = /** @class */function () {\n  function Transform() {\n    /**\n     * The world transformation matrix.\n     *\n     * @member {PIXI.Matrix}\n     */\n    this.worldTransform = new Matrix();\n    /**\n     * The local transformation matrix.\n     *\n     * @member {PIXI.Matrix}\n     */\n    this.localTransform = new Matrix();\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    this.position = new ObservablePoint(this.onChange, this, 0, 0);\n    /**\n     * The scale factor of the object.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n    /**\n     * The pivot point of the displayObject that it rotates around.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n    /**\n     * The skew amount, on the x and y axis.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n    /**\n     * The rotation amount.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._rotation = 0;\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._cx = 1;\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._sx = 0;\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._cy = 0;\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._sy = 1;\n    /**\n     * The locally unique ID of the local transform.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._localID = 0;\n    /**\n     * The locally unique ID of the local transform\n     * used to calculate the current local transformation matrix.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._currentLocalID = 0;\n    /**\n     * The locally unique ID of the world transform.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._worldID = 0;\n    /**\n     * The locally unique ID of the parent's world transform\n     * used to calculate the current world transformation matrix.\n     *\n     * @protected\n     * @member {number}\n     */\n    this._parentID = 0;\n  }\n  /**\n   * Called when a value changes.\n   *\n   * @protected\n   */\n  Transform.prototype.onChange = function () {\n    this._localID++;\n  };\n  /**\n   * Called when the skew or the rotation changes.\n   *\n   * @protected\n   */\n  Transform.prototype.updateSkew = function () {\n    this._cx = Math.cos(this._rotation + this.skew.y);\n    this._sx = Math.sin(this._rotation + this.skew.y);\n    this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n    this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n    this._localID++;\n  };\n  /**\n   * Updates the local transformation matrix.\n   */\n  Transform.prototype.updateLocalTransform = function () {\n    var lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID;\n      // force an update..\n      this._parentID = -1;\n    }\n  };\n  /**\n   * Updates the local and the world transformation matrices.\n   *\n   * @param {PIXI.Transform} parentTransform - The parent transform\n   */\n  Transform.prototype.updateTransform = function (parentTransform) {\n    var lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID;\n      // force an update..\n      this._parentID = -1;\n    }\n    if (this._parentID !== parentTransform._worldID) {\n      // concat the parent matrix with the objects transform.\n      var pt = parentTransform.worldTransform;\n      var wt = this.worldTransform;\n      wt.a = lt.a * pt.a + lt.b * pt.c;\n      wt.b = lt.a * pt.b + lt.b * pt.d;\n      wt.c = lt.c * pt.a + lt.d * pt.c;\n      wt.d = lt.c * pt.b + lt.d * pt.d;\n      wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n      wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n      this._parentID = parentTransform._worldID;\n      // update the id of the transform..\n      this._worldID++;\n    }\n  };\n  /**\n   * Decomposes a matrix and sets the transforms properties based on it.\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to decompose\n   */\n  Transform.prototype.setFromMatrix = function (matrix) {\n    matrix.decompose(this);\n    this._localID++;\n  };\n  Object.defineProperty(Transform.prototype, \"rotation\", {\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._rotation;\n    },\n    set: function (value) {\n      if (this._rotation !== value) {\n        this._rotation = value;\n        this.updateSkew();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * A default (identity) transform\n   *\n   * @static\n   * @constant\n   * @member {PIXI.Transform}\n   */\n  Transform.IDENTITY = new Transform();\n  return Transform;\n}();\n\n/**\n * Math classes and utilities mixed into PIXI namespace.\n *\n * @lends PIXI\n */\n\nexport { Circle, DEG_TO_RAD, Ellipse, Matrix, ObservablePoint, PI_2, Point, Polygon, RAD_TO_DEG, Rectangle, RoundedRectangle, SHAPES, Transform, groupD8 };","map":{"version":3,"names":["PI_2","Math","PI","RAD_TO_DEG","DEG_TO_RAD","SHAPES","Rectangle","x","y","width","height","Number","type","RECT","Object","defineProperty","prototype","get","clone","copyFrom","rectangle","copyTo","contains","pad","paddingX","paddingY","fit","x1","max","x2","min","y1","y2","ceil","resolution","eps","floor","enlarge","Circle","radius","CIRC","r2","dx","dy","getBounds","Ellipse","halfWidth","halfHeight","ELIP","normx","normy","Polygon","points","_i","arguments","length","arguments$1","flat","Array","isArray","p","i","il","push","POLY","closeStroke","slice","polygon","inside","j","xi","yi","xj","yj","intersect","RoundedRectangle","RREC","radius2","Point","set","equals","ObservablePoint","cb","scope","_x","_y","call","value","Matrix","a","b","c","d","tx","ty","array","fromArray","toArray","transpose","out","Float32Array","apply","pos","newPos","applyInverse","id","translate","scale","rotate","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","atan2","delta","abs","skew","sqrt","position","invert","n","identity","ux","uy","vx","vy","rotationCayley","rotationMatrices","signum","sign","init","row","_ux","_uy","_vx","_vy","k","mat","groupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MAIN_DIAGONAL","MIRROR_HORIZONTAL","REVERSE_DIAGONAL","uX","ind","uY","vX","vY","inv","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","matrixAppendRotationInv","Transform","worldTransform","localTransform","onChange","pivot","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","_worldID","_parentID","updateLocalTransform","lt","updateTransform","parentTransform","pt","wt","setFromMatrix","IDENTITY"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/const.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/shapes/Rectangle.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/shapes/Circle.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/shapes/Ellipse.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/shapes/Polygon.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/shapes/RoundedRectangle.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/IPointData.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/IPoint.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/Point.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/ObservablePoint.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/Matrix.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/groupD8.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/Transform.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/math/src/index.ts"],"sourcesContent":["/**\n * Two Pi.\n *\n * @static\n * @constant {number} PI_2\n * @memberof PIXI\n */\nexport const PI_2 = Math.PI * 2;\n\n/**\n * Conversion factor for converting radians to degrees.\n *\n * @static\n * @constant {number} RAD_TO_DEG\n * @memberof PIXI\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor for converting degrees to radians.\n *\n * @static\n * @constant {number} DEG_TO_RAD\n * @memberof PIXI\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\nexport enum SHAPES {\n    POLY = 0,\n    RECT = 1,\n    CIRC = 2,\n    ELIP = 3,\n    RREC = 4,\n}\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n *\n * @static\n * @constant\n * @name SHAPES\n * @memberof PIXI\n * @type {enum}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n * @enum {number}\n */\n","import { SHAPES } from '../const';\n\n/**\n * Size object, contains width and height\n *\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    public readonly type: SHAPES.RECT;\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = Number(x);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = Number(y);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = Number(width);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = Number(height);\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RECT;\n    }\n\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     * @member {PIXI.Rectangle}\n     * @return {PIXI.Rectangle} An empty rectangle\n     */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.\n     * @return {PIXI.Rectangle} Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     *\n     * @param {number} [paddingX=0] - The horizontal padding amount.\n     * @param {number} [paddingY=0] - The vertical padding amount.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param {number} [resolution=1] resolution\n     * @param {number} [eps=0.001] precision\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n}\n","import { SHAPES } from './../const';\nimport { Rectangle } from './Rectangle';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nexport class Circle\n{\n    public x: number;\n    public y: number;\n    public radius: number;\n    public readonly type: SHAPES.CIRC;\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this circle\n     * @param {number} [y=0] - The Y coordinate of the center of this circle\n     * @param {number} [radius=0] - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.CIRC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     *\n     * @return {PIXI.Circle} a copy of the Circle\n     */\n    clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Circle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n    * Returns the framing rectangle of the circle as a Rectangle object\n    *\n    * @return {PIXI.Rectangle} the framing rectangle\n    */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n}\n","import { Rectangle } from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nexport class Ellipse\n{\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    public readonly type: SHAPES.ELIP;\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this ellipse\n     * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n     * @param {number} [halfWidth=0] - The half width of this ellipse\n     * @param {number} [halfHeight=0] - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = halfWidth;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = halfHeight;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.ELIP\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     *\n     * @return {PIXI.Ellipse} a copy of the ellipse\n     */\n    clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coords are within this ellipse\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     *\n     * @return {PIXI.Rectangle} the framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n}\n","import { SHAPES } from '../const';\nimport type { IPoint } from '../IPoint';\n\n/**\n * A class to define a shape via user defined co-orinates.\n *\n * @class\n * @memberof PIXI\n */\nexport class Polygon\n{\n    public points: number[];\n    public closeStroke: boolean;\n    public readonly type: SHAPES.POLY;\n\n    constructor(points: IPoint[]|number[]);\n    constructor(...points: IPoint[]|number[]);\n    /**\n     * @param {PIXI.IPoint[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: any[])\n    {\n        let flat: IPoint[]|number[] = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as IPoint).x, (flat[i] as IPoint).y);\n            }\n\n            flat = p;\n        }\n\n        /**\n         * An array of the points of this polygon\n         *\n         * @member {number[]}\n         */\n        this.points = flat as number[];\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.POLY\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.POLY;\n\n        /**\n         * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.\n         * @member {boolean}\n         * @default true\n         */\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon\n     *\n     * @return {PIXI.Polygon} a copy of the polygon\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this polygon\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n}\n","import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @class\n * @memberof PIXI\n */\nexport class RoundedRectangle\n{\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    public radius: number;\n    public readonly type: SHAPES.RREC;\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [width=0] - The overall width of this rounded rectangle\n     * @param {number} [height=0] - The overall height of this rounded rectangle\n     * @param {number} [radius=20] - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = width;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = height;\n\n        /**\n         * @member {number}\n         * @default 20\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readonly\n         * @default PIXI.SHAPES.RREC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle\n     *\n     * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n     */\n    clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                if ((y >= this.y + this.radius && y <= this.y + this.height - this.radius)\n                || (x >= this.x + this.radius && x <= this.x + this.width - this.radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + this.radius);\n                let dy = y - (this.y + this.radius);\n                const radius2 = this.radius * this.radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n","export interface IPointData\n{\n    x: number;\n    y: number;\n}\n\n/**\n * Common interface for points. Both Point and ObservablePoint implement it\n * @memberof PIXI\n * @interface IPointData\n */\n\n/**\n * X coord\n * @memberof PIXI.IPointData#\n * @member {number} x\n */\n\n/**\n * Y coord\n * @memberof PIXI.IPointData#\n * @member {number} y\n */\n","import { IPointData } from './IPointData';\n\nexport interface IPoint extends IPointData\n{\n    copyFrom(p: IPointData): this;\n    copyTo<T extends IPoint>(p: T): T;\n    equals(p: IPointData): boolean;\n    set(x?: number, y?: number): void;\n}\n/**\n * Common interface for points. Both Point and ObservablePoint implement it\n * @memberof PIXI\n * @interface IPoint\n * @extends PIXI.IPointData\n */\n\n/**\n * Sets the point to a new x and y position.\n * If y is omitted, both x and y will be set to x.\n *\n * @method set\n * @memberof PIXI.IPoint#\n * @param {number} [x=0] - position of the point on the x axis\n * @param {number} [y=x] - position of the point on the y axis\n */\n\n/**\n * Copies x and y from the given point\n * @method copyFrom\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPointData} p - The point to copy from\n * @returns {this} Returns itself.\n */\n\n/**\n * Copies x and y into the given point\n * @method copyTo\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPoint} p - The point to copy.\n * @returns {PIXI.IPoint} Given point with values updated\n */\n\n/**\n * Returns true if the given point is equal to this point\n *\n * @method equals\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPointData} p - The point to check\n * @returns {boolean} Whether the given point equal to this point\n */\n\n","import type { IPoint } from './IPoint';\nimport type { IPointData } from './IPointData';\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nexport class Point implements IPoint\n{\n    public x: number;\n    public y: number;\n\n    /**\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     *\n     * @return {PIXI.Point} a copy of the point\n     */\n    clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.IPointData} p - The point to copy from\n     * @returns {this} Returns itself.\n     */\n    copyFrom(p: IPointData): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies x and y into the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy.\n     * @returns {PIXI.IPoint} Given point with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.IPointData} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns {this} Returns itself.\n     */\n    set(x = 0, y = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n}\n","import type { IPointData } from './IPointData';\nimport type { IPoint } from './IPoint';\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * An ObservablePoint is a point that triggers a callback when the point's position is changed.\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    public cb: (this: T) => any;\n    public scope: any;\n    _x: number;\n    _y: number;\n\n    /**\n     * @param {Function} cb - callback when changed\n     * @param {object} scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overidden otherwise they will default\n     * to the clone object's values.\n     *\n     * @override\n     * @param {Function} [cb=null] - callback when changed\n     * @param {object} [scope=null] - owner of callback\n     * @return {PIXI.ObservablePoint} a copy of the point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns {this} Returns itself.\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.IPointData} p - The point to copy from.\n     * @returns {this} Returns itself.\n     */\n    copyFrom(p: IPointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y into the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy.\n     * @returns {PIXI.IPoint} Given point with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.IPointData} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n","import { Point } from './Point';\nimport { PI_2 } from './const';\n\nimport type { Transform } from './Transform';\nimport type { IPointData } from './IPointData';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @class\n * @memberof PIXI\n */\nexport class Matrix\n{\n    public a: number;\n    public b: number;\n    public c: number;\n    public d: number;\n    public tx: number;\n    public ty: number;\n\n    public array: Float32Array|null = null;\n\n    /**\n     * @param {number} [a=1] - x scale\n     * @param {number} [b=0] - x skew\n     * @param {number} [c=0] - y skew\n     * @param {number} [d=1] - y scale\n     * @param {number} [tx=0] - x translation\n     * @param {number} [ty=0] - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.a = a;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.b = b;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.c = c;\n\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.d = d;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.tx = tx;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     *\n     * @param {number[]} array - The array that the matrix will be populated from.\n     */\n    fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * sets the matrix properties\n     *\n     * @param {number} a - Matrix component\n     * @param {number} b - Matrix component\n     * @param {number} c - Matrix component\n     * @param {number} d - Matrix component\n     * @param {number} tx - Matrix component\n     * @param {number} ty - Matrix component\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     *\n     * @param {boolean} transpose - Whether we need to transpose the matrix or not\n     * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @return {number[]} the newly created array which contains the matrix\n     */\n    toArray(transpose: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     *\n     * @param {PIXI.IPointData} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     *\n     * @param {PIXI.IPointData} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     *\n     * @param {number} x - How much to translate x by\n     * @param {number} y - How much to translate y by\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     *\n     * @param {number} x - The amount to scale horizontally\n     * @param {number} y - The amount to scale vertically\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     *\n     * @param {number} angle - The angle in radians.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to append.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     *\n     * @param {number} x - Position on the x axis\n     * @param {number} y - Position on the y axis\n     * @param {number} pivotX - Pivot on the x axis\n     * @param {number} pivotY - Pivot on the y axis\n     * @param {number} scaleX - Scale on the x axis\n     * @param {number} scaleY - Scale on the y axis\n     * @param {number} rotation - Rotation in radians\n     * @param {number} skewX - Skew on the x axis\n     * @param {number} skewY - Skew on the y axis\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to prepend\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     *\n     * @param {PIXI.Transform} transform - The transform to apply the properties to.\n     * @return {PIXI.Transform} The transform with the newly applied properties\n     */\n    decompose(transform: Transform): Transform\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx;\n        transform.position.y = this.ty;\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     *\n     * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.\n     */\n    clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy to.\n     * @return {PIXI.Matrix} The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @return {PIXI.Matrix} this\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * A default (identity) matrix\n     *\n     * @static\n     * @const\n     * @member {PIXI.Matrix}\n     */\n    static get IDENTITY(): Matrix\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     *\n     * @static\n     * @const\n     * @member {PIXI.Matrix}\n     */\n    static get TEMP_MATRIX(): Matrix\n    {\n        return new Matrix();\n    }\n}\n","// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n *\n * @type number[][]\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n *\n * @type Matrix[]\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n *\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @return {PIXI.GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @return {PIXI.GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     *\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     *\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @return {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n","import { ObservablePoint } from './ObservablePoint';\nimport { Matrix } from './Matrix';\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @memberof PIXI\n */\nexport class Transform\n{\n    /**\n     * A default (identity) transform\n     *\n     * @static\n     * @constant\n     * @member {PIXI.Transform}\n     */\n    public static readonly IDENTITY = new Transform();\n\n    public worldTransform: Matrix;\n    public localTransform: Matrix;\n    public position: ObservablePoint;\n    public scale: ObservablePoint;\n    public pivot: ObservablePoint;\n    public skew: ObservablePoint;\n    public _parentID: number;\n    _worldID: number;\n\n    protected _rotation: number;\n    protected _cx: number;\n    protected _sx: number;\n    protected _cy: number;\n    protected _sy: number;\n    protected _localID: number;\n    protected _currentLocalID: number;\n\n    constructor()\n    {\n        /**\n         * The world transformation matrix.\n         *\n         * @member {PIXI.Matrix}\n         */\n        this.worldTransform = new Matrix();\n\n        /**\n         * The local transformation matrix.\n         *\n         * @member {PIXI.Matrix}\n         */\n        this.localTransform = new Matrix();\n\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        /**\n         * The rotation amount.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._rotation = 0;\n\n        /**\n         * The X-coordinate value of the normalized local X axis,\n         * the first column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._cx = 1;\n\n        /**\n         * The Y-coordinate value of the normalized local X axis,\n         * the first column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._sx = 0;\n\n        /**\n         * The X-coordinate value of the normalized local Y axis,\n         * the second column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._cy = 0;\n\n        /**\n         * The Y-coordinate value of the normalized local Y axis,\n         * the second column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._sy = 1;\n\n        /**\n         * The locally unique ID of the local transform.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._localID = 0;\n\n        /**\n         * The locally unique ID of the local transform\n         * used to calculate the current local transformation matrix.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._currentLocalID = 0;\n\n        /**\n         * The locally unique ID of the world transform.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._worldID = 0;\n\n        /**\n         * The locally unique ID of the parent's world transform\n         * used to calculate the current world transformation matrix.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._parentID = 0;\n    }\n\n    /**\n     * Called when a value changes.\n     *\n     * @protected\n     */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /**\n     * Called when the skew or the rotation changes.\n     *\n     * @protected\n     */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    /**\n     * Updates the local transformation matrix.\n     */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     *\n     * @param {PIXI.Transform} parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n","/**\n * Math classes and utilities mixed into PIXI namespace.\n *\n * @lends PIXI\n */\n\nimport { Circle } from './shapes/Circle';\nimport { Ellipse } from './shapes/Ellipse';\nimport { Polygon } from './shapes/Polygon';\nimport { Rectangle } from './shapes/Rectangle';\nimport { RoundedRectangle } from './shapes/RoundedRectangle';\n\nexport * from './IPointData';\nexport * from './IPoint';\nexport * from './Point';\nexport * from './ObservablePoint';\nexport * from './Matrix';\nexport * from './groupD8';\nexport * from './Transform';\n\nexport { Circle };\nexport { Ellipse };\nexport { Polygon };\nexport { Rectangle };\nexport { RoundedRectangle };\n\nexport * from './const';\n\n/**\n * @description Complex shape type\n *\n */\nexport type IShape = Circle | Ellipse | Polygon | Rectangle | RoundedRectangle;\n\nexport interface ISize\n{\n    width: number;\n    height: number;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}