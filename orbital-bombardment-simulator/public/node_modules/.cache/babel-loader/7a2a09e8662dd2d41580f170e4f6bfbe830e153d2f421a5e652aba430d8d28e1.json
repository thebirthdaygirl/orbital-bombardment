{"ast":null,"code":"/*!\n * @pixi/text - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/text is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { hex2string, hex2rgb, string2hex, trimCanvas, sign } from '@pixi/utils';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nvar TEXT_GRADIENT;\n(function (TEXT_GRADIENT) {\n  TEXT_GRADIENT[TEXT_GRADIENT[\"LINEAR_VERTICAL\"] = 0] = \"LINEAR_VERTICAL\";\n  TEXT_GRADIENT[TEXT_GRADIENT[\"LINEAR_HORIZONTAL\"] = 1] = \"LINEAR_HORIZONTAL\";\n})(TEXT_GRADIENT || (TEXT_GRADIENT = {}));\n\n// disabling eslint for now, going to rewrite this in v5\nvar defaultStyle = {\n  align: 'left',\n  breakWords: false,\n  dropShadow: false,\n  dropShadowAlpha: 1,\n  dropShadowAngle: Math.PI / 6,\n  dropShadowBlur: 0,\n  dropShadowColor: 'black',\n  dropShadowDistance: 5,\n  fill: 'black',\n  fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n  fillGradientStops: [],\n  fontFamily: 'Arial',\n  fontSize: 26,\n  fontStyle: 'normal',\n  fontVariant: 'normal',\n  fontWeight: 'normal',\n  letterSpacing: 0,\n  lineHeight: 0,\n  lineJoin: 'miter',\n  miterLimit: 10,\n  padding: 0,\n  stroke: 'black',\n  strokeThickness: 0,\n  textBaseline: 'alphabetic',\n  trim: false,\n  whiteSpace: 'pre',\n  wordWrap: false,\n  wordWrapWidth: 100,\n  leading: 0\n};\nvar genericFontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\nvar TextStyle = /** @class */function () {\n  /**\n   * @param {object} [style] - The style parameters\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n   *  does not affect single line text\n   * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n   *  needs wordWrap to be set to true\n   * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n   * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n   * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n   * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n   * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n   * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n   * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n   *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n   *  eg ['#000000','#FFFFFF']\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n   * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n   *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n   * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n   * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n   * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n   * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n   *  equivalents are '26px','20pt','160%' or '1.6em')\n   * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n   * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n   * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n   *  '200', '300', '400', '500', '600', '700', '800' or '900')\n   * @param {number} [style.leading=0] - The space between lines\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n   * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n   * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n   *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n   *      (creates a squared corner).\n   * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n   *      or increase the spikiness of rendered text.\n   * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n   *     happening by adding padding to all sides of the text.\n   * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n   *  e.g 'blue', '#FCFF00'\n   * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n   *  Default is 0 (no stroke)\n   * @param {boolean} [style.trim=false] - Trim transparent borders\n   * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n   * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n   *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n   * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n   * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n   */\n  function TextStyle(style) {\n    this.styleID = 0;\n    this.reset();\n    deepCopyProperties(this, style, style);\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * Note that the only the properties of the object are cloned.\n   *\n   * @return {PIXI.TextStyle} New cloned TextStyle object\n   */\n  TextStyle.prototype.clone = function () {\n    var clonedProperties = {};\n    deepCopyProperties(clonedProperties, this, defaultStyle);\n    return new TextStyle(clonedProperties);\n  };\n  /**\n   * Resets all properties to the defaults specified in TextStyle.prototype._default\n   */\n  TextStyle.prototype.reset = function () {\n    deepCopyProperties(this, defaultStyle, defaultStyle);\n  };\n  Object.defineProperty(TextStyle.prototype, \"align\", {\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._align;\n    },\n    set: function (align) {\n      if (this._align !== align) {\n        this._align = align;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"breakWords\", {\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get: function () {\n      return this._breakWords;\n    },\n    set: function (breakWords) {\n      if (this._breakWords !== breakWords) {\n        this._breakWords = breakWords;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadow\", {\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get: function () {\n      return this._dropShadow;\n    },\n    set: function (dropShadow) {\n      if (this._dropShadow !== dropShadow) {\n        this._dropShadow = dropShadow;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowAlpha\", {\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._dropShadowAlpha;\n    },\n    set: function (dropShadowAlpha) {\n      if (this._dropShadowAlpha !== dropShadowAlpha) {\n        this._dropShadowAlpha = dropShadowAlpha;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowAngle\", {\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._dropShadowAngle;\n    },\n    set: function (dropShadowAngle) {\n      if (this._dropShadowAngle !== dropShadowAngle) {\n        this._dropShadowAngle = dropShadowAngle;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowBlur\", {\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._dropShadowBlur;\n    },\n    set: function (dropShadowBlur) {\n      if (this._dropShadowBlur !== dropShadowBlur) {\n        this._dropShadowBlur = dropShadowBlur;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowColor\", {\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get: function () {\n      return this._dropShadowColor;\n    },\n    set: function (dropShadowColor) {\n      var outputColor = getColor(dropShadowColor);\n      if (this._dropShadowColor !== outputColor) {\n        this._dropShadowColor = outputColor;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowDistance\", {\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._dropShadowDistance;\n    },\n    set: function (dropShadowDistance) {\n      if (this._dropShadowDistance !== dropShadowDistance) {\n        this._dropShadowDistance = dropShadowDistance;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fill\", {\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get: function () {\n      return this._fill;\n    },\n    set: function (fill) {\n      // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n      //       the setter converts to string. See this thread for more details:\n      //       https://github.com/microsoft/TypeScript/issues/2521\n      // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n      //       without casting here.\n      var outputColor = getColor(fill);\n      if (this._fill !== outputColor) {\n        this._fill = outputColor;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fillGradientType\", {\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._fillGradientType;\n    },\n    set: function (fillGradientType) {\n      if (this._fillGradientType !== fillGradientType) {\n        this._fillGradientType = fillGradientType;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fillGradientStops\", {\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get: function () {\n      return this._fillGradientStops;\n    },\n    set: function (fillGradientStops) {\n      if (!areArraysEqual(this._fillGradientStops, fillGradientStops)) {\n        this._fillGradientStops = fillGradientStops;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontFamily\", {\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get: function () {\n      return this._fontFamily;\n    },\n    set: function (fontFamily) {\n      if (this.fontFamily !== fontFamily) {\n        this._fontFamily = fontFamily;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontSize\", {\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get: function () {\n      return this._fontSize;\n    },\n    set: function (fontSize) {\n      if (this._fontSize !== fontSize) {\n        this._fontSize = fontSize;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontStyle\", {\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._fontStyle;\n    },\n    set: function (fontStyle) {\n      if (this._fontStyle !== fontStyle) {\n        this._fontStyle = fontStyle;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontVariant\", {\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._fontVariant;\n    },\n    set: function (fontVariant) {\n      if (this._fontVariant !== fontVariant) {\n        this._fontVariant = fontVariant;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontWeight\", {\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._fontWeight;\n    },\n    set: function (fontWeight) {\n      if (this._fontWeight !== fontWeight) {\n        this._fontWeight = fontWeight;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"letterSpacing\", {\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._letterSpacing;\n    },\n    set: function (letterSpacing) {\n      if (this._letterSpacing !== letterSpacing) {\n        this._letterSpacing = letterSpacing;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"lineHeight\", {\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._lineHeight;\n    },\n    set: function (lineHeight) {\n      if (this._lineHeight !== lineHeight) {\n        this._lineHeight = lineHeight;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"leading\", {\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._leading;\n    },\n    set: function (leading) {\n      if (this._leading !== leading) {\n        this._leading = leading;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"lineJoin\", {\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._lineJoin;\n    },\n    set: function (lineJoin) {\n      if (this._lineJoin !== lineJoin) {\n        this._lineJoin = lineJoin;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"miterLimit\", {\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._miterLimit;\n    },\n    set: function (miterLimit) {\n      if (this._miterLimit !== miterLimit) {\n        this._miterLimit = miterLimit;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"padding\", {\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._padding;\n    },\n    set: function (padding) {\n      if (this._padding !== padding) {\n        this._padding = padding;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"stroke\", {\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get: function () {\n      return this._stroke;\n    },\n    set: function (stroke) {\n      // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n      //       the setter converts to string. See this thread for more details:\n      //       https://github.com/microsoft/TypeScript/issues/2521\n      var outputColor = getColor(stroke);\n      if (this._stroke !== outputColor) {\n        this._stroke = outputColor;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"strokeThickness\", {\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._strokeThickness;\n    },\n    set: function (strokeThickness) {\n      if (this._strokeThickness !== strokeThickness) {\n        this._strokeThickness = strokeThickness;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"textBaseline\", {\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._textBaseline;\n    },\n    set: function (textBaseline) {\n      if (this._textBaseline !== textBaseline) {\n        this._textBaseline = textBaseline;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"trim\", {\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get: function () {\n      return this._trim;\n    },\n    set: function (trim) {\n      if (this._trim !== trim) {\n        this._trim = trim;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"whiteSpace\", {\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._whiteSpace;\n    },\n    set: function (whiteSpace) {\n      if (this._whiteSpace !== whiteSpace) {\n        this._whiteSpace = whiteSpace;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"wordWrap\", {\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get: function () {\n      return this._wordWrap;\n    },\n    set: function (wordWrap) {\n      if (this._wordWrap !== wordWrap) {\n        this._wordWrap = wordWrap;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"wordWrapWidth\", {\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._wordWrapWidth;\n    },\n    set: function (wordWrapWidth) {\n      if (this._wordWrapWidth !== wordWrapWidth) {\n        this._wordWrapWidth = wordWrapWidth;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Generates a font style string to use for `TextMetrics.measureFont()`.\n   *\n   * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n   */\n  TextStyle.prototype.toFontString = function () {\n    // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n    var fontSizeString = typeof this.fontSize === 'number' ? this.fontSize + \"px\" : this.fontSize;\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    var fontFamilies = this.fontFamily;\n    if (!Array.isArray(this.fontFamily)) {\n      fontFamilies = this.fontFamily.split(',');\n    }\n    for (var i = fontFamilies.length - 1; i >= 0; i--) {\n      // Trim any extra white-space\n      var fontFamily = fontFamilies[i].trim();\n      // Check if font already contains strings\n      if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0) {\n        fontFamily = \"\\\"\" + fontFamily + \"\\\"\";\n      }\n      fontFamilies[i] = fontFamily;\n    }\n    return this.fontStyle + \" \" + this.fontVariant + \" \" + this.fontWeight + \" \" + fontSizeString + \" \" + fontFamilies.join(',');\n  };\n  return TextStyle;\n}();\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {string|number} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color) {\n  if (typeof color === 'number') {\n    return hex2string(color);\n  } else if (typeof color === 'string') {\n    if (color.indexOf('0x') === 0) {\n      color = color.replace('0x', '#');\n    }\n  }\n  return color;\n}\nfunction getColor(color) {\n  if (!Array.isArray(color)) {\n    return getSingleColor(color);\n  } else {\n    for (var i = 0; i < color.length; ++i) {\n      color[i] = getSingleColor(color[i]);\n    }\n    return color;\n  }\n}\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 - First array to compare\n * @param {Array} array2 - Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2) {\n  if (!Array.isArray(array1) || !Array.isArray(array2)) {\n    return false;\n  }\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (var i = 0; i < array1.length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target - Target object to copy properties into\n * @param {Object} source - Source object for the properties to copy\n * @param {string} propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target, source, propertyObj) {\n  for (var prop in propertyObj) {\n    if (Array.isArray(source[prop])) {\n      target[prop] = source[prop].slice();\n    } else {\n      target[prop] = source[prop];\n    }\n  }\n}\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberof PIXI\n */\nvar TextMetrics = /** @class */function () {\n  /**\n   * @param {string} text - the text that was measured\n   * @param {PIXI.TextStyle} style - the style that was measured\n   * @param {number} width - the measured width of the text\n   * @param {number} height - the measured height of the text\n   * @param {string[]} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n   * @param {number[]} lineWidths - an array of the line widths for each line matched to `lines`\n   * @param {number} lineHeight - the measured line height for this style\n   * @param {number} maxLineWidth - the maximum line width for all measured lines\n   * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n   */\n  function TextMetrics(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    /**\n     * The text that was measured\n     *\n     * @member {string}\n     */\n    this.text = text;\n    /**\n     * The style that was measured\n     *\n     * @member {PIXI.TextStyle}\n     */\n    this.style = style;\n    /**\n     * The measured width of the text\n     *\n     * @member {number}\n     */\n    this.width = width;\n    /**\n     * The measured height of the text\n     *\n     * @member {number}\n     */\n    this.height = height;\n    /**\n     * An array of lines of the text broken by new lines and wrapping is specified in style\n     *\n     * @member {string[]}\n     */\n    this.lines = lines;\n    /**\n     * An array of the line widths for each line matched to `lines`\n     *\n     * @member {number[]}\n     */\n    this.lineWidths = lineWidths;\n    /**\n     * The measured line height for this style\n     *\n     * @member {number}\n     */\n    this.lineHeight = lineHeight;\n    /**\n     * The maximum line width for all measured lines\n     *\n     * @member {number}\n     */\n    this.maxLineWidth = maxLineWidth;\n    /**\n     * The font properties object from TextMetrics.measureFont\n     *\n     * @member {PIXI.IFontMetrics}\n     */\n    this.fontProperties = fontProperties;\n  }\n  /**\n   * Measures the supplied string of text and returns a Rectangle.\n   *\n   * @param {string} text - the text to measure.\n   * @param {PIXI.TextStyle} style - the text style to use for measuring\n   * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n   * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n   * @return {PIXI.TextMetrics} measured width and height of the text.\n   */\n  TextMetrics.measureText = function (text, style, wordWrap, canvas) {\n    if (canvas === void 0) {\n      canvas = TextMetrics._canvas;\n    }\n    wordWrap = wordWrap === undefined || wordWrap === null ? style.wordWrap : wordWrap;\n    var font = style.toFontString();\n    var fontProperties = TextMetrics.measureFont(font);\n    // fallback in case UA disallow canvas data extraction\n    // (toDataURI, getImageData functions)\n    if (fontProperties.fontSize === 0) {\n      fontProperties.fontSize = style.fontSize;\n      fontProperties.ascent = style.fontSize;\n    }\n    var context = canvas.getContext('2d');\n    context.font = font;\n    var outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n    var lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    var lineWidths = new Array(lines.length);\n    var maxLineWidth = 0;\n    for (var i = 0; i < lines.length; i++) {\n      var lineWidth = context.measureText(lines[i]).width + (lines[i].length - 1) * style.letterSpacing;\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    var width = maxLineWidth + style.strokeThickness;\n    if (style.dropShadow) {\n      width += style.dropShadowDistance;\n    }\n    var lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n    var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) + (lines.length - 1) * (lineHeight + style.leading);\n    if (style.dropShadow) {\n      height += style.dropShadowDistance;\n    }\n    return new TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n  };\n  /**\n   * Applies newlines to a string to have it optimally fit into the horizontal\n   * bounds set by the Text object's wordWrapWidth property.\n   *\n   * @private\n   * @param {string} text - String to apply word wrapping to\n   * @param {PIXI.TextStyle} style - the style to use when wrapping\n   * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n   * @return {string} New string with new lines applied where required\n   */\n  TextMetrics.wordWrap = function (text, style, canvas) {\n    if (canvas === void 0) {\n      canvas = TextMetrics._canvas;\n    }\n    var context = canvas.getContext('2d');\n    var width = 0;\n    var line = '';\n    var lines = '';\n    var cache = {};\n    var letterSpacing = style.letterSpacing,\n      whiteSpace = style.whiteSpace;\n    // How to handle whitespaces\n    var collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n    var collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n    // whether or not spaces may be added to the beginning of lines\n    var canPrependSpaces = !collapseSpaces;\n    // There is letterSpacing after every char except the last one\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n    // so for convenience the above needs to be compared to width + 1 extra letterSpace\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n    // ________________________________________________\n    // And then the final space is simply no appended to each line\n    var wordWrapWidth = style.wordWrapWidth + letterSpacing;\n    // break text into words, spaces and newline chars\n    var tokens = TextMetrics.tokenize(text);\n    for (var i = 0; i < tokens.length; i++) {\n      // get the word, space or newlineChar\n      var token = tokens[i];\n      // if word is a new line\n      if (TextMetrics.isNewline(token)) {\n        // keep the new line\n        if (!collapseNewlines) {\n          lines += TextMetrics.addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = '';\n          width = 0;\n          continue;\n        }\n        // if we should collapse new lines\n        // we simply convert it into a space\n        token = ' ';\n      }\n      // if we should collapse repeated whitespaces\n      if (collapseSpaces) {\n        // check both this and the last tokens for spaces\n        var currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n        var lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n      // get word width from cache if possible\n      var tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n      // word is longer than desired bounds\n      if (tokenWidth > wordWrapWidth) {\n        // if we are not already at the beginning of a line\n        if (line !== '') {\n          // start newlines for overflow words\n          lines += TextMetrics.addLine(line);\n          line = '';\n          width = 0;\n        }\n        // break large word over multiple lines\n        if (TextMetrics.canBreakWords(token, style.breakWords)) {\n          // break word into characters\n          var characters = TextMetrics.wordWrapSplit(token);\n          // loop the characters\n          for (var j = 0; j < characters.length; j++) {\n            var char = characters[j];\n            var k = 1;\n            // we are not at the end of the token\n            while (characters[j + k]) {\n              var nextChar = characters[j + k];\n              var lastChar = char[char.length - 1];\n              // should not split chars\n              if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                // combine chars & move forward one\n                char += nextChar;\n              } else {\n                break;\n              }\n              k++;\n            }\n            j += char.length - 1;\n            var characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n            if (characterWidth + width > wordWrapWidth) {\n              lines += TextMetrics.addLine(line);\n              canPrependSpaces = false;\n              line = '';\n              width = 0;\n            }\n            line += char;\n            width += characterWidth;\n          }\n        }\n        // run word out of the bounds\n        else {\n          // if there are words in this line already\n          // finish that line and start a new one\n          if (line.length > 0) {\n            lines += TextMetrics.addLine(line);\n            line = '';\n            width = 0;\n          }\n          var isLastToken = i === tokens.length - 1;\n          // give it its own line if it's not the end\n          lines += TextMetrics.addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = '';\n          width = 0;\n        }\n      }\n      // word could fit\n      else {\n        // word won't fit because of existing words\n        // start a new line\n        if (tokenWidth + width > wordWrapWidth) {\n          // if its a space we don't want it\n          canPrependSpaces = false;\n          // add a new line\n          lines += TextMetrics.addLine(line);\n          // start a new line\n          line = '';\n          width = 0;\n        }\n        // don't add spaces to the beginning of lines\n        if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          // add the word to the current line\n          line += token;\n          // update width counter\n          width += tokenWidth;\n        }\n      }\n    }\n    lines += TextMetrics.addLine(line, false);\n    return lines;\n  };\n  /**\n   * Convienience function for logging each line added during the wordWrap\n   * method\n   *\n   * @private\n   * @param  {string}   line        - The line of text to add\n   * @param  {boolean}  newLine     - Add new line character to end\n   * @return {string}  A formatted line\n   */\n  TextMetrics.addLine = function (line, newLine) {\n    if (newLine === void 0) {\n      newLine = true;\n    }\n    line = TextMetrics.trimRight(line);\n    line = newLine ? line + \"\\n\" : line;\n    return line;\n  };\n  /**\n   * Gets & sets the widths of calculated characters in a cache object\n   *\n   * @private\n   * @param  {string}                    key            - The key\n   * @param  {number}                    letterSpacing  - The letter spacing\n   * @param  {object}                    cache          - The cache\n   * @param  {CanvasRenderingContext2D}  context        - The canvas context\n   * @return {number}                    The from cache.\n   */\n  TextMetrics.getFromCache = function (key, letterSpacing, cache, context) {\n    var width = cache[key];\n    if (width === undefined) {\n      var spacing = key.length * letterSpacing;\n      width = context.measureText(key).width + spacing;\n      cache[key] = width;\n    }\n    return width;\n  };\n  /**\n   * Determines whether we should collapse breaking spaces\n   *\n   * @private\n   * @param  {string}   whiteSpace - The TextStyle property whiteSpace\n   * @return {boolean}  should collapse\n   */\n  TextMetrics.collapseSpaces = function (whiteSpace) {\n    return whiteSpace === 'normal' || whiteSpace === 'pre-line';\n  };\n  /**\n   * Determines whether we should collapse newLine chars\n   *\n   * @private\n   * @param  {string}   whiteSpace - The white space\n   * @return {boolean}  should collapse\n   */\n  TextMetrics.collapseNewlines = function (whiteSpace) {\n    return whiteSpace === 'normal';\n  };\n  /**\n   * trims breaking whitespaces from string\n   *\n   * @private\n   * @param  {string}  text - The text\n   * @return {string}  trimmed string\n   */\n  TextMetrics.trimRight = function (text) {\n    if (typeof text !== 'string') {\n      return '';\n    }\n    for (var i = text.length - 1; i >= 0; i--) {\n      var char = text[i];\n      if (!TextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n      text = text.slice(0, -1);\n    }\n    return text;\n  };\n  /**\n   * Determines if char is a newline.\n   *\n   * @private\n   * @param  {string}  char - The character\n   * @return {boolean}  True if newline, False otherwise.\n   */\n  TextMetrics.isNewline = function (char) {\n    if (typeof char !== 'string') {\n      return false;\n    }\n    return TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0;\n  };\n  /**\n   * Determines if char is a breaking whitespace.\n   *\n   * @private\n   * @param  {string}  char - The character\n   * @return {boolean}  True if whitespace, False otherwise.\n   */\n  TextMetrics.isBreakingSpace = function (char) {\n    if (typeof char !== 'string') {\n      return false;\n    }\n    return TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0;\n  };\n  /**\n   * Splits a string into words, breaking-spaces and newLine characters\n   *\n   * @private\n   * @param  {string}  text - The text\n   * @return {string[]}  A tokenized array\n   */\n  TextMetrics.tokenize = function (text) {\n    var tokens = [];\n    var token = '';\n    if (typeof text !== 'string') {\n      return tokens;\n    }\n    for (var i = 0; i < text.length; i++) {\n      var char = text[i];\n      if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char)) {\n        if (token !== '') {\n          tokens.push(token);\n          token = '';\n        }\n        tokens.push(char);\n        continue;\n      }\n      token += char;\n    }\n    if (token !== '') {\n      tokens.push(token);\n    }\n    return tokens;\n  };\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to customise which words should break\n   * Examples are if the token is CJK or numbers.\n   * It must return a boolean.\n   *\n   * @param  {string}  token       - The token\n   * @param  {boolean}  breakWords - The style attr break words\n   * @return {boolean} whether to break word or not\n   */\n  TextMetrics.canBreakWords = function (_token, breakWords) {\n    return breakWords;\n  };\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to determine whether a pair of characters\n   * should be broken by newlines\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   *\n   * @param  {string}  char        - The character\n   * @param  {string}  nextChar    - The next character\n   * @param  {string}  token       - The token/word the characters are from\n   * @param  {number}  index       - The index in the token of the char\n   * @param  {boolean}  breakWords - The style attr break words\n   * @return {boolean} whether to break word or not\n   */\n  TextMetrics.canBreakChars = function (_char, _nextChar, _token, _index, _breakWords) {\n    return true;\n  };\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It is called when a token (usually a word) has to be split into separate pieces\n   * in order to determine the point to break a word.\n   * It must return an array of characters.\n   *\n   * @example\n   * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n   * TextMetrics.wordWrapSplit = (token) => [...token];\n   *\n   * @param  {string}  token - The token to split\n   * @return {string[]} The characters of the token\n   */\n  TextMetrics.wordWrapSplit = function (token) {\n    return token.split('');\n  };\n  /**\n   * Calculates the ascent, descent and fontSize of a given font-style\n   *\n   * @static\n   * @param {string} font - String representing the style of the font\n   * @return {PIXI.IFontMetrics} Font properties object\n   */\n  TextMetrics.measureFont = function (font) {\n    // as this method is used for preparing assets, don't recalculate things if we don't need to\n    if (TextMetrics._fonts[font]) {\n      return TextMetrics._fonts[font];\n    }\n    var properties = {\n      ascent: 0,\n      descent: 0,\n      fontSize: 0\n    };\n    var canvas = TextMetrics._canvas;\n    var context = TextMetrics._context;\n    context.font = font;\n    var metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n    var width = Math.ceil(context.measureText(metricsString).width);\n    var baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n    var height = 2 * baseline;\n    baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n    canvas.width = width;\n    canvas.height = height;\n    context.fillStyle = '#f00';\n    context.fillRect(0, 0, width, height);\n    context.font = font;\n    context.textBaseline = 'alphabetic';\n    context.fillStyle = '#000';\n    context.fillText(metricsString, 0, baseline);\n    var imagedata = context.getImageData(0, 0, width, height).data;\n    var pixels = imagedata.length;\n    var line = width * 4;\n    var i = 0;\n    var idx = 0;\n    var stop = false;\n    // ascent. scan from top to bottom until we find a non red pixel\n    for (i = 0; i < baseline; ++i) {\n      for (var j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx += line;\n      } else {\n        break;\n      }\n    }\n    properties.ascent = baseline - i;\n    idx = pixels - line;\n    stop = false;\n    // descent. scan from bottom to top until we find a non red pixel\n    for (i = height; i > baseline; --i) {\n      for (var j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx -= line;\n      } else {\n        break;\n      }\n    }\n    properties.descent = i - baseline;\n    properties.fontSize = properties.ascent + properties.descent;\n    TextMetrics._fonts[font] = properties;\n    return properties;\n  };\n  /**\n   * Clear font metrics in metrics cache.\n   *\n   * @static\n   * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n   */\n  TextMetrics.clearMetrics = function (font) {\n    if (font === void 0) {\n      font = '';\n    }\n    if (font) {\n      delete TextMetrics._fonts[font];\n    } else {\n      TextMetrics._fonts = {};\n    }\n  };\n  return TextMetrics;\n}();\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\nvar canvas = function () {\n  try {\n    // OffscreenCanvas2D measureText can be up to 40% faster.\n    var c = new OffscreenCanvas(0, 0);\n    var context = c.getContext('2d');\n    if (context && context.measureText) {\n      return c;\n    }\n    return document.createElement('canvas');\n  } catch (ex) {\n    return document.createElement('canvas');\n  }\n}();\ncanvas.width = canvas.height = 10;\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [0x000A, 0x000D];\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [0x0009, 0x0020, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2008, 0x2009, 0x200A, 0x205F, 0x3000];\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n\nvar defaultDestroyOptions = {\n  texture: true,\n  children: false,\n  baseTexture: true\n};\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the next,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nvar Text = /** @class */function (_super) {\n  __extends(Text, _super);\n  /**\n   * @param {string} text - The string that you would like the text to display\n   * @param {object|PIXI.TextStyle} [style] - The style parameters\n   * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n   */\n  function Text(text, style, canvas) {\n    var _this = this;\n    var ownCanvas = false;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      ownCanvas = true;\n    }\n    canvas.width = 3;\n    canvas.height = 3;\n    var texture = Texture.from(canvas);\n    texture.orig = new Rectangle();\n    texture.trim = new Rectangle();\n    _this = _super.call(this, texture) || this;\n    /**\n     * Keep track if this Text object created it's own canvas\n     * element (`true`) or uses the constructor argument (`false`).\n     * Used to workaround a GC issues with Safari < 13 when\n     * destroying Text. See `destroy` for more info.\n     *\n     * @member {boolean}\n     * @private\n     */\n    _this._ownCanvas = ownCanvas;\n    /**\n     * The canvas element that everything is drawn to\n     *\n     * @member {HTMLCanvasElement}\n     */\n    _this.canvas = canvas;\n    /**\n     * The canvas 2d context that everything is drawn with\n     * @member {CanvasRenderingContext2D}\n     */\n    _this.context = _this.canvas.getContext('2d');\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    _this._resolution = settings.RESOLUTION;\n    _this._autoResolution = true;\n    /**\n     * Private tracker for the current text.\n     *\n     * @member {string}\n     * @private\n     */\n    _this._text = null;\n    /**\n     * Private tracker for the current style.\n     *\n     * @member {object}\n     * @private\n     */\n    _this._style = null;\n    /**\n     * Private listener to track style changes.\n     *\n     * @member {Function}\n     * @private\n     */\n    _this._styleListener = null;\n    /**\n     * Private tracker for the current font.\n     *\n     * @member {string}\n     * @private\n     */\n    _this._font = '';\n    _this.text = text;\n    _this.style = style;\n    _this.localStyleID = -1;\n    return _this;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   *\n   * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n   */\n  Text.prototype.updateText = function (respectDirty) {\n    var style = this._style;\n    // check if style has changed..\n    if (this.localStyleID !== style.styleID) {\n      this.dirty = true;\n      this.localStyleID = style.styleID;\n    }\n    if (!this.dirty && respectDirty) {\n      return;\n    }\n    this._font = this._style.toFontString();\n    var context = this.context;\n    var measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n    var width = measured.width;\n    var height = measured.height;\n    var lines = measured.lines;\n    var lineHeight = measured.lineHeight;\n    var lineWidths = measured.lineWidths;\n    var maxLineWidth = measured.maxLineWidth;\n    var fontProperties = measured.fontProperties;\n    this.canvas.width = Math.ceil((Math.max(1, width) + style.padding * 2) * this._resolution);\n    this.canvas.height = Math.ceil((Math.max(1, height) + style.padding * 2) * this._resolution);\n    context.scale(this._resolution, this._resolution);\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    context.font = this._font;\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n    var linePositionX;\n    var linePositionY;\n    // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n    var passesCount = style.dropShadow ? 2 : 1;\n    // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n    // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n    //\n    // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n    // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n    // and the stroke; and fill drop shadows would appear over the top of the stroke.\n    //\n    // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n    // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n    // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n    // beneath the text, whilst also having the proper text shadow styling.\n    for (var i = 0; i < passesCount; ++i) {\n      var isShadowPass = style.dropShadow && i === 0;\n      var dsOffsetText = isShadowPass ? height * 2 : 0; // we only want the drop shadow, so put text way off-screen\n      var dsOffsetShadow = dsOffsetText * this.resolution;\n      if (isShadowPass) {\n        // On Safari, text with gradient and drop shadows together do not position correctly\n        // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n        // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n        context.fillStyle = 'black';\n        context.strokeStyle = 'black';\n        var dropShadowColor = style.dropShadowColor;\n        var rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n        context.shadowColor = \"rgba(\" + rgb[0] * 255 + \",\" + rgb[1] * 255 + \",\" + rgb[2] * 255 + \",\" + style.dropShadowAlpha + \")\";\n        context.shadowBlur = style.dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * style.dropShadowDistance + dsOffsetShadow;\n      } else {\n        // set canvas text styles\n        context.fillStyle = this._generateFillStyle(style, lines, measured);\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        context.strokeStyle = style.stroke;\n        context.shadowColor = '0';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n      }\n      // draw lines line by line\n      for (var i_1 = 0; i_1 < lines.length; i_1++) {\n        linePositionX = style.strokeThickness / 2;\n        linePositionY = style.strokeThickness / 2 + i_1 * lineHeight + fontProperties.ascent;\n        if (style.align === 'right') {\n          linePositionX += maxLineWidth - lineWidths[i_1];\n        } else if (style.align === 'center') {\n          linePositionX += (maxLineWidth - lineWidths[i_1]) / 2;\n        }\n        if (style.stroke && style.strokeThickness) {\n          this.drawLetterSpacing(lines[i_1], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText, true);\n        }\n        if (style.fill) {\n          this.drawLetterSpacing(lines[i_1], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText);\n        }\n      }\n    }\n    this.updateTexture();\n  };\n  /**\n   * Render the text with letter-spacing.\n   * @param {string} text - The text to draw\n   * @param {number} x - Horizontal position to draw the text\n   * @param {number} y - Vertical position to draw the text\n   * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   * @private\n   */\n  Text.prototype.drawLetterSpacing = function (text, x, y, isStroke) {\n    if (isStroke === void 0) {\n      isStroke = false;\n    }\n    var style = this._style;\n    // letterSpacing of 0 means normal\n    var letterSpacing = style.letterSpacing;\n    if (letterSpacing === 0) {\n      if (isStroke) {\n        this.context.strokeText(text, x, y);\n      } else {\n        this.context.fillText(text, x, y);\n      }\n      return;\n    }\n    var currentPosition = x;\n    // Using Array.from correctly splits characters whilst keeping emoji together.\n    // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n    // This also doesn't account for emoji that are multiple emoji put together to make something else.\n    // Handling all of this would require a big library itself.\n    // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n    // https://github.com/orling/grapheme-splitter\n    var stringArray = Array.from ? Array.from(text) : text.split('');\n    var previousWidth = this.context.measureText(text).width;\n    var currentWidth = 0;\n    for (var i = 0; i < stringArray.length; ++i) {\n      var currentChar = stringArray[i];\n      if (isStroke) {\n        this.context.strokeText(currentChar, currentPosition, y);\n      } else {\n        this.context.fillText(currentChar, currentPosition, y);\n      }\n      currentWidth = this.context.measureText(text.substring(i + 1)).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  };\n  /**\n   * Updates texture size based on canvas size\n   *\n   * @private\n   */\n  Text.prototype.updateTexture = function () {\n    var canvas = this.canvas;\n    if (this._style.trim) {\n      var trimmed = trimCanvas(canvas);\n      if (trimmed.data) {\n        canvas.width = trimmed.width;\n        canvas.height = trimmed.height;\n        this.context.putImageData(trimmed.data, 0, 0);\n      }\n    }\n    var texture = this._texture;\n    var style = this._style;\n    var padding = style.trim ? 0 : style.padding;\n    var baseTexture = texture.baseTexture;\n    texture.trim.width = texture._frame.width = Math.ceil(canvas.width / this._resolution);\n    texture.trim.height = texture._frame.height = Math.ceil(canvas.height / this._resolution);\n    texture.trim.x = -padding;\n    texture.trim.y = -padding;\n    texture.orig.width = texture._frame.width - padding * 2;\n    texture.orig.height = texture._frame.height - padding * 2;\n    // call sprite onTextureUpdate to update scale if _width or _height were set\n    this._onTextureUpdate();\n    baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n    // Recursively updates transform of all objects from the root to this one\n    this._recursivePostUpdateTransform();\n    this.dirty = false;\n  };\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @protected\n   * @param {PIXI.Renderer} renderer - The renderer\n   */\n  Text.prototype._render = function (renderer) {\n    if (this._autoResolution && this._resolution !== renderer.resolution) {\n      this._resolution = renderer.resolution;\n      this.dirty = true;\n    }\n    this.updateText(true);\n    _super.prototype._render.call(this, renderer);\n  };\n  /**\n   * Gets the local bounds of the text object.\n   *\n   * @param {PIXI.Rectangle} rect - The output rectangle.\n   * @return {PIXI.Rectangle} The bounds.\n   */\n  Text.prototype.getLocalBounds = function (rect) {\n    this.updateText(true);\n    return _super.prototype.getLocalBounds.call(this, rect);\n  };\n  /**\n   * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n   * @protected\n   */\n  Text.prototype._calculateBounds = function () {\n    this.updateText(true);\n    this.calculateVertices();\n    // if we have already done this on THIS frame.\n    this._bounds.addQuad(this.vertexData);\n  };\n  /**\n   * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n   *\n   * @private\n   * @param {object} style - The style.\n   * @param {string[]} lines - The lines of text.\n   * @return {string|number|CanvasGradient} The fill style\n   */\n  Text.prototype._generateFillStyle = function (style, lines, metrics) {\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    var fillStyle = style.fill;\n    if (!Array.isArray(fillStyle)) {\n      return fillStyle;\n    } else if (fillStyle.length === 1) {\n      return fillStyle[0];\n    }\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    var gradient;\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    var dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n    // should also take padding into account, padding can offset the gradient\n    var padding = style.padding || 0;\n    var width = Math.ceil(this.canvas.width / this._resolution) - dropShadowCorrection - padding * 2;\n    var height = Math.ceil(this.canvas.height / this._resolution) - dropShadowCorrection - padding * 2;\n    // make a copy of the style settings, so we can manipulate them later\n    var fill = fillStyle.slice();\n    var fillGradientStops = style.fillGradientStops.slice();\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length) {\n      var lengthPlus1 = fill.length + 1;\n      for (var i = 1; i < lengthPlus1; ++i) {\n        fillGradientStops.push(i / lengthPlus1);\n      }\n    }\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL) {\n      // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n      gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n      // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n      // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n      // There's potential for floating point precision issues at the seams between gradient repeats.\n      // The loop below generates the stops in order, so track the last generated one to prevent\n      // floating point precision from making us go the teeniest bit backwards, resulting in\n      // the first and last colors getting swapped.\n      var lastIterationStop = 0;\n      // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n      var textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n      // textHeight, but as a 0-1 size in global gradient stop space\n      var gradStopLineHeight = textHeight / height;\n      for (var i = 0; i < lines.length; i++) {\n        var thisLineTop = metrics.lineHeight * i;\n        for (var j = 0; j < fill.length; j++) {\n          // 0-1 stop point for the current line, multiplied to global space afterwards\n          var lineStop = 0;\n          if (typeof fillGradientStops[j] === 'number') {\n            lineStop = fillGradientStops[j];\n          } else {\n            lineStop = j / fill.length;\n          }\n          var globalStop = thisLineTop / height + lineStop * gradStopLineHeight;\n          // Prevent color stop generation going backwards from floating point imprecision\n          var clampedStop = Math.max(lastIterationStop, globalStop);\n          clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n          gradient.addColorStop(clampedStop, fill[j]);\n          lastIterationStop = clampedStop;\n        }\n      }\n    } else {\n      // start the gradient at the center left of the canvas, and end at the center right of the canvas\n      gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n      // can just evenly space out the gradients in this case, as multiple lines makes no difference\n      // to an even left to right gradient\n      var totalIterations = fill.length + 1;\n      var currentIteration = 1;\n      for (var i = 0; i < fill.length; i++) {\n        var stop = void 0;\n        if (typeof fillGradientStops[i] === 'number') {\n          stop = fillGradientStops[i];\n        } else {\n          stop = currentIteration / totalIterations;\n        }\n        gradient.addColorStop(stop, fill[i]);\n        currentIteration++;\n      }\n    }\n    return gradient;\n  };\n  /**\n   * Destroys this text object.\n   * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n   * the majority of the time the texture will not be shared with any other Sprites.\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n   */\n  Text.prototype.destroy = function (options) {\n    if (typeof options === 'boolean') {\n      options = {\n        children: options\n      };\n    }\n    options = Object.assign({}, defaultDestroyOptions, options);\n    _super.prototype.destroy.call(this, options);\n    // set canvas width and height to 0 to workaround memory leak in Safari < 13\n    // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n    if (this._ownCanvas) {\n      this.canvas.height = this.canvas.width = 0;\n    }\n    // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n    this.context = null;\n    this.canvas = null;\n    this._style = null;\n  };\n  Object.defineProperty(Text.prototype, \"width\", {\n    /**\n     * The width of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get: function () {\n      this.updateText(true);\n      return Math.abs(this.scale.x) * this._texture.orig.width;\n    },\n    set: function (value) {\n      this.updateText(true);\n      var s = sign(this.scale.x) || 1;\n      this.scale.x = s * value / this._texture.orig.width;\n      this._width = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"height\", {\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get: function () {\n      this.updateText(true);\n      return Math.abs(this.scale.y) * this._texture.orig.height;\n    },\n    set: function (value) {\n      this.updateText(true);\n      var s = sign(this.scale.y) || 1;\n      this.scale.y = s * value / this._texture.orig.height;\n      this._height = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"style\", {\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n    get: function () {\n      // TODO: Can't have different types for getter and setter. The getter shouldn't have the ITextStyle\n      //       since the setter creates the TextStyle. See this thread for more details:\n      //       https://github.com/microsoft/TypeScript/issues/2521\n      return this._style;\n    },\n    set: function (style) {\n      style = style || {};\n      if (style instanceof TextStyle) {\n        this._style = style;\n      } else {\n        this._style = new TextStyle(style);\n      }\n      this.localStyleID = -1;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"text\", {\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._text;\n    },\n    set: function (text) {\n      text = String(text === null || text === undefined ? '' : text);\n      if (this._text === text) {\n        return;\n      }\n      this._text = text;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"resolution\", {\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get: function () {\n      return this._resolution;\n    },\n    set: function (value) {\n      this._autoResolution = false;\n      if (this._resolution === value) {\n        return;\n      }\n      this._resolution = value;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Text;\n}(Sprite);\nexport { TEXT_GRADIENT, Text, TextMetrics, TextStyle };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","TEXT_GRADIENT","defaultStyle","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","Math","PI","dropShadowBlur","dropShadowColor","dropShadowDistance","fill","fillGradientType","LINEAR_VERTICAL","fillGradientStops","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","leading","genericFontFamilies","TextStyle","style","styleID","reset","deepCopyProperties","clone","clonedProperties","defineProperty","get","_align","set","_breakWords","_dropShadow","_dropShadowAlpha","_dropShadowAngle","_dropShadowBlur","_dropShadowColor","outputColor","getColor","_dropShadowDistance","_fill","_fillGradientType","_fillGradientStops","areArraysEqual","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","_lineHeight","_leading","_lineJoin","_miterLimit","_padding","_stroke","_strokeThickness","_textBaseline","_trim","_whiteSpace","_wordWrap","_wordWrapWidth","toFontString","fontSizeString","fontFamilies","isArray","split","i","length","test","indexOf","join","getSingleColor","color","hex2string","replace","array1","array2","target","source","propertyObj","prop","slice","TextMetrics","text","width","height","lines","lineWidths","maxLineWidth","fontProperties","measureText","canvas","_canvas","undefined","font","measureFont","ascent","context","getContext","outputText","lineWidth","max","line","cache","collapseSpaces","collapseNewlines","canPrependSpaces","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","characters","wordWrapSplit","j","char","k","nextChar","lastChar","canBreakChars","characterWidth","isLastToken","newLine","trimRight","key","spacing","_newlines","charCodeAt","_breakingSpaces","push","_token","_char","_nextChar","_index","_fonts","properties","descent","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","BASELINE_MULTIPLIER","fillStyle","fillRect","fillText","imagedata","getImageData","data","pixels","idx","stop","clearMetrics","c","OffscreenCanvas","document","createElement","ex","defaultDestroyOptions","texture","children","baseTexture","Text","_super","_this","ownCanvas","Texture","from","orig","Rectangle","call","_ownCanvas","_resolution","settings","RESOLUTION","_autoResolution","_text","_style","_styleListener","_font","localStyleID","updateText","respectDirty","dirty","measured","scale","clearRect","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","resolution","strokeStyle","rgb","hex2rgb","string2hex","shadowColor","shadowBlur","shadowOffsetX","cos","shadowOffsetY","sin","_generateFillStyle","i_1","drawLetterSpacing","updateTexture","x","y","isStroke","strokeText","currentPosition","stringArray","previousWidth","currentWidth","currentChar","substring","trimmed","trimCanvas","putImageData","_texture","_frame","_onTextureUpdate","setRealSize","_recursivePostUpdateTransform","_render","renderer","getLocalBounds","rect","_calculateBounds","calculateVertices","_bounds","addQuad","vertexData","metrics","gradient","dropShadowCorrection","lengthPlus1","unshift","createLinearGradient","lastIterationStop","textHeight","gradStopLineHeight","thisLineTop","lineStop","globalStop","clampedStop","min","addColorStop","totalIterations","currentIteration","destroy","options","assign","abs","value","s","sign","_width","_height","String","Sprite"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/text/src/const.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/text/src/TextStyle.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/text/src/TextMetrics.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/text/src/Text.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport enum TEXT_GRADIENT {\n    LINEAR_VERTICAL = 0,\n    LINEAR_HORIZONTAL = 1\n}\n","// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nexport type TextStyleAlign = 'left'|'center'|'right';\nexport type TextStyleFill = string|string[]|number|number[]|CanvasGradient|CanvasPattern;\nexport type TextStyleFontStyle = 'normal'|'italic'|'oblique';\nexport type TextStyleFontVariant = 'normal'|'small-caps';\nexport type TextStyleFontWeight = 'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900';\nexport type TextStyleLineJoin = 'miter'|'round'|'bevel';\nexport type TextStyleTextBaseline = 'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom';\nexport type TextStyleWhiteSpace = 'normal'|'pre'|'pre-line';\n\nexport interface ITextStyle {\n    align: TextStyleAlign;\n    breakWords: boolean;\n    dropShadow: boolean;\n    dropShadowAlpha: number;\n    dropShadowAngle: number;\n    dropShadowBlur: number;\n    dropShadowColor: string|number;\n    dropShadowDistance: number;\n    fill: TextStyleFill;\n    fillGradientType: TEXT_GRADIENT;\n    fillGradientStops: number[];\n    fontFamily: string | string[];\n    fontSize: number | string;\n    fontStyle: TextStyleFontStyle;\n    fontVariant: TextStyleFontVariant;\n    fontWeight: TextStyleFontWeight;\n    letterSpacing: number;\n    lineHeight: number;\n    lineJoin: TextStyleLineJoin;\n    miterLimit: number;\n    padding: number;\n    stroke: string|number;\n    strokeThickness: number;\n    textBaseline: TextStyleTextBaseline;\n    trim: boolean;\n    whiteSpace: TextStyleWhiteSpace;\n    wordWrap: boolean;\n    wordWrapWidth: number;\n    leading: number;\n}\n\nconst defaultStyle: ITextStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\nexport class TextStyle implements ITextStyle\n{\n    public styleID: number;\n\n    protected _align: TextStyleAlign;\n    protected _breakWords: boolean;\n    protected _dropShadow: boolean;\n    protected _dropShadowAlpha: number;\n    protected _dropShadowAngle: number;\n    protected _dropShadowBlur: number;\n    protected _dropShadowColor: string|number;\n    protected _dropShadowDistance: number;\n    protected _fill: TextStyleFill;\n    protected _fillGradientType: TEXT_GRADIENT;\n    protected _fillGradientStops: number[];\n    protected _fontFamily: string|string[];\n    protected _fontSize: number|string;\n    protected _fontStyle: TextStyleFontStyle;\n    protected _fontVariant: TextStyleFontVariant;\n    protected _fontWeight: TextStyleFontWeight;\n    protected _letterSpacing: number;\n    protected _lineHeight: number;\n    protected _lineJoin: TextStyleLineJoin;\n    protected _miterLimit: number;\n    protected _padding: number;\n    protected _stroke: string|number;\n    protected _strokeThickness: number;\n    protected _textBaseline: TextStyleTextBaseline;\n    protected _trim: boolean;\n    protected _whiteSpace: TextStyleWhiteSpace;\n    protected _wordWrap: boolean;\n    protected _wordWrapWidth: number;\n    protected _leading: number;\n\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', '800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style: Partial<ITextStyle>)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        const clonedProperties: Partial<ITextStyle> = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    public reset(): void\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n    set align(align: TextStyleAlign)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords(): boolean\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords: boolean)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow(): boolean\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow: boolean)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha(): number\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha: number)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle(): number\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle: number)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur(): number\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur: number)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor(): number | string\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor: number | string)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance(): number\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance: number)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill(): TextStyleFill\n    {\n        return this._fill;\n    }\n    set fill(fill: TextStyleFill)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n        //       without casting here.\n        const outputColor = getColor(fill as any);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get fillGradientType(): TEXT_GRADIENT\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType: TEXT_GRADIENT)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get fillGradientStops(): number[]\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops: number[])\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get fontFamily(): string | string[]\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily: string | string[])\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get fontSize(): number | string\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize: number | string)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle(): TextStyleFontStyle\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle: TextStyleFontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant(): TextStyleFontVariant\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant: TextStyleFontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight(): TextStyleFontWeight\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight: TextStyleFontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing: number)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight(): number\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight: number)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading(): number\n    {\n        return this._leading;\n    }\n    set leading(leading: number)\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin(): TextStyleLineJoin\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin: TextStyleLineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit(): number\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit: number)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding(): number\n    {\n        return this._padding;\n    }\n    set padding(padding: number)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get stroke(): string | number\n    {\n        return this._stroke;\n    }\n    set stroke(stroke: string | number)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness(): number\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness: number)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline(): TextStyleTextBaseline\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline: TextStyleTextBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim(): boolean\n    {\n        return this._trim;\n    }\n    set trim(trim: boolean)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace(): TextStyleWhiteSpace\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace: TextStyleWhiteSpace)\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap(): boolean\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap: boolean)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth(): number\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth: number)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    public toFontString(): string\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies: string|string[] = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            (fontFamilies as string[])[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {string|number} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color: string|number): string\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if (typeof color === 'string')\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {string|number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color: (string|number)[]): string[];\nfunction getColor(color: string|number): string;\nfunction getColor(color: string|number|(string|number)[]): string|string[]\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color as string[];\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 - First array to compare\n * @param {Array} array2 - Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual<T>(array1: T[], array2: T[]): boolean\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target - Target object to copy properties into\n * @param {Object} source - Source object for the properties to copy\n * @param {string} propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target: Record<string, any>, source: Record<string, any>, propertyObj: Record<string, any>): void {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n","import { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\ninterface IFontMetrics {\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = { [key: string]: number };\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    public text: string;\n    public style: TextStyle;\n    public width: number;\n    public height: number;\n    public lines: string[];\n    public lineWidths: number[];\n    public lineHeight: number;\n    public maxLineWidth: number;\n    public fontProperties: IFontMetrics;\n\n    public static METRICS_STRING: string;\n    public static BASELINE_SYMBOL: string;\n    public static BASELINE_MULTIPLIER: number;\n\n    // TODO: These should be protected but they're initialized outside of the class.\n    public static _canvas: HTMLCanvasElement|OffscreenCanvas;\n    public static _context: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D;\n    public static _fonts: { [font: string]: IFontMetrics };\n    public static _newlines: number[];\n    public static _breakingSpaces: number[];\n\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {string[]} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {number[]} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        /**\n         * The text that was measured\n         *\n         * @member {string}\n         */\n        this.text = text;\n\n        /**\n         * The style that was measured\n         *\n         * @member {PIXI.TextStyle}\n         */\n        this.style = style;\n\n        /**\n         * The measured width of the text\n         *\n         * @member {number}\n         */\n        this.width = width;\n\n        /**\n         * The measured height of the text\n         *\n         * @member {number}\n         */\n        this.height = height;\n\n        /**\n         * An array of lines of the text broken by new lines and wrapping is specified in style\n         *\n         * @member {string[]}\n         */\n        this.lines = lines;\n\n        /**\n         * An array of the line widths for each line matched to `lines`\n         *\n         * @member {number[]}\n         */\n        this.lineWidths = lineWidths;\n\n        /**\n         * The measured line height for this style\n         *\n         * @member {number}\n         */\n        this.lineHeight = lineHeight;\n\n        /**\n         * The maximum line width for all measured lines\n         *\n         * @member {number}\n         */\n        this.maxLineWidth = maxLineWidth;\n\n        /**\n         * The font properties object from TextMetrics.measureFont\n         *\n         * @member {PIXI.IFontMetrics}\n         */\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    public static measureText(text: string, style: TextStyle, wordWrap: boolean, canvas = TextMetrics._canvas): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    private static wordWrap(text: string, style: TextStyle, canvas = TextMetrics._canvas): string\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = {};\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}  A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            - The key\n     * @param  {number}                    letterSpacing  - The letter spacing\n     * @param  {object}                    cache          - The cache\n     * @param  {CanvasRenderingContext2D}  context        - The canvas context\n     * @return {number}                    The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (width === undefined)\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace - The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace - The white space\n     * @return {boolean}  should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text - The text\n     * @return {string}  trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char - The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * @private\n     * @param  {string}  char - The character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    private static isBreakingSpace(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text - The text\n     * @return {string[]}  A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n\n            if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  token       - The token\n     * @param  {boolean}  breakWords - The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  char        - The character\n     * @param  {string}  nextChar    - The next character\n     * @param  {string}  token       - The token/word the characters are from\n     * @param  {number}  index       - The index in the token of the char\n     * @param  {boolean}  breakWords - The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  {string}  token - The token to split\n     * @return {string[]} The characters of the token\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.IFontMetrics} Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\nconst canvas = ((): HTMLCanvasElement|OffscreenCanvas =>\n{\n    try\n    {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n\n        if (context && context.measureText)\n        {\n            return c;\n        }\n\n        return document.createElement('canvas');\n    }\n    catch (ex)\n    {\n        return document.createElement('canvas');\n    }\n})();\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n","/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture  } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Renderer } from '@pixi/core';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the next,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    public canvas: HTMLCanvasElement;\n    public context: CanvasRenderingContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    _resolution: number;\n    _autoResolution: boolean;\n    protected _text: string;\n    protected _font: string;\n    protected _style: TextStyle;\n    protected _styleListener: () => void;\n    private _ownCanvas: boolean;\n\n    /**\n     * @param {string} text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n     */\n    constructor(text: string, style: Partial<ITextStyle>|TextStyle, canvas: HTMLCanvasElement)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = document.createElement('canvas');\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        /**\n         * Keep track if this Text object created it's own canvas\n         * element (`true`) or uses the constructor argument (`false`).\n         * Used to workaround a GC issues with Safari < 13 when\n         * destroying Text. See `destroy` for more info.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._ownCanvas = ownCanvas;\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = canvas;\n\n        /**\n         * The canvas 2d context that everything is drawn with\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         * @member {number}\n         * @default 1\n         */\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = null;\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._style = null;\n        /**\n         * Private listener to track style changes.\n         *\n         * @member {Function}\n         * @private\n         */\n        this._styleListener = null;\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {string}\n         * @private\n         */\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     *\n     * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil((Math.max(1, width) + (style.padding * 2)) * this._resolution);\n        this.canvas.height = Math.ceil((Math.max(1, height) + (style.padding * 2)) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            const dsOffsetText = isShadowPass ? height * 2 : 0; // we only want the drop shadow, so put text way off-screen\n            const dsOffsetShadow = dsOffsetText * this.resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = style.dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * style.dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = '0';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param {string} text - The text to draw\n     * @param {number} x - Horizontal position to draw the text\n     * @param {number} y - Vertical position to draw the text\n     * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     * @private\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        if (letterSpacing === 0)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            currentWidth = this.context.measureText(text.substring(i + 1)).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /**\n     * Updates texture size based on canvas size\n     *\n     * @private\n     */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = Math.ceil(canvas.width / this._resolution);\n        texture.trim.height = texture._frame.height = Math.ceil(canvas.height / this._resolution);\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        // Recursively updates transform of all objects from the root to this one\n        this._recursivePostUpdateTransform();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    public getLocalBounds(rect: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @private\n     * @param {object} style - The style.\n     * @param {string[]} lines - The lines of text.\n     * @return {string|number|CanvasGradient} The fill style\n     */\n    private _generateFillStyle(style: TextStyle, lines: string[], metrics: TextMetrics): string|CanvasGradient|CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[]|CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = Math.ceil(this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = Math.ceil(this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // There's potential for floating point precision issues at the seams between gradient repeats.\n            // The loop below generates the stops in order, so track the last generated one to prevent\n            // floating point precision from making us go the teeniest bit backwards, resulting in\n            // the first and last colors getting swapped.\n            let lastIterationStop = 0;\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            // textHeight, but as a 0-1 size in global gradient stop space\n            const gradStopLineHeight = textHeight / height;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const thisLineTop = metrics.lineHeight * i;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                    // Prevent color stop generation going backwards from floating point imprecision\n                    let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                    clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                    gradient.addColorStop(clampedStop, fill[j]);\n                    lastIterationStop = clampedStop;\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options: IDestroyOptions|boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /**\n     * The width of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n    get style(): TextStyle|Partial<ITextStyle>\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the ITextStyle\n        //       since the setter creates the TextStyle. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        return this._style;\n    }\n\n    set style(style: TextStyle|Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}