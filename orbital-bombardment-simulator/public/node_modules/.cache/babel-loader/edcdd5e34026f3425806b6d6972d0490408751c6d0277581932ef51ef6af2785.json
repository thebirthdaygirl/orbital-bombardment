{"ast":null,"code":"/*!\n * @pixi/sprite-animated - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/sprite-animated is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * let alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * let textureArray = [];\n *\n * for (let i=0; i < 4; i++)\n * {\n *      let texture = PIXI.Texture.from(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * let animatedSprite = new PIXI.AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   animatedSprite = new PIXI.AnimatedSprite(sheet.animations[\"image_sequence\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nvar AnimatedSprite = /** @class */function (_super) {\n  __extends(AnimatedSprite, _super);\n  /**\n   * @param {PIXI.Texture[]|PIXI.AnimatedSprite.FrameObject[]} textures - An array of {@link PIXI.Texture} or frame\n   *  objects that make up the animation.\n   * @param {boolean} [autoUpdate=true] - Whether to use PIXI.Ticker.shared to auto update animation time.\n   */\n  function AnimatedSprite(textures, autoUpdate) {\n    if (autoUpdate === void 0) {\n      autoUpdate = true;\n    }\n    var _this = _super.call(this, textures[0] instanceof Texture ? textures[0] : textures[0].texture) || this;\n    /**\n     * @type {PIXI.Texture[]}\n     * @private\n     */\n    _this._textures = null;\n    /**\n     * @type {number[]}\n     * @private\n     */\n    _this._durations = null;\n    /**\n     * `true` uses PIXI.Ticker.shared to auto update animation time.\n     *\n     * @type {boolean}\n     * @default true\n     * @private\n     */\n    _this._autoUpdate = autoUpdate;\n    /**\n     * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update animation time.\n     *\n     * @type {boolean}\n     * @default false\n     * @private\n     */\n    _this._isConnectedToTicker = false;\n    /**\n     * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.\n     *\n     * @member {number}\n     * @default 1\n     */\n    _this.animationSpeed = 1;\n    /**\n     * Whether or not the animate sprite repeats after playing.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    _this.loop = true;\n    /**\n     * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n     *\n     * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n     * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n     * of the frame (e.g. left foot).\n     *\n     * Note: Enabling this will override any previously set `anchor` on each frame change.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    _this.updateAnchor = false;\n    /**\n     * User-assigned function to call when an AnimatedSprite finishes playing.\n     *\n     * @example\n     * animation.onComplete = function () {\n     *   // finished!\n     * };\n     * @member {Function}\n     */\n    _this.onComplete = null;\n    /**\n     * User-assigned function to call when an AnimatedSprite changes which texture is being rendered.\n     *\n     * @example\n     * animation.onFrameChange = function () {\n     *   // updated!\n     * };\n     * @member {Function}\n     */\n    _this.onFrameChange = null;\n    /**\n     * User-assigned function to call when `loop` is true, and an AnimatedSprite is played and\n     * loops around to start again.\n     *\n     * @example\n     * animation.onLoop = function () {\n     *   // looped!\n     * };\n     * @member {Function}\n     */\n    _this.onLoop = null;\n    /**\n     * Elapsed time since animation has been started, used internally to display current texture.\n     *\n     * @member {number}\n     * @private\n     */\n    _this._currentTime = 0;\n    _this._playing = false;\n    /**\n     * The texture index that was displayed last time\n     *\n     * @member {number}\n     * @private\n     */\n    _this._previousFrame = null;\n    _this.textures = textures;\n    return _this;\n  }\n  /**\n   * Stops the AnimatedSprite.\n   *\n   */\n  AnimatedSprite.prototype.stop = function () {\n    if (!this._playing) {\n      return;\n    }\n    this._playing = false;\n    if (this._autoUpdate && this._isConnectedToTicker) {\n      Ticker.shared.remove(this.update, this);\n      this._isConnectedToTicker = false;\n    }\n  };\n  /**\n   * Plays the AnimatedSprite.\n   *\n   */\n  AnimatedSprite.prototype.play = function () {\n    if (this._playing) {\n      return;\n    }\n    this._playing = true;\n    if (this._autoUpdate && !this._isConnectedToTicker) {\n      Ticker.shared.add(this.update, this, UPDATE_PRIORITY.HIGH);\n      this._isConnectedToTicker = true;\n    }\n  };\n  /**\n   * Stops the AnimatedSprite and goes to a specific frame.\n   *\n   * @param {number} frameNumber - Frame index to stop at.\n   */\n  AnimatedSprite.prototype.gotoAndStop = function (frameNumber) {\n    this.stop();\n    var previousFrame = this.currentFrame;\n    this._currentTime = frameNumber;\n    if (previousFrame !== this.currentFrame) {\n      this.updateTexture();\n    }\n  };\n  /**\n   * Goes to a specific frame and begins playing the AnimatedSprite.\n   *\n   * @param {number} frameNumber - Frame index to start at.\n   */\n  AnimatedSprite.prototype.gotoAndPlay = function (frameNumber) {\n    var previousFrame = this.currentFrame;\n    this._currentTime = frameNumber;\n    if (previousFrame !== this.currentFrame) {\n      this.updateTexture();\n    }\n    this.play();\n  };\n  /**\n   * Updates the object transform for rendering.\n   *\n   * @param {number} deltaTime - Time since last tick.\n   */\n  AnimatedSprite.prototype.update = function (deltaTime) {\n    var elapsed = this.animationSpeed * deltaTime;\n    var previousFrame = this.currentFrame;\n    if (this._durations !== null) {\n      var lag = this._currentTime % 1 * this._durations[this.currentFrame];\n      lag += elapsed / 60 * 1000;\n      while (lag < 0) {\n        this._currentTime--;\n        lag += this._durations[this.currentFrame];\n      }\n      var sign = Math.sign(this.animationSpeed * deltaTime);\n      this._currentTime = Math.floor(this._currentTime);\n      while (lag >= this._durations[this.currentFrame]) {\n        lag -= this._durations[this.currentFrame] * sign;\n        this._currentTime += sign;\n      }\n      this._currentTime += lag / this._durations[this.currentFrame];\n    } else {\n      this._currentTime += elapsed;\n    }\n    if (this._currentTime < 0 && !this.loop) {\n      this.gotoAndStop(0);\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (this._currentTime >= this._textures.length && !this.loop) {\n      this.gotoAndStop(this._textures.length - 1);\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (previousFrame !== this.currentFrame) {\n      if (this.loop && this.onLoop) {\n        if (this.animationSpeed > 0 && this.currentFrame < previousFrame) {\n          this.onLoop();\n        } else if (this.animationSpeed < 0 && this.currentFrame > previousFrame) {\n          this.onLoop();\n        }\n      }\n      this.updateTexture();\n    }\n  };\n  /**\n   * Updates the displayed texture to match the current frame index.\n   *\n   * @private\n   */\n  AnimatedSprite.prototype.updateTexture = function () {\n    var currentFrame = this.currentFrame;\n    if (this._previousFrame === currentFrame) {\n      return;\n    }\n    this._previousFrame = currentFrame;\n    this._texture = this._textures[currentFrame];\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    this._cachedTint = 0xFFFFFF;\n    this.uvs = this._texture._uvs.uvsFloat32;\n    if (this.updateAnchor) {\n      this._anchor.copyFrom(this._texture.defaultAnchor);\n    }\n    if (this.onFrameChange) {\n      this.onFrameChange(this.currentFrame);\n    }\n  };\n  /**\n   * Stops the AnimatedSprite and destroys it.\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value.\n   * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n   * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n   */\n  AnimatedSprite.prototype.destroy = function (options) {\n    this.stop();\n    _super.prototype.destroy.call(this, options);\n    this.onComplete = null;\n    this.onFrameChange = null;\n    this.onLoop = null;\n  };\n  /**\n   * A short hand way of creating an AnimatedSprite from an array of frame ids.\n   *\n   * @static\n   * @param {string[]} frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n   * @return {PIXI.AnimatedSprite} The new animated sprite with the specified frames.\n   */\n  AnimatedSprite.fromFrames = function (frames) {\n    var textures = [];\n    for (var i = 0; i < frames.length; ++i) {\n      textures.push(Texture.from(frames[i]));\n    }\n    return new AnimatedSprite(textures);\n  };\n  /**\n   * A short hand way of creating an AnimatedSprite from an array of image ids.\n   *\n   * @static\n   * @param {string[]} images - The array of image urls the AnimatedSprite will use as its texture frames.\n   * @return {PIXI.AnimatedSprite} The new animate sprite with the specified images as frames.\n   */\n  AnimatedSprite.fromImages = function (images) {\n    var textures = [];\n    for (var i = 0; i < images.length; ++i) {\n      textures.push(Texture.from(images[i]));\n    }\n    return new AnimatedSprite(textures);\n  };\n  Object.defineProperty(AnimatedSprite.prototype, \"totalFrames\", {\n    /**\n     * The total number of frames in the AnimatedSprite. This is the same as number of textures\n     * assigned to the AnimatedSprite.\n     *\n     * @readonly\n     * @member {number}\n     * @default 0\n     */\n    get: function () {\n      return this._textures.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AnimatedSprite.prototype, \"textures\", {\n    /**\n     * The array of textures used for this AnimatedSprite.\n     *\n     * @member {PIXI.Texture[]}\n     */\n    get: function () {\n      return this._textures;\n    },\n    set: function (value) {\n      if (value[0] instanceof Texture) {\n        this._textures = value;\n        this._durations = null;\n      } else {\n        this._textures = [];\n        this._durations = [];\n        for (var i = 0; i < value.length; i++) {\n          this._textures.push(value[i].texture);\n          this._durations.push(value[i].time);\n        }\n      }\n      this._previousFrame = null;\n      this.gotoAndStop(0);\n      this.updateTexture();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AnimatedSprite.prototype, \"currentFrame\", {\n    /**\n    * The AnimatedSprites current frame index.\n    *\n    * @member {number}\n    * @readonly\n    */\n    get: function () {\n      var currentFrame = Math.floor(this._currentTime) % this._textures.length;\n      if (currentFrame < 0) {\n        currentFrame += this._textures.length;\n      }\n      return currentFrame;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AnimatedSprite.prototype, \"playing\", {\n    /**\n     * Indicates if the AnimatedSprite is currently playing.\n     *\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._playing;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AnimatedSprite.prototype, \"autoUpdate\", {\n    /**\n     * Whether to use PIXI.Ticker.shared to auto update animation time\n     *\n     * @member {boolean}\n     */\n    get: function () {\n      return this._autoUpdate;\n    },\n    set: function (value) {\n      if (value !== this._autoUpdate) {\n        this._autoUpdate = value;\n        if (!this._autoUpdate && this._isConnectedToTicker) {\n          Ticker.shared.remove(this.update, this);\n          this._isConnectedToTicker = false;\n        } else if (this._autoUpdate && !this._isConnectedToTicker && this._playing) {\n          Ticker.shared.add(this.update, this);\n          this._isConnectedToTicker = true;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AnimatedSprite;\n}(Sprite);\n/**\n * @memberof PIXI.AnimatedSprite\n * @typedef {object} FrameObject\n * @type {object}\n * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame\n * @property {number} time - the duration of the frame in ms\n */\n\nexport { AnimatedSprite };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","AnimatedSprite","_super","textures","autoUpdate","_this","call","Texture","texture","_textures","_durations","_autoUpdate","_isConnectedToTicker","animationSpeed","loop","updateAnchor","onComplete","onFrameChange","onLoop","_currentTime","_playing","_previousFrame","stop","Ticker","shared","remove","update","play","add","UPDATE_PRIORITY","HIGH","gotoAndStop","frameNumber","previousFrame","currentFrame","updateTexture","gotoAndPlay","deltaTime","elapsed","lag","sign","Math","floor","length","_texture","_textureID","_textureTrimmedID","_cachedTint","uvs","_uvs","uvsFloat32","_anchor","copyFrom","defaultAnchor","destroy","options","fromFrames","frames","i","push","from","fromImages","images","defineProperty","get","set","value","time","Sprite"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/sprite-animated/src/AnimatedSprite.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * let alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * let textureArray = [];\n *\n * for (let i=0; i < 4; i++)\n * {\n *      let texture = PIXI.Texture.from(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * let animatedSprite = new PIXI.AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   animatedSprite = new PIXI.AnimatedSprite(sheet.animations[\"image_sequence\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class AnimatedSprite extends Sprite\n{\n    public animationSpeed: number;\n    public loop: boolean;\n    public updateAnchor: boolean;\n    public onComplete: () => void;\n    public onFrameChange: (currentFrame: number) => void;\n    public onLoop: () => void;\n\n    private _playing: boolean;\n    private _textures: Texture[];\n    private _durations: number[];\n    private _autoUpdate: boolean;\n    private _isConnectedToTicker: boolean;\n    private _currentTime: number;\n    private _previousFrame: number;\n\n    /**\n     * @param {PIXI.Texture[]|PIXI.AnimatedSprite.FrameObject[]} textures - An array of {@link PIXI.Texture} or frame\n     *  objects that make up the animation.\n     * @param {boolean} [autoUpdate=true] - Whether to use PIXI.Ticker.shared to auto update animation time.\n     */\n    constructor(textures: Texture[]|FrameObject[], autoUpdate = true)\n    {\n        super(textures[0] instanceof Texture ? textures[0] : textures[0].texture);\n\n        /**\n         * @type {PIXI.Texture[]}\n         * @private\n         */\n        this._textures = null;\n\n        /**\n         * @type {number[]}\n         * @private\n         */\n        this._durations = null;\n\n        /**\n         * `true` uses PIXI.Ticker.shared to auto update animation time.\n         *\n         * @type {boolean}\n         * @default true\n         * @private\n         */\n        this._autoUpdate = autoUpdate;\n\n        /**\n         * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update animation time.\n         *\n         * @type {boolean}\n         * @default false\n         * @private\n         */\n        this._isConnectedToTicker = false;\n\n        /**\n         * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.animationSpeed = 1;\n\n        /**\n         * Whether or not the animate sprite repeats after playing.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.loop = true;\n\n        /**\n         * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n         *\n         * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n         * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n         * of the frame (e.g. left foot).\n         *\n         * Note: Enabling this will override any previously set `anchor` on each frame change.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.updateAnchor = false;\n\n        /**\n         * User-assigned function to call when an AnimatedSprite finishes playing.\n         *\n         * @example\n         * animation.onComplete = function () {\n         *   // finished!\n         * };\n         * @member {Function}\n         */\n        this.onComplete = null;\n\n        /**\n         * User-assigned function to call when an AnimatedSprite changes which texture is being rendered.\n         *\n         * @example\n         * animation.onFrameChange = function () {\n         *   // updated!\n         * };\n         * @member {Function}\n         */\n        this.onFrameChange = null;\n\n        /**\n         * User-assigned function to call when `loop` is true, and an AnimatedSprite is played and\n         * loops around to start again.\n         *\n         * @example\n         * animation.onLoop = function () {\n         *   // looped!\n         * };\n         * @member {Function}\n         */\n        this.onLoop = null;\n\n        /**\n         * Elapsed time since animation has been started, used internally to display current texture.\n         *\n         * @member {number}\n         * @private\n         */\n        this._currentTime = 0;\n\n        this._playing = false;\n\n        /**\n         * The texture index that was displayed last time\n         *\n         * @member {number}\n         * @private\n         */\n        this._previousFrame = null;\n\n        this.textures = textures;\n    }\n\n    /**\n     * Stops the AnimatedSprite.\n     *\n     */\n    public stop(): void\n    {\n        if (!this._playing)\n        {\n            return;\n        }\n\n        this._playing = false;\n        if (this._autoUpdate && this._isConnectedToTicker)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n    }\n\n    /**\n     * Plays the AnimatedSprite.\n     *\n     */\n    public play(): void\n    {\n        if (this._playing)\n        {\n            return;\n        }\n\n        this._playing = true;\n        if (this._autoUpdate && !this._isConnectedToTicker)\n        {\n            Ticker.shared.add(this.update, this, UPDATE_PRIORITY.HIGH);\n            this._isConnectedToTicker = true;\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and goes to a specific frame.\n     *\n     * @param {number} frameNumber - Frame index to stop at.\n     */\n    public gotoAndStop(frameNumber: number): void\n    {\n        this.stop();\n\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = frameNumber;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Goes to a specific frame and begins playing the AnimatedSprite.\n     *\n     * @param {number} frameNumber - Frame index to start at.\n     */\n    public gotoAndPlay(frameNumber: number): void\n    {\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = frameNumber;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n\n        this.play();\n    }\n\n    /**\n     * Updates the object transform for rendering.\n     *\n     * @param {number} deltaTime - Time since last tick.\n     */\n    update(deltaTime: number): void\n    {\n        const elapsed = this.animationSpeed * deltaTime;\n        const previousFrame = this.currentFrame;\n\n        if (this._durations !== null)\n        {\n            let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n\n            lag += elapsed / 60 * 1000;\n\n            while (lag < 0)\n            {\n                this._currentTime--;\n                lag += this._durations[this.currentFrame];\n            }\n\n            const sign = Math.sign(this.animationSpeed * deltaTime);\n\n            this._currentTime = Math.floor(this._currentTime);\n\n            while (lag >= this._durations[this.currentFrame])\n            {\n                lag -= this._durations[this.currentFrame] * sign;\n                this._currentTime += sign;\n            }\n\n            this._currentTime += lag / this._durations[this.currentFrame];\n        }\n        else\n        {\n            this._currentTime += elapsed;\n        }\n\n        if (this._currentTime < 0 && !this.loop)\n        {\n            this.gotoAndStop(0);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (this._currentTime >= this._textures.length && !this.loop)\n        {\n            this.gotoAndStop(this._textures.length - 1);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (previousFrame !== this.currentFrame)\n        {\n            if (this.loop && this.onLoop)\n            {\n                if (this.animationSpeed > 0 && this.currentFrame < previousFrame)\n                {\n                    this.onLoop();\n                }\n                else if (this.animationSpeed < 0 && this.currentFrame > previousFrame)\n                {\n                    this.onLoop();\n                }\n            }\n\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Updates the displayed texture to match the current frame index.\n     *\n     * @private\n     */\n    private updateTexture(): void\n    {\n        const currentFrame = this.currentFrame;\n\n        if (this._previousFrame === currentFrame)\n        {\n            return;\n        }\n\n        this._previousFrame = currentFrame;\n\n        this._texture = this._textures[currentFrame];\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = this._texture._uvs.uvsFloat32;\n\n        if (this.updateAnchor)\n        {\n            this._anchor.copyFrom(this._texture.defaultAnchor);\n        }\n\n        if (this.onFrameChange)\n        {\n            this.onFrameChange(this.currentFrame);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and destroys it.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value.\n     * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n     */\n    public destroy(options: IDestroyOptions|boolean): void\n    {\n        this.stop();\n        super.destroy(options);\n\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of frame ids.\n     *\n     * @static\n     * @param {string[]} frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n     * @return {PIXI.AnimatedSprite} The new animated sprite with the specified frames.\n     */\n    public static fromFrames(frames: string[]): AnimatedSprite\n    {\n        const textures = [];\n\n        for (let i = 0; i < frames.length; ++i)\n        {\n            textures.push(Texture.from(frames[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of image ids.\n     *\n     * @static\n     * @param {string[]} images - The array of image urls the AnimatedSprite will use as its texture frames.\n     * @return {PIXI.AnimatedSprite} The new animate sprite with the specified images as frames.\n     */\n    public static fromImages(images: string[]): AnimatedSprite\n    {\n        const textures = [];\n\n        for (let i = 0; i < images.length; ++i)\n        {\n            textures.push(Texture.from(images[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * The total number of frames in the AnimatedSprite. This is the same as number of textures\n     * assigned to the AnimatedSprite.\n     *\n     * @readonly\n     * @member {number}\n     * @default 0\n     */\n    get totalFrames(): number\n    {\n        return this._textures.length;\n    }\n\n    /**\n     * The array of textures used for this AnimatedSprite.\n     *\n     * @member {PIXI.Texture[]}\n     */\n    get textures(): Texture[]|FrameObject[]\n    {\n        return this._textures;\n    }\n\n    set textures(value: Texture[]|FrameObject[])\n    {\n        if (value[0] instanceof Texture)\n        {\n            this._textures = value as Texture[];\n            this._durations = null;\n        }\n        else\n        {\n            this._textures = [];\n            this._durations = [];\n\n            for (let i = 0; i < value.length; i++)\n            {\n                this._textures.push((value[i] as FrameObject).texture);\n                this._durations.push((value[i] as FrameObject).time);\n            }\n        }\n        this._previousFrame = null;\n        this.gotoAndStop(0);\n        this.updateTexture();\n    }\n\n    /**\n    * The AnimatedSprites current frame index.\n    *\n    * @member {number}\n    * @readonly\n    */\n    get currentFrame(): number\n    {\n        let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n\n        if (currentFrame < 0)\n        {\n            currentFrame += this._textures.length;\n        }\n\n        return currentFrame;\n    }\n\n    /**\n     * Indicates if the AnimatedSprite is currently playing.\n     *\n     * @member {boolean}\n     * @readonly\n     */\n    get playing(): boolean\n    {\n        return this._playing;\n    }\n\n    /**\n     * Whether to use PIXI.Ticker.shared to auto update animation time\n     *\n     * @member {boolean}\n     */\n    get autoUpdate(): boolean\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value: boolean)\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n\n            if (!this._autoUpdate && this._isConnectedToTicker)\n            {\n                Ticker.shared.remove(this.update, this);\n                this._isConnectedToTicker = false;\n            }\n            else if (this._autoUpdate && !this._isConnectedToTicker && this._playing)\n            {\n                Ticker.shared.add(this.update, this);\n                this._isConnectedToTicker = true;\n            }\n        }\n    }\n}\n\nexport interface FrameObject {\n    texture: Texture;\n    time: number;\n}\n\n/**\n * @memberof PIXI.AnimatedSprite\n * @typedef {object} FrameObject\n * @type {object}\n * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame\n * @property {number} time - the duration of the frame in ms\n */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}