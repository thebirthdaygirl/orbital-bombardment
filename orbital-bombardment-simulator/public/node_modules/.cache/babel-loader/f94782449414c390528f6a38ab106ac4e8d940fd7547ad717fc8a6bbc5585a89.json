{"ast":null,"code":"/*!\n * @pixi/spritesheet - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/spritesheet is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { getResolutionOfUrl, url } from '@pixi/utils';\nimport { LoaderResource } from '@pixi/loaders';\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * @class\n * @memberof PIXI\n */\nvar Spritesheet = /** @class */function () {\n  /**\n   * @param {PIXI.BaseTexture|PIXI.Texture} baseTexture - Reference to the source BaseTexture object.\n   * @param {Object} data - Spritesheet image data.\n   * @param {string} [resolutionFilename] - The filename to consider when determining\n   *        the resolution of the spritesheet. If not provided, the imageUrl will\n   *        be used on the BaseTexture.\n   */\n  function Spritesheet(texture, data, resolutionFilename) {\n    if (resolutionFilename === void 0) {\n      resolutionFilename = null;\n    }\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     * @type {PIXI.Texture}\n     * @private\n     */\n    this._texture = texture instanceof Texture ? texture : null;\n    /**\n     * Reference to ths source texture.\n     * @type {PIXI.BaseTexture}\n     */\n    this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link PIXI.Sprite|Sprite}:\n     * ```js\n     * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n     * ```\n     * @member {Object}\n     */\n    this.textures = {};\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n     * ```js\n     * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n     * ```\n     * @member {Object}\n     */\n    this.animations = {};\n    /**\n     * Reference to the original JSON data.\n     * @type {Object}\n     */\n    this.data = data;\n    var resource = this.baseTexture.resource;\n    /**\n     * The resolution of the spritesheet.\n     * @type {number}\n     */\n    this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n    /**\n     * Map of spritesheet frames.\n     * @type {Object}\n     * @private\n     */\n    this._frames = this.data.frames;\n    /**\n     * Collection of frame names.\n     * @type {string[]}\n     * @private\n     */\n    this._frameKeys = Object.keys(this._frames);\n    /**\n     * Current batch index being processed.\n     * @type {number}\n     * @private\n     */\n    this._batchIndex = 0;\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     * @private\n     */\n    this._callback = null;\n  }\n  /**\n   * Generate the resolution from the filename or fallback\n   * to the meta.scale field of the JSON data.\n   *\n   * @private\n   * @param {string} resolutionFilename - The filename to use for resolving\n   *        the default resolution.\n   * @return {number} Resolution to use for spritesheet.\n   */\n  Spritesheet.prototype._updateResolution = function (resolutionFilename) {\n    if (resolutionFilename === void 0) {\n      resolutionFilename = null;\n    }\n    var scale = this.data.meta.scale;\n    // Use a defaultValue of `null` to check if a url-based resolution is set\n    var resolution = getResolutionOfUrl(resolutionFilename, null);\n    // No resolution found via URL\n    if (resolution === null) {\n      // Use the scale value or default to 1\n      resolution = scale !== undefined ? parseFloat(scale) : 1;\n    }\n    // For non-1 resolutions, update baseTexture\n    if (resolution !== 1) {\n      this.baseTexture.setResolution(resolution);\n    }\n    return resolution;\n  };\n  /**\n   * Parser spritesheet from loaded data. This is done asynchronously\n   * to prevent creating too many Texture within a single process.\n   *\n   * @param {Function} callback - Callback when complete returns\n   *        a map of the Textures for this spritesheet.\n   */\n  Spritesheet.prototype.parse = function (callback) {\n    this._batchIndex = 0;\n    this._callback = callback;\n    if (this._frameKeys.length <= Spritesheet.BATCH_SIZE) {\n      this._processFrames(0);\n      this._processAnimations();\n      this._parseComplete();\n    } else {\n      this._nextBatch();\n    }\n  };\n  /**\n   * Process a batch of frames\n   *\n   * @private\n   * @param {number} initialFrameIndex - The index of frame to start.\n   */\n  Spritesheet.prototype._processFrames = function (initialFrameIndex) {\n    var frameIndex = initialFrameIndex;\n    var maxFrames = Spritesheet.BATCH_SIZE;\n    while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length) {\n      var i = this._frameKeys[frameIndex];\n      var data = this._frames[i];\n      var rect = data.frame;\n      if (rect) {\n        var frame = null;\n        var trim = null;\n        var sourceSize = data.trimmed !== false && data.sourceSize ? data.sourceSize : data.frame;\n        var orig = new Rectangle(0, 0, Math.floor(sourceSize.w) / this.resolution, Math.floor(sourceSize.h) / this.resolution);\n        if (data.rotated) {\n          frame = new Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.h) / this.resolution, Math.floor(rect.w) / this.resolution);\n        } else {\n          frame = new Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);\n        }\n        //  Check to see if the sprite is trimmed\n        if (data.trimmed !== false && data.spriteSourceSize) {\n          trim = new Rectangle(Math.floor(data.spriteSourceSize.x) / this.resolution, Math.floor(data.spriteSourceSize.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);\n        }\n        this.textures[i] = new Texture(this.baseTexture, frame, orig, trim, data.rotated ? 2 : 0, data.anchor);\n        // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n        Texture.addToCache(this.textures[i], i);\n      }\n      frameIndex++;\n    }\n  };\n  /**\n   * Parse animations config\n   *\n   * @private\n   */\n  Spritesheet.prototype._processAnimations = function () {\n    var animations = this.data.animations || {};\n    for (var animName in animations) {\n      this.animations[animName] = [];\n      for (var i = 0; i < animations[animName].length; i++) {\n        var frameName = animations[animName][i];\n        this.animations[animName].push(this.textures[frameName]);\n      }\n    }\n  };\n  /**\n   * The parse has completed.\n   *\n   * @private\n   */\n  Spritesheet.prototype._parseComplete = function () {\n    var callback = this._callback;\n    this._callback = null;\n    this._batchIndex = 0;\n    callback.call(this, this.textures);\n  };\n  /**\n   * Begin the next batch of textures.\n   *\n   * @private\n   */\n  Spritesheet.prototype._nextBatch = function () {\n    var _this = this;\n    this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n    this._batchIndex++;\n    setTimeout(function () {\n      if (_this._batchIndex * Spritesheet.BATCH_SIZE < _this._frameKeys.length) {\n        _this._nextBatch();\n      } else {\n        _this._processAnimations();\n        _this._parseComplete();\n      }\n    }, 0);\n  };\n  /**\n   * Destroy Spritesheet and don't use after this.\n   *\n   * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n   */\n  Spritesheet.prototype.destroy = function (destroyBase) {\n    var _a;\n    if (destroyBase === void 0) {\n      destroyBase = false;\n    }\n    for (var i in this.textures) {\n      this.textures[i].destroy();\n    }\n    this._frames = null;\n    this._frameKeys = null;\n    this.data = null;\n    this.textures = null;\n    if (destroyBase) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();\n      this.baseTexture.destroy();\n    }\n    this._texture = null;\n    this.baseTexture = null;\n  };\n  /**\n   * The maximum number of Textures to build per process.\n   *\n   * @type {number}\n   * @default 1000\n   */\n  Spritesheet.BATCH_SIZE = 1000;\n  return Spritesheet;\n}();\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nvar SpritesheetLoader = /** @class */function () {\n  function SpritesheetLoader() {}\n  /**\n   * Called after a resource is loaded.\n   * @see PIXI.Loader.loaderMiddleware\n   * @param {PIXI.LoaderResource} resource\n   * @param {function} next\n   */\n  SpritesheetLoader.use = function (resource, next) {\n    // because this is middleware, it execute in loader context. `this` = loader\n    var loader = this;\n    var imageResourceName = resource.name + \"_image\";\n    // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n    if (!resource.data || resource.type !== LoaderResource.TYPE.JSON || !resource.data.frames || loader.resources[imageResourceName]) {\n      next();\n      return;\n    }\n    var loadOptions = {\n      crossOrigin: resource.crossOrigin,\n      metadata: resource.metadata.imageMetadata,\n      parentResource: resource\n    };\n    var resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl);\n    // load the image for this sheet\n    loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {\n      if (res.error) {\n        next(res.error);\n        return;\n      }\n      var spritesheet = new Spritesheet(res.texture, resource.data, resource.url);\n      spritesheet.parse(function () {\n        resource.spritesheet = spritesheet;\n        resource.textures = spritesheet.textures;\n        next();\n      });\n    });\n  };\n  /**\n   * Get the spritesheets root path\n   * @param {PIXI.LoaderResource} resource - Resource to check path\n   * @param {string} baseUrl - Base root url\n   */\n  SpritesheetLoader.getResourcePath = function (resource, baseUrl) {\n    // Prepend url path unless the resource image is a data url\n    if (resource.isDataUrl) {\n      return resource.data.meta.image;\n    }\n    return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n  };\n  return SpritesheetLoader;\n}();\nexport { Spritesheet, SpritesheetLoader };","map":{"version":3,"names":["Spritesheet","texture","data","resolutionFilename","_texture","Texture","baseTexture","BaseTexture","textures","animations","resource","resolution","_updateResolution","url","_frames","frames","_frameKeys","Object","keys","_batchIndex","_callback","prototype","scale","meta","getResolutionOfUrl","undefined","parseFloat","setResolution","parse","callback","length","BATCH_SIZE","_processFrames","_processAnimations","_parseComplete","_nextBatch","initialFrameIndex","frameIndex","maxFrames","i","rect","frame","trim","sourceSize","trimmed","orig","Rectangle","Math","floor","w","h","rotated","x","y","spriteSourceSize","anchor","addToCache","animName","frameName","push","call","_this","setTimeout","destroy","destroyBase","_a","SpritesheetLoader","use","next","loader","imageResourceName","name","type","LoaderResource","TYPE","JSON","resources","loadOptions","crossOrigin","metadata","imageMetadata","parentResource","resourcePath","getResourcePath","baseUrl","add","onImageLoad","res","error","spritesheet","isDataUrl","image","resolve","replace"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/spritesheet/src/Spritesheet.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/spritesheet/src/SpritesheetLoader.ts"],"sourcesContent":["import { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { getResolutionOfUrl } from '@pixi/utils';\nimport type { Dict } from '@pixi/utils';\nimport type { resources } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\n/**\n * Represents the JSON data for a spritesheet atlas.\n */\nexport interface ISpritesheetFrameData {\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    trimmed?: boolean;\n    rotated?: boolean;\n    sourceSize?: {\n        w: number;\n        h: number;\n    };\n    spriteSourceSize?: {\n        x: number;\n        y: number;\n    };\n    anchor?: IPointData;\n}\n\n/**\n * Atlas format.\n */\nexport interface ISpritesheetData {\n    frames: Dict<ISpritesheetFrameData>;\n    animations?: Dict<string[]>;\n    meta: {\n        scale: string;\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * @class\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /**\n     * The maximum number of Textures to build per process.\n     *\n     * @type {number}\n     * @default 1000\n     */\n    static readonly BATCH_SIZE = 1000;\n\n    public baseTexture: BaseTexture;\n    public textures: Dict<Texture>;\n    public animations: Dict<Texture[]>;\n    public data: ISpritesheetData;\n    public resolution: number;\n\n    private _texture: Texture;\n    private _frames: Dict<ISpritesheetFrameData>;\n    private _frameKeys: string[];\n    private _batchIndex: number;\n    private _callback: (textures: Dict<Texture>) => void;\n\n    /**\n     * @param {PIXI.BaseTexture|PIXI.Texture} baseTexture - Reference to the source BaseTexture object.\n     * @param {Object} data - Spritesheet image data.\n     * @param {string} [resolutionFilename] - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture: BaseTexture | Texture, data: ISpritesheetData, resolutionFilename: string = null)\n    {\n        /**\n         * Reference to original source image from the Loader. This reference is retained so we\n         * can destroy the Texture later on. It is never used internally.\n         * @type {PIXI.Texture}\n         * @private\n         */\n        this._texture = texture instanceof Texture ? texture : null;\n\n        /**\n         * Reference to ths source texture.\n         * @type {PIXI.BaseTexture}\n         */\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n\n        /**\n         * A map containing all textures of the sprite sheet.\n         * Can be used to create a {@link PIXI.Sprite|Sprite}:\n         * ```js\n         * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n         * ```\n         * @member {Object}\n         */\n        this.textures = {};\n\n        /**\n         * A map containing the textures for each animation.\n         * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n         * ```js\n         * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n         * ```\n         * @member {Object}\n         */\n        this.animations = {};\n\n        /**\n         * Reference to the original JSON data.\n         * @type {Object}\n         */\n        this.data = data;\n\n        const resource = this.baseTexture.resource as resources.ImageResource;\n\n        /**\n         * The resolution of the spritesheet.\n         * @type {number}\n         */\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n\n        /**\n         * Map of spritesheet frames.\n         * @type {Object}\n         * @private\n         */\n        this._frames = this.data.frames;\n\n        /**\n         * Collection of frame names.\n         * @type {string[]}\n         * @private\n         */\n        this._frameKeys = Object.keys(this._frames);\n\n        /**\n         * Current batch index being processed.\n         * @type {number}\n         * @private\n         */\n        this._batchIndex = 0;\n\n        /**\n         * Callback when parse is completed.\n         * @type {Function}\n         * @private\n         */\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     *\n     * @private\n     * @param {string} resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @return {number} Resolution to use for spritesheet.\n     */\n    private _updateResolution(resolutionFilename: string = null): number\n    {\n        const { scale } = this.data.meta;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     *\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    public parse(callback: () => void): void\n    {\n        this._batchIndex = 0;\n        this._callback = callback;\n\n        if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n        {\n            this._processFrames(0);\n            this._processAnimations();\n            this._parseComplete();\n        }\n        else\n        {\n            this._nextBatch();\n        }\n    }\n\n    /**\n     * Process a batch of frames\n     *\n     * @private\n     * @param {number} initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /**\n     * Parse animations config\n     *\n     * @private\n     */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /**\n     * The parse has completed.\n     *\n     * @private\n     */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /**\n     * Begin the next batch of textures.\n     *\n     * @private\n     */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     *\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n    }\n}\n","import { url } from '@pixi/utils';\nimport { Spritesheet } from './Spritesheet';\nimport { LoaderResource } from '@pixi/loaders';\nimport type { Loader, ILoaderResource } from '@pixi/loaders';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class SpritesheetLoader\n{\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(resource: ILoaderResource, next: (...args: unknown[]) => void): void\n    {\n        // because this is middleware, it execute in loader context. `this` = loader\n        const loader = (this as any) as Loader;\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== LoaderResource.TYPE.JSON\n            || !resource.data.frames\n            || loader.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl);\n\n        // load the image for this sheet\n        loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res: ILoaderResource)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    }\n\n    /**\n     * Get the spritesheets root path\n     * @param {PIXI.LoaderResource} resource - Resource to check path\n     * @param {string} baseUrl - Base root url\n     */\n    static getResourcePath(resource: ILoaderResource, baseUrl: string): string\n    {\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl)\n        {\n            return resource.data.meta.image;\n        }\n\n        return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}