{"ast":null,"code":"/*!\n * @pixi/mesh-extras - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/mesh-extras is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { MeshGeometry, MeshMaterial, Mesh } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar PlaneGeometry = /** @class */function (_super) {\n  __extends(PlaneGeometry, _super);\n  function PlaneGeometry(width, height, segWidth, segHeight) {\n    if (width === void 0) {\n      width = 100;\n    }\n    if (height === void 0) {\n      height = 100;\n    }\n    if (segWidth === void 0) {\n      segWidth = 10;\n    }\n    if (segHeight === void 0) {\n      segHeight = 10;\n    }\n    var _this = _super.call(this) || this;\n    _this.segWidth = segWidth;\n    _this.segHeight = segHeight;\n    _this.width = width;\n    _this.height = height;\n    _this.build();\n    return _this;\n  }\n  /**\n   * Refreshes plane coordinates\n   * @private\n   */\n  PlaneGeometry.prototype.build = function () {\n    var total = this.segWidth * this.segHeight;\n    var verts = [];\n    var uvs = [];\n    var indices = [];\n    var segmentsX = this.segWidth - 1;\n    var segmentsY = this.segHeight - 1;\n    var sizeX = this.width / segmentsX;\n    var sizeY = this.height / segmentsY;\n    for (var i = 0; i < total; i++) {\n      var x = i % this.segWidth;\n      var y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n    var totalSub = segmentsX * segmentsY;\n    for (var i = 0; i < totalSub; i++) {\n      var xpos = i % segmentsX;\n      var ypos = i / segmentsX | 0;\n      var value = ypos * this.segWidth + xpos;\n      var value2 = ypos * this.segWidth + xpos + 1;\n      var value3 = (ypos + 1) * this.segWidth + xpos;\n      var value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint16Array(indices);\n    // ensure that the changes are uploaded\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  };\n  return PlaneGeometry;\n}(MeshGeometry);\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\nvar RopeGeometry = /** @class */function (_super) {\n  __extends(RopeGeometry, _super);\n  /**\n   * @param {number} [width=200] - The width (i.e., thickness) of the rope.\n   * @param {PIXI.Point[]} [points] - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param {number} [textureScale=0] - By default the rope texture will be stretched to match\n   *     rope length. If textureScale is positive this value will be treated as a scaling\n   *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n   *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n   *     then set textureScale=1 to keep the original texture pixel size.\n   *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n   *     i.e. set textureScale=0.5 to scale it down twice.\n   */\n  function RopeGeometry(width, points, textureScale) {\n    if (width === void 0) {\n      width = 200;\n    }\n    if (textureScale === void 0) {\n      textureScale = 0;\n    }\n    var _this = _super.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6)) || this;\n    /**\n     * An array of points that determine the rope\n     * @member {PIXI.Point[]}\n     */\n    _this.points = points;\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @member {number}\n     * @readOnly\n     */\n    _this._width = width;\n    /**\n     * Rope texture scale, if zero then the rope texture is stretched.\n     * @member {number}\n     * @readOnly\n     */\n    _this.textureScale = textureScale;\n    _this.build();\n    return _this;\n  }\n  Object.defineProperty(RopeGeometry.prototype, \"width\", {\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @member {number}\n     * @readOnly\n     */\n    get: function () {\n      return this._width;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Refreshes Rope indices and uvs\n   * @private\n   */\n  RopeGeometry.prototype.build = function () {\n    var points = this.points;\n    if (!points) {\n      return;\n    }\n    var vertexBuffer = this.getBuffer('aVertexPosition');\n    var uvBuffer = this.getBuffer('aTextureCoord');\n    var indexBuffer = this.getIndex();\n    // if too little points, or texture hasn't got UVs set yet just move on.\n    if (points.length < 1) {\n      return;\n    }\n    // if the number of points has changed we will need to recreate the arraybuffers\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n    var uvs = uvBuffer.data;\n    var indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    var amount = 0;\n    var prev = points[0];\n    var textureWidth = this._width * this.textureScale;\n    var total = points.length; // - 1;\n    for (var i = 0; i < total; i++) {\n      // time to do some smart drawing!\n      var index = i * 4;\n      if (this.textureScale > 0) {\n        // calculate pixel distance from previous point\n        var dx = prev.x - points[i].x;\n        var dy = prev.y - points[i].y;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        // stretch texture\n        amount = i / (total - 1);\n      }\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n    var indexCount = 0;\n    for (var i = 0; i < total - 1; i++) {\n      var index = i * 2;\n      indices[indexCount++] = index;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 3;\n    }\n    // ensure that the changes are uploaded\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  };\n  /**\n   * refreshes vertices of Rope mesh\n   */\n  RopeGeometry.prototype.updateVertices = function () {\n    var points = this.points;\n    if (points.length < 1) {\n      return;\n    }\n    var lastPoint = points[0];\n    var nextPoint;\n    var perpX = 0;\n    var perpY = 0;\n    var vertices = this.buffers[0].data;\n    var total = points.length;\n    for (var i = 0; i < total; i++) {\n      var point = points[i];\n      var index = i * 4;\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      var perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      var num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n      perpX /= perpLength;\n      perpY /= perpLength;\n      perpX *= num;\n      perpY *= num;\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n    this.buffers[0].update();\n  };\n  RopeGeometry.prototype.update = function () {\n    if (this.textureScale > 0) {\n      this.build(); // we need to update UVs\n    } else {\n      this.updateVertices();\n    }\n  };\n  return RopeGeometry;\n}(MeshGeometry);\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nvar SimpleRope = /** @class */function (_super) {\n  __extends(SimpleRope, _super);\n  /**\n   * @param {PIXI.Texture} texture - The texture to use on the rope.\n   * @param {PIXI.Point[]} points - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param {number} [textureScale=0] - Optional. Positive values scale rope texture\n   * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n   * and downsampling here. If set to zero, texture will be streched instead.\n   */\n  function SimpleRope(texture, points, textureScale) {\n    if (textureScale === void 0) {\n      textureScale = 0;\n    }\n    var _this = this;\n    var ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n    var meshMaterial = new MeshMaterial(texture);\n    if (textureScale > 0) {\n      // attempt to set UV wrapping, will fail on non-power of two textures\n      texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n    }\n    _this = _super.call(this, ropeGeometry, meshMaterial) || this;\n    /**\n     * re-calculate vertices by rope points each frame\n     *\n     * @member {boolean}\n     */\n    _this.autoUpdate = true;\n    return _this;\n  }\n  SimpleRope.prototype._render = function (renderer) {\n    var geometry = this.geometry;\n    if (this.autoUpdate || geometry._width !== this.shader.texture.height) {\n      geometry._width = this.shader.texture.height;\n      geometry.update();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  return SimpleRope;\n}(Mesh);\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nvar SimplePlane = /** @class */function (_super) {\n  __extends(SimplePlane, _super);\n  /**\n   * @param {PIXI.Texture} texture - The texture to use on the SimplePlane.\n   * @param {number} verticesX - The number of vertices in the x-axis\n   * @param {number} verticesY - The number of vertices in the y-axis\n   */\n  function SimplePlane(texture, verticesX, verticesY) {\n    var _this = this;\n    var planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    var meshMaterial = new MeshMaterial(Texture.WHITE);\n    _this = _super.call(this, planeGeometry, meshMaterial) || this;\n    // lets call the setter to ensure all necessary updates are performed\n    _this.texture = texture;\n    return _this;\n  }\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n  SimplePlane.prototype.textureUpdated = function () {\n    this._textureID = this.shader.texture._updateID;\n    var geometry = this.geometry;\n    geometry.width = this.shader.texture.width;\n    geometry.height = this.shader.texture.height;\n    geometry.build();\n  };\n  Object.defineProperty(SimplePlane.prototype, \"texture\", {\n    get: function () {\n      return this.shader.texture;\n    },\n    set: function (value) {\n      // Track texture same way sprite does.\n      // For generated meshes like NineSlicePlane it can change the geometry.\n      // Unfortunately, this method might not work if you directly change texture in material.\n      if (this.shader.texture === value) {\n        return;\n      }\n      this.shader.texture = value;\n      this._textureID = -1;\n      if (value.baseTexture.valid) {\n        this.textureUpdated();\n      } else {\n        value.once('update', this.textureUpdated, this);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SimplePlane.prototype._render = function (renderer) {\n    if (this._textureID !== this.shader.texture._updateID) {\n      this.textureUpdated();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  return SimplePlane;\n}(Mesh);\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n */\nvar SimpleMesh = /** @class */function (_super) {\n  __extends(SimpleMesh, _super);\n  /**\n   * @param {PIXI.Texture} [texture=Texture.EMPTY] - The texture to use\n   * @param {Float32Array} [vertices] - if you want to specify the vertices\n   * @param {Float32Array} [uvs] - if you want to specify the uvs\n   * @param {Uint16Array} [indices] - if you want to specify the indices\n   * @param {number} [drawMode] - the drawMode, can be any of the Mesh.DRAW_MODES consts\n   */\n  function SimpleMesh(texture, vertices, uvs, indices, drawMode) {\n    if (texture === void 0) {\n      texture = Texture.EMPTY;\n    }\n    var _this = this;\n    var geometry = new MeshGeometry(vertices, uvs, indices);\n    geometry.getBuffer('aVertexPosition').static = false;\n    var meshMaterial = new MeshMaterial(texture);\n    _this = _super.call(this, geometry, meshMaterial, null, drawMode) || this;\n    /**\n     * upload vertices buffer each frame\n     * @member {boolean}\n     */\n    _this.autoUpdate = true;\n    return _this;\n  }\n  Object.defineProperty(SimpleMesh.prototype, \"vertices\", {\n    /**\n     * Collection of vertices data.\n     * @member {Float32Array}\n     */\n    get: function () {\n      return this.geometry.getBuffer('aVertexPosition').data;\n    },\n    set: function (value) {\n      this.geometry.getBuffer('aVertexPosition').data = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SimpleMesh.prototype._render = function (renderer) {\n    if (this.autoUpdate) {\n      this.geometry.getBuffer('aVertexPosition').update();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  return SimpleMesh;\n}(Mesh);\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.SimplePlane\n * @memberof PIXI\n *\n */\nvar NineSlicePlane = /** @class */function (_super) {\n  __extends(NineSlicePlane, _super);\n  /**\n   * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n   * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n   * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n   * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n   * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n   */\n  function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    if (leftWidth === void 0) {\n      leftWidth = DEFAULT_BORDER_SIZE;\n    }\n    if (topHeight === void 0) {\n      topHeight = DEFAULT_BORDER_SIZE;\n    }\n    if (rightWidth === void 0) {\n      rightWidth = DEFAULT_BORDER_SIZE;\n    }\n    if (bottomHeight === void 0) {\n      bottomHeight = DEFAULT_BORDER_SIZE;\n    }\n    var _this = _super.call(this, Texture.WHITE, 4, 4) || this;\n    _this._origWidth = texture.orig.width;\n    _this._origHeight = texture.orig.height;\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @override\n     */\n    _this._width = _this._origWidth;\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @override\n     */\n    _this._height = _this._origHeight;\n    /**\n     * The width of the left column (a)\n     *\n     * @member {number}\n     * @private\n     */\n    _this._leftWidth = leftWidth;\n    /**\n     * The width of the right column (b)\n     *\n     * @member {number}\n     * @private\n     */\n    _this._rightWidth = rightWidth;\n    /**\n     * The height of the top row (c)\n     *\n     * @member {number}\n     * @private\n     */\n    _this._topHeight = topHeight;\n    /**\n     * The height of the bottom row (d)\n     *\n     * @member {number}\n     * @private\n     */\n    _this._bottomHeight = bottomHeight;\n    // lets call the setter to ensure all necessary updates are performed\n    _this.texture = texture;\n    return _this;\n  }\n  NineSlicePlane.prototype.textureUpdated = function () {\n    this._textureID = this.shader.texture._updateID;\n    this._refresh();\n  };\n  Object.defineProperty(NineSlicePlane.prototype, \"vertices\", {\n    get: function () {\n      return this.geometry.getBuffer('aVertexPosition').data;\n    },\n    set: function (value) {\n      this.geometry.getBuffer('aVertexPosition').data = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Updates the horizontal vertices.\n   *\n   */\n  NineSlicePlane.prototype.updateHorizontalVertices = function () {\n    var vertices = this.vertices;\n    var scale = this._getMinScale();\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  };\n  /**\n   * Updates the vertical vertices.\n   *\n   */\n  NineSlicePlane.prototype.updateVerticalVertices = function () {\n    var vertices = this.vertices;\n    var scale = this._getMinScale();\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  };\n  /**\n   * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n   *\n   * @return {number} Smaller number of vertical and horizontal scale.\n   * @private\n   */\n  NineSlicePlane.prototype._getMinScale = function () {\n    var w = this._leftWidth + this._rightWidth;\n    var scaleW = this._width > w ? 1.0 : this._width / w;\n    var h = this._topHeight + this._bottomHeight;\n    var scaleH = this._height > h ? 1.0 : this._height / h;\n    var scale = Math.min(scaleW, scaleH);\n    return scale;\n  };\n  Object.defineProperty(NineSlicePlane.prototype, \"width\", {\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"height\", {\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"leftWidth\", {\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._leftWidth;\n    },\n    set: function (value) {\n      this._leftWidth = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"rightWidth\", {\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._rightWidth;\n    },\n    set: function (value) {\n      this._rightWidth = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"topHeight\", {\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._topHeight;\n    },\n    set: function (value) {\n      this._topHeight = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"bottomHeight\", {\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._bottomHeight;\n    },\n    set: function (value) {\n      this._bottomHeight = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Refreshes NineSlicePlane coords. All of them.\n   */\n  NineSlicePlane.prototype._refresh = function () {\n    var texture = this.texture;\n    var uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n    var _uvw = 1.0 / this._origWidth;\n    var _uvh = 1.0 / this._origHeight;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.geometry.buffers[0].update();\n    this.geometry.buffers[1].update();\n  };\n  return NineSlicePlane;\n}(SimplePlane);\nexport { NineSlicePlane, PlaneGeometry, RopeGeometry, SimpleMesh, SimplePlane, SimpleRope };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","PlaneGeometry","_super","width","height","segWidth","segHeight","_this","call","build","total","verts","uvs","indices","segmentsX","segmentsY","sizeX","sizeY","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","buffers","data","Float32Array","indexBuffer","Uint16Array","update","MeshGeometry","RopeGeometry","points","textureScale","length","_width","defineProperty","get","vertexBuffer","getBuffer","uvBuffer","getIndex","amount","prev","textureWidth","index","dx","dy","distance","Math","sqrt","indexCount","updateVertices","lastPoint","nextPoint","perpX","perpY","vertices","point","perpLength","num","SimpleRope","texture","ropeGeometry","meshMaterial","MeshMaterial","baseTexture","wrapMode","WRAP_MODES","REPEAT","autoUpdate","_render","renderer","geometry","shader","Mesh","SimplePlane","verticesX","verticesY","planeGeometry","Texture","WHITE","textureUpdated","_textureID","_updateID","set","valid","once","SimpleMesh","drawMode","EMPTY","static","DEFAULT_BORDER_SIZE","NineSlicePlane","leftWidth","topHeight","rightWidth","bottomHeight","_origWidth","orig","_origHeight","_height","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_refresh","updateHorizontalVertices","scale","_getMinScale","updateVerticalVertices","w","scaleW","h","scaleH","min","_uvw","_uvh"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh-extras/src/geometry/PlaneGeometry.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh-extras/src/geometry/RopeGeometry.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh-extras/src/SimpleRope.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh-extras/src/SimplePlane.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh-extras/src/SimpleMesh.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment/orbital-bombardment-simulator/node_modules/@pixi/mesh-extras/src/NineSlicePlane.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { MeshGeometry } from '@pixi/mesh';\n\nexport class PlaneGeometry extends MeshGeometry\n{\n    public segWidth: number;\n    public segHeight: number;\n    public width: number;\n    public height: number;\n\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build(): void\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { MeshGeometry } from '@pixi/mesh';\nimport type { IPoint } from '@pixi/math';\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    public points: IPoint[];\n    public readonly textureScale: number;\n    _width: number;\n\n    /**\n     * @param {number} [width=200] - The width (i.e., thickness) of the rope.\n     * @param {PIXI.Point[]} [points] - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    constructor(width = 200, points: IPoint[], textureScale = 0)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        /**\n         * An array of points that determine the rope\n         * @member {PIXI.Point[]}\n         */\n        this.points = points;\n\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number}\n         * @readOnly\n         */\n        this._width = width;\n\n        /**\n         * Rope texture scale, if zero then the rope texture is stretched.\n         * @member {number}\n         * @readOnly\n         */\n        this.textureScale = textureScale;\n\n        this.build();\n    }\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @member {number}\n     * @readOnly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * Refreshes Rope indices and uvs\n     * @private\n     */\n    private build(): void\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this._width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /**\n     * refreshes vertices of Rope mesh\n     */\n    public updateVertices(): void\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n            const num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n\n            perpX /= perpLength;\n            perpY /= perpLength;\n\n            perpX *= num;\n            perpY *= num;\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    public update(): void\n    {\n        if (this.textureScale > 0)\n        {\n            this.build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n","import { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { RopeGeometry } from './geometry/RopeGeometry';\n\nimport type { Texture, Renderer } from '@pixi/core';\nimport type { IPoint } from '@pixi/math';\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nexport class SimpleRope extends Mesh\n{\n    public autoUpdate: boolean;\n\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the rope.\n     * @param {PIXI.Point[]} points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - Optional. Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be streched instead.\n     */\n    constructor(texture: Texture, points: IPoint[], textureScale = 0)\n    {\n        const ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n        const meshMaterial = new MeshMaterial(texture);\n\n        if (textureScale > 0)\n        {\n            // attempt to set UV wrapping, will fail on non-power of two textures\n            texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n        }\n        super(ropeGeometry, meshMaterial);\n\n        /**\n         * re-calculate vertices by rope points each frame\n         *\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        const geometry: RopeGeometry = this.geometry as any;\n\n        if (this.autoUpdate || geometry._width !== this.shader.texture.height)\n        {\n            geometry._width = this.shader.texture.height;\n            geometry.update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { PlaneGeometry } from './geometry/PlaneGeometry';\n\nimport type{ Renderer } from '@pixi/core';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nexport class SimplePlane extends Mesh\n{\n    protected _textureID: number;\n\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the SimplePlane.\n     * @param {number} verticesX - The number of vertices in the x-axis\n     * @param {number} verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture: Texture, verticesX: number, verticesY: number)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        const geometry: PlaneGeometry = this.geometry as any;\n\n        geometry.width = this.shader.texture.width;\n        geometry.height = this.shader.texture.height;\n\n        geometry.build();\n    }\n\n    set texture(value: Texture)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture(): Texture\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { Texture } from '@pixi/core';\n\nimport type { ITypedArray, IArrayBuffer, Renderer } from '@pixi/core';\nimport type { DRAW_MODES } from '@pixi/constants';\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n */\nexport class SimpleMesh extends Mesh\n{\n    public autoUpdate: boolean;\n\n    /**\n     * @param {PIXI.Texture} [texture=Texture.EMPTY] - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param {number} [drawMode] - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(\n        texture = Texture.EMPTY,\n        vertices?: IArrayBuffer,\n        uvs?: IArrayBuffer,\n        indices?: IArrayBuffer,\n        drawMode?: DRAW_MODES\n    )\n    {\n        const geometry = new MeshGeometry(vertices, uvs, indices);\n\n        geometry.getBuffer('aVertexPosition').static = false;\n\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(geometry, meshMaterial, null, drawMode);\n\n        /**\n         * upload vertices buffer each frame\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @member {Float32Array}\n     */\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nimport type { ITypedArray } from '@pixi/core';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NineSlicePlane extends GlobalMixins.NineSlicePlane {}\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.SimplePlane\n * @memberof PIXI\n *\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    private _origWidth: number;\n    private _origHeight: number;\n    _leftWidth: number;\n    _rightWidth: number;\n    _topHeight: number;\n    _bottomHeight: number;\n\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n     * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n     */\n    constructor(\n        texture: Texture,\n        leftWidth = DEFAULT_BORDER_SIZE,\n        topHeight = DEFAULT_BORDER_SIZE,\n        rightWidth = DEFAULT_BORDER_SIZE,\n        bottomHeight = DEFAULT_BORDER_SIZE\n    )\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        this._width = this._origWidth;\n\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        this._height = this._origHeight;\n\n        /**\n         * The width of the left column (a)\n         *\n         * @member {number}\n         * @private\n         */\n        this._leftWidth = leftWidth;\n\n        /**\n         * The width of the right column (b)\n         *\n         * @member {number}\n         * @private\n         */\n        this._rightWidth = rightWidth;\n\n        /**\n         * The height of the top row (c)\n         *\n         * @member {number}\n         * @private\n         */\n        this._topHeight = topHeight;\n\n        /**\n         * The height of the bottom row (d)\n         *\n         * @member {number}\n         * @private\n         */\n        this._bottomHeight = bottomHeight;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /**\n     * Updates the horizontal vertices.\n     *\n     */\n    public updateHorizontalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /**\n     * Updates the vertical vertices.\n     *\n     */\n    public updateVerticalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     *\n     * @return {number} Smaller number of vertical and horizontal scale.\n     * @private\n     */\n    private _getMinScale(): number\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * Refreshes NineSlicePlane coords. All of them.\n     */\n    private _refresh(): void\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}