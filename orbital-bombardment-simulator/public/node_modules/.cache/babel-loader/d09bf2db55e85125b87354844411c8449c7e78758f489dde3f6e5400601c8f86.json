{"ast":null,"code":"/*!\n * @pixi/filter-blur - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/filter-blur is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar vertTemplate = \"\\n    attribute vec2 aVertexPosition;\\n\\n    uniform mat3 projectionMatrix;\\n\\n    uniform float strength;\\n\\n    varying vec2 vBlurTexCoords[%size%];\\n\\n    uniform vec4 inputSize;\\n    uniform vec4 outputFrame;\\n\\n    vec4 filterVertexPosition( void )\\n    {\\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n    }\\n\\n    vec2 filterTextureCoord( void )\\n    {\\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n    }\\n\\n    void main(void)\\n    {\\n        gl_Position = filterVertexPosition();\\n\\n        vec2 textureCoord = filterTextureCoord();\\n        %blur%\\n    }\";\nfunction generateBlurVertSource(kernelSize, x) {\n  var halfLength = Math.ceil(kernelSize / 2);\n  var vertSource = vertTemplate;\n  var blurLoop = '';\n  var template;\n  if (x) {\n    template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n  } else {\n    template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n  }\n  for (var i = 0; i < kernelSize; i++) {\n    var blur = template.replace('%index%', i.toString());\n    blur = blur.replace('%sampleIndex%', i - (halfLength - 1) + \".0\");\n    blurLoop += blur;\n    blurLoop += '\\n';\n  }\n  vertSource = vertSource.replace('%blur%', blurLoop);\n  vertSource = vertSource.replace('%size%', kernelSize.toString());\n  return vertSource;\n}\nvar GAUSSIAN_VALUES = {\n  5: [0.153388, 0.221461, 0.250301],\n  7: [0.071303, 0.131514, 0.189879, 0.214607],\n  9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n  11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n  13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n  15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448]\n};\nvar fragTemplate = ['varying vec2 vBlurTexCoords[%size%];', 'uniform sampler2D uSampler;', 'void main(void)', '{', '    gl_FragColor = vec4(0.0);', '    %blur%', '}'].join('\\n');\nfunction generateBlurFragSource(kernelSize) {\n  var kernel = GAUSSIAN_VALUES[kernelSize];\n  var halfLength = kernel.length;\n  var fragSource = fragTemplate;\n  var blurLoop = '';\n  var template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n  var value;\n  for (var i = 0; i < kernelSize; i++) {\n    var blur = template.replace('%index%', i.toString());\n    value = i;\n    if (i >= halfLength) {\n      value = kernelSize - i - 1;\n    }\n    blur = blur.replace('%value%', kernel[value].toString());\n    blurLoop += blur;\n    blurLoop += '\\n';\n  }\n  fragSource = fragSource.replace('%blur%', blurLoop);\n  fragSource = fragSource.replace('%size%', kernelSize.toString());\n  return fragSource;\n}\n\n/**\n * Different types of environments for WebGL.\n *\n * @static\n * @memberof PIXI\n * @name ENV\n * @enum {number}\n * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\n *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.\n * @property {number} WEBGL - Version 1 of WebGL\n * @property {number} WEBGL2 - Version 2 of WebGL\n */\nvar ENV;\n(function (ENV) {\n  ENV[ENV[\"WEBGL_LEGACY\"] = 0] = \"WEBGL_LEGACY\";\n  ENV[ENV[\"WEBGL\"] = 1] = \"WEBGL\";\n  ENV[ENV[\"WEBGL2\"] = 2] = \"WEBGL2\";\n})(ENV || (ENV = {}));\n/**\n * Constant to identify the Renderer Type.\n *\n * @static\n * @memberof PIXI\n * @name RENDERER_TYPE\n * @enum {number}\n * @property {number} UNKNOWN - Unknown render type.\n * @property {number} WEBGL - WebGL render type.\n * @property {number} CANVAS - Canvas render type.\n */\nvar RENDERER_TYPE;\n(function (RENDERER_TYPE) {\n  RENDERER_TYPE[RENDERER_TYPE[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  RENDERER_TYPE[RENDERER_TYPE[\"WEBGL\"] = 1] = \"WEBGL\";\n  RENDERER_TYPE[RENDERER_TYPE[\"CANVAS\"] = 2] = \"CANVAS\";\n})(RENDERER_TYPE || (RENDERER_TYPE = {}));\n/**\n * Bitwise OR of masks that indicate the buffers to be cleared.\n *\n * @static\n * @memberof PIXI\n * @name BUFFER_BITS\n * @enum {number}\n * @property {number} COLOR - Indicates the buffers currently enabled for color writing.\n * @property {number} DEPTH - Indicates the depth buffer.\n * @property {number} STENCIL - Indicates the stencil buffer.\n */\nvar BUFFER_BITS;\n(function (BUFFER_BITS) {\n  BUFFER_BITS[BUFFER_BITS[\"COLOR\"] = 16384] = \"COLOR\";\n  BUFFER_BITS[BUFFER_BITS[\"DEPTH\"] = 256] = \"DEPTH\";\n  BUFFER_BITS[BUFFER_BITS[\"STENCIL\"] = 1024] = \"STENCIL\";\n})(BUFFER_BITS || (BUFFER_BITS = {}));\n/**\n * Various blend modes supported by PIXI.\n *\n * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\n * Anything else will silently act like NORMAL.\n *\n * @memberof PIXI\n * @name BLEND_MODES\n * @enum {number}\n * @property {number} NORMAL\n * @property {number} ADD\n * @property {number} MULTIPLY\n * @property {number} SCREEN\n * @property {number} OVERLAY\n * @property {number} DARKEN\n * @property {number} LIGHTEN\n * @property {number} COLOR_DODGE\n * @property {number} COLOR_BURN\n * @property {number} HARD_LIGHT\n * @property {number} SOFT_LIGHT\n * @property {number} DIFFERENCE\n * @property {number} EXCLUSION\n * @property {number} HUE\n * @property {number} SATURATION\n * @property {number} COLOR\n * @property {number} LUMINOSITY\n * @property {number} NORMAL_NPM\n * @property {number} ADD_NPM\n * @property {number} SCREEN_NPM\n * @property {number} NONE\n * @property {number} SRC_IN\n * @property {number} SRC_OUT\n * @property {number} SRC_ATOP\n * @property {number} DST_OVER\n * @property {number} DST_IN\n * @property {number} DST_OUT\n * @property {number} DST_ATOP\n * @property {number} SUBTRACT\n * @property {number} SRC_OVER\n * @property {number} ERASE\n * @property {number} XOR\n */\nvar BLEND_MODES;\n(function (BLEND_MODES) {\n  BLEND_MODES[BLEND_MODES[\"NORMAL\"] = 0] = \"NORMAL\";\n  BLEND_MODES[BLEND_MODES[\"ADD\"] = 1] = \"ADD\";\n  BLEND_MODES[BLEND_MODES[\"MULTIPLY\"] = 2] = \"MULTIPLY\";\n  BLEND_MODES[BLEND_MODES[\"SCREEN\"] = 3] = \"SCREEN\";\n  BLEND_MODES[BLEND_MODES[\"OVERLAY\"] = 4] = \"OVERLAY\";\n  BLEND_MODES[BLEND_MODES[\"DARKEN\"] = 5] = \"DARKEN\";\n  BLEND_MODES[BLEND_MODES[\"LIGHTEN\"] = 6] = \"LIGHTEN\";\n  BLEND_MODES[BLEND_MODES[\"COLOR_DODGE\"] = 7] = \"COLOR_DODGE\";\n  BLEND_MODES[BLEND_MODES[\"COLOR_BURN\"] = 8] = \"COLOR_BURN\";\n  BLEND_MODES[BLEND_MODES[\"HARD_LIGHT\"] = 9] = \"HARD_LIGHT\";\n  BLEND_MODES[BLEND_MODES[\"SOFT_LIGHT\"] = 10] = \"SOFT_LIGHT\";\n  BLEND_MODES[BLEND_MODES[\"DIFFERENCE\"] = 11] = \"DIFFERENCE\";\n  BLEND_MODES[BLEND_MODES[\"EXCLUSION\"] = 12] = \"EXCLUSION\";\n  BLEND_MODES[BLEND_MODES[\"HUE\"] = 13] = \"HUE\";\n  BLEND_MODES[BLEND_MODES[\"SATURATION\"] = 14] = \"SATURATION\";\n  BLEND_MODES[BLEND_MODES[\"COLOR\"] = 15] = \"COLOR\";\n  BLEND_MODES[BLEND_MODES[\"LUMINOSITY\"] = 16] = \"LUMINOSITY\";\n  BLEND_MODES[BLEND_MODES[\"NORMAL_NPM\"] = 17] = \"NORMAL_NPM\";\n  BLEND_MODES[BLEND_MODES[\"ADD_NPM\"] = 18] = \"ADD_NPM\";\n  BLEND_MODES[BLEND_MODES[\"SCREEN_NPM\"] = 19] = \"SCREEN_NPM\";\n  BLEND_MODES[BLEND_MODES[\"NONE\"] = 20] = \"NONE\";\n  BLEND_MODES[BLEND_MODES[\"SRC_OVER\"] = 0] = \"SRC_OVER\";\n  BLEND_MODES[BLEND_MODES[\"SRC_IN\"] = 21] = \"SRC_IN\";\n  BLEND_MODES[BLEND_MODES[\"SRC_OUT\"] = 22] = \"SRC_OUT\";\n  BLEND_MODES[BLEND_MODES[\"SRC_ATOP\"] = 23] = \"SRC_ATOP\";\n  BLEND_MODES[BLEND_MODES[\"DST_OVER\"] = 24] = \"DST_OVER\";\n  BLEND_MODES[BLEND_MODES[\"DST_IN\"] = 25] = \"DST_IN\";\n  BLEND_MODES[BLEND_MODES[\"DST_OUT\"] = 26] = \"DST_OUT\";\n  BLEND_MODES[BLEND_MODES[\"DST_ATOP\"] = 27] = \"DST_ATOP\";\n  BLEND_MODES[BLEND_MODES[\"ERASE\"] = 26] = \"ERASE\";\n  BLEND_MODES[BLEND_MODES[\"SUBTRACT\"] = 28] = \"SUBTRACT\";\n  BLEND_MODES[BLEND_MODES[\"XOR\"] = 29] = \"XOR\";\n})(BLEND_MODES || (BLEND_MODES = {}));\n/**\n * Various webgl draw modes. These can be used to specify which GL drawMode to use\n * under certain situations and renderers.\n *\n * @memberof PIXI\n * @static\n * @name DRAW_MODES\n * @enum {number}\n * @property {number} POINTS\n * @property {number} LINES\n * @property {number} LINE_LOOP\n * @property {number} LINE_STRIP\n * @property {number} TRIANGLES\n * @property {number} TRIANGLE_STRIP\n * @property {number} TRIANGLE_FAN\n */\nvar DRAW_MODES;\n(function (DRAW_MODES) {\n  DRAW_MODES[DRAW_MODES[\"POINTS\"] = 0] = \"POINTS\";\n  DRAW_MODES[DRAW_MODES[\"LINES\"] = 1] = \"LINES\";\n  DRAW_MODES[DRAW_MODES[\"LINE_LOOP\"] = 2] = \"LINE_LOOP\";\n  DRAW_MODES[DRAW_MODES[\"LINE_STRIP\"] = 3] = \"LINE_STRIP\";\n  DRAW_MODES[DRAW_MODES[\"TRIANGLES\"] = 4] = \"TRIANGLES\";\n  DRAW_MODES[DRAW_MODES[\"TRIANGLE_STRIP\"] = 5] = \"TRIANGLE_STRIP\";\n  DRAW_MODES[DRAW_MODES[\"TRIANGLE_FAN\"] = 6] = \"TRIANGLE_FAN\";\n})(DRAW_MODES || (DRAW_MODES = {}));\n/**\n * Various GL texture/resources formats.\n *\n * @memberof PIXI\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} RGBA=6408\n * @property {number} RGB=6407\n * @property {number} ALPHA=6406\n * @property {number} LUMINANCE=6409\n * @property {number} LUMINANCE_ALPHA=6410\n * @property {number} DEPTH_COMPONENT=6402\n * @property {number} DEPTH_STENCIL=34041\n */\nvar FORMATS;\n(function (FORMATS) {\n  FORMATS[FORMATS[\"RGBA\"] = 6408] = \"RGBA\";\n  FORMATS[FORMATS[\"RGB\"] = 6407] = \"RGB\";\n  FORMATS[FORMATS[\"ALPHA\"] = 6406] = \"ALPHA\";\n  FORMATS[FORMATS[\"LUMINANCE\"] = 6409] = \"LUMINANCE\";\n  FORMATS[FORMATS[\"LUMINANCE_ALPHA\"] = 6410] = \"LUMINANCE_ALPHA\";\n  FORMATS[FORMATS[\"DEPTH_COMPONENT\"] = 6402] = \"DEPTH_COMPONENT\";\n  FORMATS[FORMATS[\"DEPTH_STENCIL\"] = 34041] = \"DEPTH_STENCIL\";\n})(FORMATS || (FORMATS = {}));\n/**\n * Various GL target types.\n *\n * @memberof PIXI\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} TEXTURE_2D=3553\n * @property {number} TEXTURE_CUBE_MAP=34067\n * @property {number} TEXTURE_2D_ARRAY=35866\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074\n */\nvar TARGETS;\n(function (TARGETS) {\n  TARGETS[TARGETS[\"TEXTURE_2D\"] = 3553] = \"TEXTURE_2D\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP\"] = 34067] = \"TEXTURE_CUBE_MAP\";\n  TARGETS[TARGETS[\"TEXTURE_2D_ARRAY\"] = 35866] = \"TEXTURE_2D_ARRAY\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_X\"] = 34069] = \"TEXTURE_CUBE_MAP_POSITIVE_X\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"] = 34070] = \"TEXTURE_CUBE_MAP_NEGATIVE_X\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"] = 34071] = \"TEXTURE_CUBE_MAP_POSITIVE_Y\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"] = 34072] = \"TEXTURE_CUBE_MAP_NEGATIVE_Y\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"] = 34073] = \"TEXTURE_CUBE_MAP_POSITIVE_Z\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"] = 34074] = \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\n})(TARGETS || (TARGETS = {}));\n/**\n * Various GL data format types.\n *\n * @memberof PIXI\n * @static\n * @name TYPES\n * @enum {number}\n * @property {number} UNSIGNED_BYTE=5121\n * @property {number} UNSIGNED_SHORT=5123\n * @property {number} UNSIGNED_SHORT_5_6_5=33635\n * @property {number} UNSIGNED_SHORT_4_4_4_4=32819\n * @property {number} UNSIGNED_SHORT_5_5_5_1=32820\n * @property {number} FLOAT=5126\n * @property {number} HALF_FLOAT=36193\n */\nvar TYPES;\n(function (TYPES) {\n  TYPES[TYPES[\"UNSIGNED_BYTE\"] = 5121] = \"UNSIGNED_BYTE\";\n  TYPES[TYPES[\"UNSIGNED_SHORT\"] = 5123] = \"UNSIGNED_SHORT\";\n  TYPES[TYPES[\"UNSIGNED_SHORT_5_6_5\"] = 33635] = \"UNSIGNED_SHORT_5_6_5\";\n  TYPES[TYPES[\"UNSIGNED_SHORT_4_4_4_4\"] = 32819] = \"UNSIGNED_SHORT_4_4_4_4\";\n  TYPES[TYPES[\"UNSIGNED_SHORT_5_5_5_1\"] = 32820] = \"UNSIGNED_SHORT_5_5_5_1\";\n  TYPES[TYPES[\"FLOAT\"] = 5126] = \"FLOAT\";\n  TYPES[TYPES[\"HALF_FLOAT\"] = 36193] = \"HALF_FLOAT\";\n})(TYPES || (TYPES = {}));\n/**\n * The scale modes that are supported by pixi.\n *\n * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\n * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\n *\n * @memberof PIXI\n * @static\n * @name SCALE_MODES\n * @enum {number}\n * @property {number} LINEAR Smooth scaling\n * @property {number} NEAREST Pixelating scaling\n */\nvar SCALE_MODES;\n(function (SCALE_MODES) {\n  SCALE_MODES[SCALE_MODES[\"NEAREST\"] = 0] = \"NEAREST\";\n  SCALE_MODES[SCALE_MODES[\"LINEAR\"] = 1] = \"LINEAR\";\n})(SCALE_MODES || (SCALE_MODES = {}));\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n *\n * @name WRAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\nvar WRAP_MODES;\n(function (WRAP_MODES) {\n  WRAP_MODES[WRAP_MODES[\"CLAMP\"] = 33071] = \"CLAMP\";\n  WRAP_MODES[WRAP_MODES[\"REPEAT\"] = 10497] = \"REPEAT\";\n  WRAP_MODES[WRAP_MODES[\"MIRRORED_REPEAT\"] = 33648] = \"MIRRORED_REPEAT\";\n})(WRAP_MODES || (WRAP_MODES = {}));\n/**\n * Mipmap filtering modes that are supported by pixi.\n *\n * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\n * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\n * or its `POW2` and texture dimensions are powers of 2.\n * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.\n *\n * This property only affects WebGL.\n *\n * @name MIPMAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} OFF - No mipmaps\n * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2\n * @property {number} ON - Always generate mipmaps\n */\nvar MIPMAP_MODES;\n(function (MIPMAP_MODES) {\n  MIPMAP_MODES[MIPMAP_MODES[\"OFF\"] = 0] = \"OFF\";\n  MIPMAP_MODES[MIPMAP_MODES[\"POW2\"] = 1] = \"POW2\";\n  MIPMAP_MODES[MIPMAP_MODES[\"ON\"] = 2] = \"ON\";\n})(MIPMAP_MODES || (MIPMAP_MODES = {}));\n/**\n * How to treat textures with premultiplied alpha\n *\n * @name ALPHA_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.\n *  Option for compressed and data textures that are created from typed arrays.\n * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.\n *  Default option, used for all loaded images.\n * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied\n *  Example: spine atlases with `_pma` suffix.\n * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.\n * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.\n * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.\n */\nvar ALPHA_MODES;\n(function (ALPHA_MODES) {\n  ALPHA_MODES[ALPHA_MODES[\"NPM\"] = 0] = \"NPM\";\n  ALPHA_MODES[ALPHA_MODES[\"UNPACK\"] = 1] = \"UNPACK\";\n  ALPHA_MODES[ALPHA_MODES[\"PMA\"] = 2] = \"PMA\";\n  ALPHA_MODES[ALPHA_MODES[\"NO_PREMULTIPLIED_ALPHA\"] = 0] = \"NO_PREMULTIPLIED_ALPHA\";\n  ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLY_ON_UPLOAD\"] = 1] = \"PREMULTIPLY_ON_UPLOAD\";\n  ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLY_ALPHA\"] = 2] = \"PREMULTIPLY_ALPHA\";\n})(ALPHA_MODES || (ALPHA_MODES = {}));\n/**\n * How to clear renderTextures in filter\n *\n * @name CLEAR_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} BLEND - Preserve the information in the texture, blend above\n * @property {number} CLEAR - Must use `gl.clear` operation\n * @property {number} BLIT - Clear or blit it, depends on device and level of paranoia\n * @property {number} NO - Alias for BLEND, same as `false` in earlier versions\n * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions\n * @property {number} AUTO - Alias for BLIT\n */\nvar CLEAR_MODES;\n(function (CLEAR_MODES) {\n  CLEAR_MODES[CLEAR_MODES[\"NO\"] = 0] = \"NO\";\n  CLEAR_MODES[CLEAR_MODES[\"YES\"] = 1] = \"YES\";\n  CLEAR_MODES[CLEAR_MODES[\"AUTO\"] = 2] = \"AUTO\";\n  CLEAR_MODES[CLEAR_MODES[\"BLEND\"] = 0] = \"BLEND\";\n  CLEAR_MODES[CLEAR_MODES[\"CLEAR\"] = 1] = \"CLEAR\";\n  CLEAR_MODES[CLEAR_MODES[\"BLIT\"] = 2] = \"BLIT\";\n})(CLEAR_MODES || (CLEAR_MODES = {}));\n/**\n * The gc modes that are supported by pixi.\n *\n * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\n * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\n * used for a specified period of time they will be removed from the GPU. They will of course\n * be uploaded again when they are required. This is a silent behind the scenes process that\n * should ensure that the GPU does not  get filled up.\n *\n * Handy for mobile devices!\n * This property only affects WebGL.\n *\n * @name GC_MODES\n * @enum {number}\n * @static\n * @memberof PIXI\n * @property {number} AUTO - Garbage collection will happen periodically automatically\n * @property {number} MANUAL - Garbage collection will need to be called manually\n */\nvar GC_MODES;\n(function (GC_MODES) {\n  GC_MODES[GC_MODES[\"AUTO\"] = 0] = \"AUTO\";\n  GC_MODES[GC_MODES[\"MANUAL\"] = 1] = \"MANUAL\";\n})(GC_MODES || (GC_MODES = {}));\n/**\n * Constants that specify float precision in shaders.\n *\n * @name PRECISION\n * @memberof PIXI\n * @constant\n * @static\n * @enum {string}\n * @property {string} LOW='lowp'\n * @property {string} MEDIUM='mediump'\n * @property {string} HIGH='highp'\n */\nvar PRECISION;\n(function (PRECISION) {\n  PRECISION[\"LOW\"] = \"lowp\";\n  PRECISION[\"MEDIUM\"] = \"mediump\";\n  PRECISION[\"HIGH\"] = \"highp\";\n})(PRECISION || (PRECISION = {}));\n/**\n * Constants for mask implementations.\n * We use `type` suffix because it leads to very different behaviours\n *\n * @name MASK_TYPES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - Mask is ignored\n * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap\n * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil\n * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture\n */\nvar MASK_TYPES;\n(function (MASK_TYPES) {\n  MASK_TYPES[MASK_TYPES[\"NONE\"] = 0] = \"NONE\";\n  MASK_TYPES[MASK_TYPES[\"SCISSOR\"] = 1] = \"SCISSOR\";\n  MASK_TYPES[MASK_TYPES[\"STENCIL\"] = 2] = \"STENCIL\";\n  MASK_TYPES[MASK_TYPES[\"SPRITE\"] = 3] = \"SPRITE\";\n})(MASK_TYPES || (MASK_TYPES = {}));\n/**\n * Constants for multi-sampling antialiasing.\n *\n * @see PIXI.Framebuffer#multisample\n *\n * @name MSAA_QUALITY\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - No multisampling for this renderTexture\n * @property {number} LOW - Try 2 samples\n * @property {number} MEDIUM - Try 4 samples\n * @property {number} HIGH - Try 8 samples\n */\nvar MSAA_QUALITY;\n(function (MSAA_QUALITY) {\n  MSAA_QUALITY[MSAA_QUALITY[\"NONE\"] = 0] = \"NONE\";\n  MSAA_QUALITY[MSAA_QUALITY[\"LOW\"] = 2] = \"LOW\";\n  MSAA_QUALITY[MSAA_QUALITY[\"MEDIUM\"] = 4] = \"MEDIUM\";\n  MSAA_QUALITY[MSAA_QUALITY[\"HIGH\"] = 8] = \"HIGH\";\n})(MSAA_QUALITY || (MSAA_QUALITY = {}));\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar BlurFilterPass = /** @class */function (_super) {\n  __extends(BlurFilterPass, _super);\n  /**\n   * @param {boolean} horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n   * @param {number} [strength=8] - The strength of the blur filter.\n   * @param {number} [quality=4] - The quality of the blur filter.\n   * @param {number} [resolution=1] - The resolution of the blur filter.\n   * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n  function BlurFilterPass(horizontal, strength, quality, resolution, kernelSize) {\n    if (strength === void 0) {\n      strength = 8;\n    }\n    if (quality === void 0) {\n      quality = 4;\n    }\n    if (resolution === void 0) {\n      resolution = settings.RESOLUTION;\n    }\n    if (kernelSize === void 0) {\n      kernelSize = 5;\n    }\n    var _this = this;\n    var vertSrc = generateBlurVertSource(kernelSize, horizontal);\n    var fragSrc = generateBlurFragSource(kernelSize);\n    _this = _super.call(this,\n    // vertex shader\n    vertSrc,\n    // fragment shader\n    fragSrc) || this;\n    _this.horizontal = horizontal;\n    _this.resolution = resolution;\n    _this._quality = 0;\n    _this.quality = quality;\n    _this.blur = strength;\n    return _this;\n  }\n  /**\n   * Applies the filter.\n   *\n   * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n   * @param {PIXI.RenderTexture} input - The input target.\n   * @param {PIXI.RenderTexture} output - The output target.\n   * @param {PIXI.CLEAR_MODES} clearMode - How to clear\n   */\n  BlurFilterPass.prototype.apply = function (filterManager, input, output, clearMode) {\n    if (output) {\n      if (this.horizontal) {\n        this.uniforms.strength = 1 / output.width * (output.width / input.width);\n      } else {\n        this.uniforms.strength = 1 / output.height * (output.height / input.height);\n      }\n    } else {\n      if (this.horizontal)\n        // eslint-disable-line\n        {\n          this.uniforms.strength = 1 / filterManager.renderer.width * (filterManager.renderer.width / input.width);\n        } else {\n        this.uniforms.strength = 1 / filterManager.renderer.height * (filterManager.renderer.height / input.height); // eslint-disable-line\n      }\n    }\n    // screen space!\n    this.uniforms.strength *= this.strength;\n    this.uniforms.strength /= this.passes;\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clearMode);\n    } else {\n      var renderTarget = filterManager.getFilterTexture();\n      var renderer = filterManager.renderer;\n      var flip = input;\n      var flop = renderTarget;\n      this.state.blend = false;\n      filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n      for (var i = 1; i < this.passes - 1; i++) {\n        filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n        this.uniforms.uSampler = flop;\n        var temp = flop;\n        flop = flip;\n        flip = temp;\n        renderer.shader.bind(this);\n        renderer.geometry.draw(5);\n      }\n      this.state.blend = true;\n      filterManager.applyFilter(this, flop, output, clearMode);\n      filterManager.returnFilterTexture(renderTarget);\n    }\n  };\n  Object.defineProperty(BlurFilterPass.prototype, \"blur\", {\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 16\n     */\n    get: function () {\n      return this.strength;\n    },\n    set: function (value) {\n      this.padding = 1 + Math.abs(value) * 2;\n      this.strength = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlurFilterPass.prototype, \"quality\", {\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get: function () {\n      return this._quality;\n    },\n    set: function (value) {\n      this._quality = value;\n      this.passes = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return BlurFilterPass;\n}(Filter);\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar BlurFilter = /** @class */function (_super) {\n  __extends(BlurFilter, _super);\n  /**\n   * @param {number} [strength=8] - The strength of the blur filter.\n   * @param {number} [quality=4] - The quality of the blur filter.\n   * @param {number} [resolution=1] - The resolution of the blur filter.\n   * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n  function BlurFilter(strength, quality, resolution, kernelSize) {\n    if (strength === void 0) {\n      strength = 8;\n    }\n    if (quality === void 0) {\n      quality = 4;\n    }\n    if (resolution === void 0) {\n      resolution = settings.RESOLUTION;\n    }\n    if (kernelSize === void 0) {\n      kernelSize = 5;\n    }\n    var _this = _super.call(this) || this;\n    _this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n    _this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n    _this.resolution = resolution;\n    _this.quality = quality;\n    _this.blur = strength;\n    _this.repeatEdgePixels = false;\n    return _this;\n  }\n  /**\n   * Applies the filter.\n   *\n   * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n   * @param {PIXI.RenderTexture} input - The input target.\n   * @param {PIXI.RenderTexture} output - The output target.\n   * @param {PIXI.CLEAR_MODES} clearMode - How to clear\n   */\n  BlurFilter.prototype.apply = function (filterManager, input, output, clearMode) {\n    var xStrength = Math.abs(this.blurXFilter.strength);\n    var yStrength = Math.abs(this.blurYFilter.strength);\n    if (xStrength && yStrength) {\n      var renderTarget = filterManager.getFilterTexture();\n      this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n      this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n      filterManager.returnFilterTexture(renderTarget);\n    } else if (yStrength) {\n      this.blurYFilter.apply(filterManager, input, output, clearMode);\n    } else {\n      this.blurXFilter.apply(filterManager, input, output, clearMode);\n    }\n  };\n  BlurFilter.prototype.updatePadding = function () {\n    if (this._repeatEdgePixels) {\n      this.padding = 0;\n    } else {\n      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n  };\n  Object.defineProperty(BlurFilter.prototype, \"blur\", {\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get: function () {\n      return this.blurXFilter.blur;\n    },\n    set: function (value) {\n      this.blurXFilter.blur = this.blurYFilter.blur = value;\n      this.updatePadding();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlurFilter.prototype, \"quality\", {\n    /**\n     * Sets the number of passes for blur. More passes means higher quaility bluring.\n     *\n     * @member {number}\n     * @default 1\n     */\n    get: function () {\n      return this.blurXFilter.quality;\n    },\n    set: function (value) {\n      this.blurXFilter.quality = this.blurYFilter.quality = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlurFilter.prototype, \"blurX\", {\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get: function () {\n      return this.blurXFilter.blur;\n    },\n    set: function (value) {\n      this.blurXFilter.blur = value;\n      this.updatePadding();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlurFilter.prototype, \"blurY\", {\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get: function () {\n      return this.blurYFilter.blur;\n    },\n    set: function (value) {\n      this.blurYFilter.blur = value;\n      this.updatePadding();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlurFilter.prototype, \"blendMode\", {\n    /**\n     * Sets the blendmode of the filter\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get: function () {\n      return this.blurYFilter.blendMode;\n    },\n    set: function (value) {\n      this.blurYFilter.blendMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlurFilter.prototype, \"repeatEdgePixels\", {\n    /**\n     * If set to true the edge of the target will be clamped\n     *\n     * @member {boolean}\n     * @default false\n     */\n    get: function () {\n      return this._repeatEdgePixels;\n    },\n    set: function (value) {\n      this._repeatEdgePixels = value;\n      this.updatePadding();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return BlurFilter;\n}(Filter);\nexport { BlurFilter, BlurFilterPass };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","vertTemplate","generateBlurVertSource","kernelSize","x","halfLength","Math","ceil","vertSource","blurLoop","template","i","blur","replace","toString","GAUSSIAN_VALUES","fragTemplate","join","generateBlurFragSource","kernel","length","fragSource","value","ENV","RENDERER_TYPE","BUFFER_BITS","BLEND_MODES","DRAW_MODES","FORMATS","TARGETS","TYPES","SCALE_MODES","WRAP_MODES","MIPMAP_MODES","ALPHA_MODES","CLEAR_MODES","GC_MODES","PRECISION","MASK_TYPES","MSAA_QUALITY","BlurFilterPass","_super","horizontal","strength","quality","resolution","settings","RESOLUTION","_this","vertSrc","fragSrc","call","_quality","apply","filterManager","input","output","clearMode","uniforms","width","height","renderer","passes","applyFilter","renderTarget","getFilterTexture","flip","flop","state","blend","CLEAR","bindAndClear","BLIT","uSampler","temp","shader","bind","geometry","draw","returnFilterTexture","defineProperty","get","set","padding","abs","Filter","BlurFilter","blurXFilter","blurYFilter","repeatEdgePixels","xStrength","yStrength","updatePadding","_repeatEdgePixels","max","blendMode"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/filter-blur/src/generateBlurVertSource.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/filter-blur/src/generateBlurFragSource.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/constants/src/index.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/filter-blur/src/BlurFilterPass.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/filter-blur/src/BlurFilter.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize: number, x: boolean): string\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize.toString());\n\n    return vertSource;\n}\n","interface IGAUSSIAN_VALUES {\n    [x: number]: number[];\n}\nconst GAUSSIAN_VALUES: IGAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize: number): string\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value: number;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value].toString());\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize.toString());\n\n    return fragSource;\n}\n","/**\n * Different types of environments for WebGL.\n *\n * @static\n * @memberof PIXI\n * @name ENV\n * @enum {number}\n * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\n *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.\n * @property {number} WEBGL - Version 1 of WebGL\n * @property {number} WEBGL2 - Version 2 of WebGL\n */\nexport enum ENV {\n    WEBGL_LEGACY,\n    WEBGL,\n    WEBGL2,\n}\n\n/**\n * Constant to identify the Renderer Type.\n *\n * @static\n * @memberof PIXI\n * @name RENDERER_TYPE\n * @enum {number}\n * @property {number} UNKNOWN - Unknown render type.\n * @property {number} WEBGL - WebGL render type.\n * @property {number} CANVAS - Canvas render type.\n */\nexport enum RENDERER_TYPE {\n    UNKNOWN,\n    WEBGL,\n    CANVAS,\n}\n\n/**\n * Bitwise OR of masks that indicate the buffers to be cleared.\n *\n * @static\n * @memberof PIXI\n * @name BUFFER_BITS\n * @enum {number}\n * @property {number} COLOR - Indicates the buffers currently enabled for color writing.\n * @property {number} DEPTH - Indicates the depth buffer.\n * @property {number} STENCIL - Indicates the stencil buffer.\n */\nexport enum BUFFER_BITS {\n    COLOR = 0x00004000,\n    DEPTH = 0x00000100,\n    STENCIL = 0x00000400\n}\n\n/**\n * Various blend modes supported by PIXI.\n *\n * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\n * Anything else will silently act like NORMAL.\n *\n * @memberof PIXI\n * @name BLEND_MODES\n * @enum {number}\n * @property {number} NORMAL\n * @property {number} ADD\n * @property {number} MULTIPLY\n * @property {number} SCREEN\n * @property {number} OVERLAY\n * @property {number} DARKEN\n * @property {number} LIGHTEN\n * @property {number} COLOR_DODGE\n * @property {number} COLOR_BURN\n * @property {number} HARD_LIGHT\n * @property {number} SOFT_LIGHT\n * @property {number} DIFFERENCE\n * @property {number} EXCLUSION\n * @property {number} HUE\n * @property {number} SATURATION\n * @property {number} COLOR\n * @property {number} LUMINOSITY\n * @property {number} NORMAL_NPM\n * @property {number} ADD_NPM\n * @property {number} SCREEN_NPM\n * @property {number} NONE\n * @property {number} SRC_IN\n * @property {number} SRC_OUT\n * @property {number} SRC_ATOP\n * @property {number} DST_OVER\n * @property {number} DST_IN\n * @property {number} DST_OUT\n * @property {number} DST_ATOP\n * @property {number} SUBTRACT\n * @property {number} SRC_OVER\n * @property {number} ERASE\n * @property {number} XOR\n */\nexport enum BLEND_MODES {\n    NORMAL = 0,\n    ADD = 1,\n    MULTIPLY = 2,\n    SCREEN = 3,\n    OVERLAY = 4,\n    DARKEN = 5,\n    LIGHTEN = 6,\n    COLOR_DODGE = 7,\n    COLOR_BURN = 8,\n    HARD_LIGHT = 9,\n    SOFT_LIGHT = 10,\n    DIFFERENCE = 11,\n    EXCLUSION = 12,\n    HUE = 13,\n    SATURATION = 14,\n    COLOR = 15,\n    LUMINOSITY = 16,\n    NORMAL_NPM = 17,\n    ADD_NPM = 18,\n    SCREEN_NPM = 19,\n    NONE = 20,\n\n    SRC_OVER = 0,\n    SRC_IN = 21,\n    SRC_OUT = 22,\n    SRC_ATOP = 23,\n    DST_OVER = 24,\n    DST_IN = 25,\n    DST_OUT = 26,\n    DST_ATOP = 27,\n    ERASE = 26,\n    SUBTRACT = 28,\n    XOR = 29,\n}\n\n/**\n * Various webgl draw modes. These can be used to specify which GL drawMode to use\n * under certain situations and renderers.\n *\n * @memberof PIXI\n * @static\n * @name DRAW_MODES\n * @enum {number}\n * @property {number} POINTS\n * @property {number} LINES\n * @property {number} LINE_LOOP\n * @property {number} LINE_STRIP\n * @property {number} TRIANGLES\n * @property {number} TRIANGLE_STRIP\n * @property {number} TRIANGLE_FAN\n */\nexport enum DRAW_MODES {\n    POINTS,\n    LINES,\n    LINE_LOOP,\n    LINE_STRIP,\n    TRIANGLES,\n    TRIANGLE_STRIP,\n    TRIANGLE_FAN,\n}\n\n/**\n * Various GL texture/resources formats.\n *\n * @memberof PIXI\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} RGBA=6408\n * @property {number} RGB=6407\n * @property {number} ALPHA=6406\n * @property {number} LUMINANCE=6409\n * @property {number} LUMINANCE_ALPHA=6410\n * @property {number} DEPTH_COMPONENT=6402\n * @property {number} DEPTH_STENCIL=34041\n */\nexport enum FORMATS {\n    RGBA = 6408,\n    RGB = 6407,\n    ALPHA = 6406,\n    LUMINANCE = 6409,\n    LUMINANCE_ALPHA = 6410,\n    DEPTH_COMPONENT = 6402,\n    DEPTH_STENCIL = 34041,\n}\n\n/**\n * Various GL target types.\n *\n * @memberof PIXI\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} TEXTURE_2D=3553\n * @property {number} TEXTURE_CUBE_MAP=34067\n * @property {number} TEXTURE_2D_ARRAY=35866\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074\n */\nexport enum TARGETS {\n    TEXTURE_2D = 3553,\n    TEXTURE_CUBE_MAP = 34067,\n    TEXTURE_2D_ARRAY = 35866,\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,\n}\n\n/**\n * Various GL data format types.\n *\n * @memberof PIXI\n * @static\n * @name TYPES\n * @enum {number}\n * @property {number} UNSIGNED_BYTE=5121\n * @property {number} UNSIGNED_SHORT=5123\n * @property {number} UNSIGNED_SHORT_5_6_5=33635\n * @property {number} UNSIGNED_SHORT_4_4_4_4=32819\n * @property {number} UNSIGNED_SHORT_5_5_5_1=32820\n * @property {number} FLOAT=5126\n * @property {number} HALF_FLOAT=36193\n */\nexport enum TYPES {\n    UNSIGNED_BYTE = 5121,\n    UNSIGNED_SHORT = 5123,\n    UNSIGNED_SHORT_5_6_5 = 33635,\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\n    FLOAT = 5126,\n    HALF_FLOAT = 36193,\n}\n\n/**\n * The scale modes that are supported by pixi.\n *\n * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\n * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\n *\n * @memberof PIXI\n * @static\n * @name SCALE_MODES\n * @enum {number}\n * @property {number} LINEAR Smooth scaling\n * @property {number} NEAREST Pixelating scaling\n */\nexport enum SCALE_MODES {\n    NEAREST,\n    LINEAR,\n}\n\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n *\n * @name WRAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\nexport enum WRAP_MODES {\n    CLAMP = 33071,\n    REPEAT = 10497,\n    MIRRORED_REPEAT = 33648,\n}\n\n/**\n * Mipmap filtering modes that are supported by pixi.\n *\n * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\n * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\n * or its `POW2` and texture dimensions are powers of 2.\n * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.\n *\n * This property only affects WebGL.\n *\n * @name MIPMAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} OFF - No mipmaps\n * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2\n * @property {number} ON - Always generate mipmaps\n */\nexport enum MIPMAP_MODES {\n    OFF,\n    POW2,\n    ON,\n}\n\n/**\n * How to treat textures with premultiplied alpha\n *\n * @name ALPHA_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.\n *  Option for compressed and data textures that are created from typed arrays.\n * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.\n *  Default option, used for all loaded images.\n * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied\n *  Example: spine atlases with `_pma` suffix.\n * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.\n * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.\n * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.\n */\nexport enum ALPHA_MODES {\n    NPM = 0,\n    UNPACK = 1,\n    PMA = 2,\n    NO_PREMULTIPLIED_ALPHA = 0,\n    PREMULTIPLY_ON_UPLOAD = 1,\n    PREMULTIPLY_ALPHA = 2,\n}\n\n/**\n * How to clear renderTextures in filter\n *\n * @name CLEAR_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} BLEND - Preserve the information in the texture, blend above\n * @property {number} CLEAR - Must use `gl.clear` operation\n * @property {number} BLIT - Clear or blit it, depends on device and level of paranoia\n * @property {number} NO - Alias for BLEND, same as `false` in earlier versions\n * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions\n * @property {number} AUTO - Alias for BLIT\n */\nexport enum CLEAR_MODES {\n    NO = 0,\n    YES = 1,\n    AUTO = 2,\n    BLEND = 0,\n    CLEAR = 1,\n    BLIT = 2,\n}\n\n/**\n * The gc modes that are supported by pixi.\n *\n * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\n * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\n * used for a specified period of time they will be removed from the GPU. They will of course\n * be uploaded again when they are required. This is a silent behind the scenes process that\n * should ensure that the GPU does not  get filled up.\n *\n * Handy for mobile devices!\n * This property only affects WebGL.\n *\n * @name GC_MODES\n * @enum {number}\n * @static\n * @memberof PIXI\n * @property {number} AUTO - Garbage collection will happen periodically automatically\n * @property {number} MANUAL - Garbage collection will need to be called manually\n */\nexport enum GC_MODES {\n    AUTO,\n    MANUAL,\n}\n\n/**\n * Constants that specify float precision in shaders.\n *\n * @name PRECISION\n * @memberof PIXI\n * @constant\n * @static\n * @enum {string}\n * @property {string} LOW='lowp'\n * @property {string} MEDIUM='mediump'\n * @property {string} HIGH='highp'\n */\nexport enum PRECISION {\n    LOW = 'lowp',\n    MEDIUM = 'mediump',\n    HIGH = 'highp',\n}\n\n/**\n * Constants for mask implementations.\n * We use `type` suffix because it leads to very different behaviours\n *\n * @name MASK_TYPES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - Mask is ignored\n * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap\n * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil\n * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture\n */\nexport enum MASK_TYPES {\n    NONE = 0,\n    SCISSOR = 1,\n    STENCIL = 2,\n    SPRITE = 3,\n}\n\n/**\n * Constants for multi-sampling antialiasing.\n *\n * @see PIXI.Framebuffer#multisample\n *\n * @name MSAA_QUALITY\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - No multisampling for this renderTexture\n * @property {number} LOW - Try 2 samples\n * @property {number} MEDIUM - Try 4 samples\n * @property {number} HIGH - Try 8 samples\n */\nexport enum MSAA_QUALITY {\n    NONE = 0,\n    LOW = 2,\n    MEDIUM = 4,\n    HIGH = 8\n}\n","import { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { generateBlurVertSource } from './generateBlurVertSource';\nimport { generateBlurFragSource } from './generateBlurFragSource';\nimport { CLEAR_MODES } from '@pixi/constants';\n\nimport type { RenderTexture, systems } from '@pixi/core';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class BlurFilterPass extends Filter\n{\n    public horizontal: boolean;\n    public strength: number;\n    public passes: number;\n\n    private _quality: number;\n\n    /**\n     * @param {boolean} horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param {number} [strength=8] - The strength of the blur filter.\n     * @param {number} [quality=4] - The quality of the blur filter.\n     * @param {number} [resolution=1] - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal: boolean, strength = 8, quality = 4, resolution = settings.RESOLUTION, kernelSize = 5)\n    {\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution;\n\n        this._quality = 0;\n\n        this.quality = quality;\n\n        this.blur = strength;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n     * @param {PIXI.RenderTexture} input - The input target.\n     * @param {PIXI.RenderTexture} output - The output target.\n     * @param {PIXI.CLEAR_MODES} clearMode - How to clear\n     */\n    public apply(\n        filterManager: systems.FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clearMode);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n","import { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { BlurFilterPass } from './BlurFilterPass';\nimport { CLEAR_MODES } from '@pixi/constants';\n\nimport type { RenderTexture, systems } from '@pixi/core';\nimport type { BLEND_MODES } from '@pixi/constants';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class BlurFilter extends Filter\n{\n    public blurXFilter: BlurFilterPass;\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels: boolean;\n\n    /**\n     * @param {number} [strength=8] - The strength of the blur filter.\n     * @param {number} [quality=4] - The quality of the blur filter.\n     * @param {number} [resolution=1] - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength = 8, quality = 4, resolution = settings.RESOLUTION, kernelSize = 5)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution;\n        this.quality = quality;\n        this.blur = strength;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n     * @param {PIXI.RenderTexture} input - The input target.\n     * @param {PIXI.RenderTexture} output - The output target.\n     * @param {PIXI.CLEAR_MODES} clearMode - How to clear\n     */\n    apply(filterManager: systems.FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quaility bluring.\n     *\n     * @member {number}\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     *\n     * @member {boolean}\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}