{"ast":null,"code":"/*!\n * @pixi/text-bitmap - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/text-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Rectangle, ObservablePoint, Point } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { MeshGeometry, MeshMaterial, Mesh } from '@pixi/mesh';\nimport { hex2rgb, string2hex, getResolutionOfUrl, deprecation, removeItems } from '@pixi/utils';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { TEXT_GRADIENT, TextStyle, TextMetrics } from '@pixi/text';\nimport { Container } from '@pixi/display';\nimport { LoaderResource } from '@pixi/loaders';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/* eslint-disable max-len */\n/**\n * Normalized parsed data from .fnt files.\n *\n * @class\n * @memberof PIXI\n */\nvar BitmapFontData = /** @class */function () {\n  function BitmapFontData() {\n    /**\n     * @member {PIXI.IBitmapFontDataInfo[]}\n     * @readOnly\n     */\n    this.info = [];\n    /**\n     * @member {PIXI.IBitmapFontDataCommon[]}\n     * @readOnly\n     */\n    this.common = [];\n    /**\n     * @member {PIXI.IBitmapFontDataPage[]}\n     * @readOnly\n     */\n    this.page = [];\n    /**\n     * @member {PIXI.IBitmapFontDataChar[]}\n     * @readOnly\n     */\n    this.char = [];\n    /**\n     * @member {PIXI.IBitmapFontDataKerning[]}\n     * @readOnly\n     */\n    this.kerning = [];\n  }\n  return BitmapFontData;\n}();\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataInfo\n * @property {string} face\n * @property {number} size\n */\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataCommon\n * @property {number} lineHeight\n */\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataPage\n * @property {number} id\n * @property {string} file\n */\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataChar\n * @property {string} id\n * @property {number} page\n * @property {number} x\n * @property {number} y\n * @property {number} width\n * @property {number} height\n * @property {number} xoffset\n * @property {number} yoffset\n * @property {number} xadvance\n */\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataKerning\n * @property {number} first\n * @property {number} second\n * @property {number} amount\n */\n\n/**\n * BitmapFont format that's Text-based.\n *\n * @class\n * @private\n */\nvar TextFormat = /** @class */function () {\n  function TextFormat() {}\n  /**\n   * Check if resource refers to txt font data.\n   *\n   * @static\n   * @private\n   * @param {any} data\n   * @return {boolean} True if resource could be treated as font data, false otherwise.\n   */\n  TextFormat.test = function (data) {\n    return typeof data === 'string' && data.indexOf('info face=') === 0;\n  };\n  /**\n   * Convert text font data to a javascript object.\n   *\n   * @static\n   * @private\n   * @param {string} txt - Raw string data to be converted\n   * @return {PIXI.BitmapFontData} Parsed font data\n   */\n  TextFormat.parse = function (txt) {\n    // Retrieve data item\n    var items = txt.match(/^[a-z]+\\s+.+$/gm);\n    var rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: []\n    };\n    for (var i in items) {\n      // Extract item name\n      var name = items[i].match(/^[a-z]+/gm)[0];\n      // Extract item attribute list as string ex.: \"width=10\"\n      var attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n      // Convert attribute list into an object\n      var itemData = {};\n      for (var i_1 in attributeList) {\n        // Split key-value pairs\n        var split = attributeList[i_1].split('=');\n        var key = split[0];\n        // Remove eventual quotes from value\n        var strValue = split[1].replace(/\"/gm, '');\n        // Try to convert value into float\n        var floatValue = parseFloat(strValue);\n        // Use string value case float value is NaN\n        var value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      // Push current item to the resulting data\n      rawData[name].push(itemData);\n    }\n    var font = new BitmapFontData();\n    rawData.info.forEach(function (info) {\n      return font.info.push({\n        face: info.face,\n        size: parseInt(info.size, 10)\n      });\n    });\n    rawData.common.forEach(function (common) {\n      return font.common.push({\n        lineHeight: parseInt(common.lineHeight, 10)\n      });\n    });\n    rawData.page.forEach(function (page) {\n      return font.page.push({\n        id: parseInt(page.id, 10),\n        file: page.file\n      });\n    });\n    rawData.char.forEach(function (char) {\n      return font.char.push({\n        id: parseInt(char.id, 10),\n        page: parseInt(char.page, 10),\n        x: parseInt(char.x, 10),\n        y: parseInt(char.y, 10),\n        width: parseInt(char.width, 10),\n        height: parseInt(char.height, 10),\n        xoffset: parseInt(char.xoffset, 10),\n        yoffset: parseInt(char.yoffset, 10),\n        xadvance: parseInt(char.xadvance, 10)\n      });\n    });\n    rawData.kerning.forEach(function (kerning) {\n      return font.kerning.push({\n        first: parseInt(kerning.first, 10),\n        second: parseInt(kerning.second, 10),\n        amount: parseInt(kerning.amount, 10)\n      });\n    });\n    return font;\n  };\n  return TextFormat;\n}();\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @class\n * @private\n */\nvar XMLFormat = /** @class */function () {\n  function XMLFormat() {}\n  /**\n   * Check if resource refers to xml font data.\n   *\n   * @static\n   * @private\n   * @param {any} data\n   * @return {boolean} True if resource could be treated as font data, false otherwise.\n   */\n  XMLFormat.test = function (data) {\n    return data instanceof XMLDocument && data.getElementsByTagName('page').length && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n  };\n  /**\n   * Convert the XML into BitmapFontData that we can use.\n   *\n   * @static\n   * @private\n   * @param {XMLDocument} xml\n   * @return {BitmapFontData} Data to use for BitmapFont\n   */\n  XMLFormat.parse = function (xml) {\n    var data = new BitmapFontData();\n    var info = xml.getElementsByTagName('info');\n    var common = xml.getElementsByTagName('common');\n    var page = xml.getElementsByTagName('page');\n    var char = xml.getElementsByTagName('char');\n    var kerning = xml.getElementsByTagName('kerning');\n    for (var i = 0; i < info.length; i++) {\n      data.info.push({\n        face: info[i].getAttribute('face'),\n        size: parseInt(info[i].getAttribute('size'), 10)\n      });\n    }\n    for (var i = 0; i < common.length; i++) {\n      data.common.push({\n        lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10)\n      });\n    }\n    for (var i = 0; i < page.length; i++) {\n      data.page.push({\n        id: parseInt(page[i].getAttribute('id'), 10) || 0,\n        file: page[i].getAttribute('file')\n      });\n    }\n    for (var i = 0; i < char.length; i++) {\n      var letter = char[i];\n      data.char.push({\n        id: parseInt(letter.getAttribute('id'), 10),\n        page: parseInt(letter.getAttribute('page'), 10) || 0,\n        x: parseInt(letter.getAttribute('x'), 10),\n        y: parseInt(letter.getAttribute('y'), 10),\n        width: parseInt(letter.getAttribute('width'), 10),\n        height: parseInt(letter.getAttribute('height'), 10),\n        xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n        yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n        xadvance: parseInt(letter.getAttribute('xadvance'), 10)\n      });\n    }\n    for (var i = 0; i < kerning.length; i++) {\n      data.kerning.push({\n        first: parseInt(kerning[i].getAttribute('first'), 10),\n        second: parseInt(kerning[i].getAttribute('second'), 10),\n        amount: parseInt(kerning[i].getAttribute('amount'), 10)\n      });\n    }\n    return data;\n  };\n  return XMLFormat;\n}();\n\n// Registered formats, maybe make this extensible in the future?\nvar formats = [TextFormat, XMLFormat];\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @return {any} Format or null\n */\nfunction autoDetectFormat(data) {\n  for (var i = 0; i < formats.length; i++) {\n    if (formats[i].test(data)) {\n      return formats[i];\n    }\n  }\n  return null;\n}\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n *\n * @private\n * @param {object} style - The style.\n * @param {string[]} lines - The lines of text.\n * @return {string|number|CanvasGradient} The fill style\n */\nfunction generateFillStyle(canvas, context, style, resolution, lines, metrics) {\n  // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n  //       the setter converts to string. See this thread for more details:\n  //       https://github.com/microsoft/TypeScript/issues/2521\n  var fillStyle = style.fill;\n  if (!Array.isArray(fillStyle)) {\n    return fillStyle;\n  } else if (fillStyle.length === 1) {\n    return fillStyle[0];\n  }\n  // the gradient will be evenly spaced out according to how large the array is.\n  // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n  var gradient;\n  // a dropshadow will enlarge the canvas and result in the gradient being\n  // generated with the incorrect dimensions\n  var dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n  // should also take padding into account, padding can offset the gradient\n  var padding = style.padding || 0;\n  var width = Math.ceil(canvas.width / resolution) - dropShadowCorrection - padding * 2;\n  var height = Math.ceil(canvas.height / resolution) - dropShadowCorrection - padding * 2;\n  // make a copy of the style settings, so we can manipulate them later\n  var fill = fillStyle.slice();\n  var fillGradientStops = style.fillGradientStops.slice();\n  // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n  if (!fillGradientStops.length) {\n    var lengthPlus1 = fill.length + 1;\n    for (var i = 1; i < lengthPlus1; ++i) {\n      fillGradientStops.push(i / lengthPlus1);\n    }\n  }\n  // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n  // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n  fill.unshift(fillStyle[0]);\n  fillGradientStops.unshift(0);\n  fill.push(fillStyle[fillStyle.length - 1]);\n  fillGradientStops.push(1);\n  if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL) {\n    // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n    gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n    // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n    // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n    // There's potential for floating point precision issues at the seams between gradient repeats.\n    // The loop below generates the stops in order, so track the last generated one to prevent\n    // floating point precision from making us go the teeniest bit backwards, resulting in\n    // the first and last colors getting swapped.\n    var lastIterationStop = 0;\n    // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n    var textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n    // textHeight, but as a 0-1 size in global gradient stop space\n    var gradStopLineHeight = textHeight / height;\n    for (var i = 0; i < lines.length; i++) {\n      var thisLineTop = metrics.lineHeight * i;\n      for (var j = 0; j < fill.length; j++) {\n        // 0-1 stop point for the current line, multiplied to global space afterwards\n        var lineStop = 0;\n        if (typeof fillGradientStops[j] === 'number') {\n          lineStop = fillGradientStops[j];\n        } else {\n          lineStop = j / fill.length;\n        }\n        var globalStop = thisLineTop / height + lineStop * gradStopLineHeight;\n        // Prevent color stop generation going backwards from floating point imprecision\n        var clampedStop = Math.max(lastIterationStop, globalStop);\n        clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n        gradient.addColorStop(clampedStop, fill[j]);\n        lastIterationStop = clampedStop;\n      }\n    }\n  } else {\n    // start the gradient at the center left of the canvas, and end at the center right of the canvas\n    gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n    // can just evenly space out the gradients in this case, as multiple lines makes no difference\n    // to an even left to right gradient\n    var totalIterations = fill.length + 1;\n    var currentIteration = 1;\n    for (var i = 0; i < fill.length; i++) {\n      var stop = void 0;\n      if (typeof fillGradientStops[i] === 'number') {\n        stop = fillGradientStops[i];\n      } else {\n        stop = currentIteration / totalIterations;\n      }\n      gradient.addColorStop(stop, fill[i]);\n      currentIteration++;\n    }\n  }\n  return gradient;\n}\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nfunction drawGlyph(canvas, context, metrics, x, y, resolution, style) {\n  var char = metrics.text;\n  var fontProperties = metrics.fontProperties;\n  context.translate(x, y);\n  context.scale(resolution, resolution);\n  var tx = style.strokeThickness / 2;\n  var ty = -(style.strokeThickness / 2);\n  context.font = style.toFontString();\n  context.lineWidth = style.strokeThickness;\n  context.textBaseline = style.textBaseline;\n  context.lineJoin = style.lineJoin;\n  context.miterLimit = style.miterLimit;\n  // set canvas text styles\n  context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n  context.strokeStyle = style.stroke;\n  context.font = style.toFontString();\n  context.lineWidth = style.strokeThickness;\n  context.textBaseline = style.textBaseline;\n  context.lineJoin = style.lineJoin;\n  context.miterLimit = style.miterLimit;\n  // set canvas text styles\n  context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n  context.strokeStyle = style.stroke;\n  var dropShadowColor = style.dropShadowColor;\n  var rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n  if (style.dropShadow) {\n    context.shadowColor = \"rgba(\" + rgb[0] * 255 + \",\" + rgb[1] * 255 + \",\" + rgb[2] * 255 + \",\" + style.dropShadowAlpha + \")\";\n    context.shadowBlur = style.dropShadowBlur;\n    context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n    context.shadowOffsetY = Math.sin(style.dropShadowAngle) * style.dropShadowDistance;\n  } else {\n    context.shadowColor = '0';\n    context.shadowBlur = 0;\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n  }\n  if (style.stroke && style.strokeThickness) {\n    context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  if (style.fill) {\n    context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  context.setTransform();\n  context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]}\n */\nfunction resolveCharacters(chars) {\n  // Split the chars string into individual characters\n  if (typeof chars === 'string') {\n    chars = [chars];\n  }\n  // Handle an array of characters+ranges\n  var result = [];\n  for (var i = 0, j = chars.length; i < j; i++) {\n    var item = chars[i];\n    // Handle range delimited by start/end chars\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(\"[BitmapFont]: Invalid character range length, expecting 2 got \" + item.length + \".\");\n      }\n      var startCode = item[0].charCodeAt(0);\n      var endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error('[BitmapFont]: Invalid character range.');\n      }\n      for (var i_1 = startCode, j_1 = endCode; i_1 <= j_1; i_1++) {\n        result.push(String.fromCharCode(i_1));\n      }\n    }\n    // Handle a character set string\n    else {\n      result.push.apply(result, item.split(''));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error('[BitmapFont]: Empty set when resolving characters.');\n  }\n  return result;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n *\n * @class\n * @memberof PIXI\n */\nvar BitmapFont = /** @class */function () {\n  /**\n   * @param {PIXI.BitmapFontData} data\n   * @param {PIXI.Texture[]|Object.<string, PIXI.Texture>} textures\n   */\n  function BitmapFont(data, textures) {\n    var info = data.info[0];\n    var common = data.common[0];\n    var page = data.page[0];\n    var res = getResolutionOfUrl(page.file);\n    var pageTextures = {};\n    /**\n     * The name of the font face.\n     *\n     * @member {string}\n     * @readonly\n     */\n    this.font = info.face;\n    /**\n     * The size of the font face in pixels.\n     *\n     * @member {number}\n     * @readonly\n     */\n    this.size = info.size;\n    /**\n     * The line-height of the font face in pixels.\n     *\n     * @member {number}\n     * @readonly\n     */\n    this.lineHeight = common.lineHeight / res;\n    /**\n     * The map of characters by character code.\n     *\n     * @member {object}\n     * @readonly\n     */\n    this.chars = {};\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     *\n     * @member {object}\n     * @readonly\n     * @private\n     */\n    this.pageTextures = pageTextures;\n    // Convert the input Texture, Textures or object\n    // into a page Texture lookup by \"id\"\n    for (var i = 0; i < data.page.length; i++) {\n      var _a = data.page[i],\n        id = _a.id,\n        file = _a.file;\n      pageTextures[id] = textures instanceof Array ? textures[i] : textures[file];\n    }\n    // parse letters\n    for (var i = 0; i < data.char.length; i++) {\n      var _b = data.char[i],\n        id = _b.id,\n        page_1 = _b.page;\n      var _c = data.char[i],\n        x = _c.x,\n        y = _c.y,\n        width = _c.width,\n        height = _c.height,\n        xoffset = _c.xoffset,\n        yoffset = _c.yoffset,\n        xadvance = _c.xadvance;\n      x /= res;\n      y /= res;\n      width /= res;\n      height /= res;\n      xoffset /= res;\n      yoffset /= res;\n      xadvance /= res;\n      var rect = new Rectangle(x + pageTextures[page_1].frame.x / res, y + pageTextures[page_1].frame.y / res, width, height);\n      this.chars[id] = {\n        xOffset: xoffset,\n        yOffset: yoffset,\n        xAdvance: xadvance,\n        kerning: {},\n        texture: new Texture(pageTextures[page_1].baseTexture, rect),\n        page: page_1\n      };\n    }\n    // parse kernings\n    for (var i = 0; i < data.kerning.length; i++) {\n      var _d = data.kerning[i],\n        first = _d.first,\n        second = _d.second,\n        amount = _d.amount;\n      first /= res;\n      second /= res;\n      amount /= res;\n      if (this.chars[second]) {\n        this.chars[second].kerning[first] = amount;\n      }\n    }\n  }\n  /**\n   * Remove references to created glyph textures.\n   */\n  BitmapFont.prototype.destroy = function () {\n    for (var id in this.chars) {\n      this.chars[id].texture.destroy();\n      this.chars[id].texture = null;\n    }\n    for (var id in this.pageTextures) {\n      this.pageTextures[id].destroy(true);\n      this.pageTextures[id] = null;\n    }\n    // Set readonly null.\n    this.chars = null;\n    this.pageTextures = null;\n  };\n  /**\n   * Register a new bitmap font.\n   *\n   * @static\n   * @param {XMLDocument|string|PIXI.BitmapFontData} data - The\n   *        characters map that could be provided as xml or raw string.\n   * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]}\n   *        textures - List of textures for each page.\n   * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n   *         and char fields.\n   */\n  BitmapFont.install = function (data, textures) {\n    var fontData;\n    if (data instanceof BitmapFontData) {\n      fontData = data;\n    } else {\n      var format = autoDetectFormat(data);\n      if (!format) {\n        throw new Error('Unrecognized data format for font.');\n      }\n      fontData = format.parse(data);\n    }\n    // Single texture, convert to list\n    if (textures instanceof Texture) {\n      textures = [textures];\n    }\n    var font = new BitmapFont(fontData, textures);\n    BitmapFont.available[font.font] = font;\n    return font;\n  };\n  /**\n   * Remove bitmap font by name.\n   *\n   * @static\n   * @param {string} name\n   */\n  BitmapFont.uninstall = function (name) {\n    var font = BitmapFont.available[name];\n    if (!font) {\n      throw new Error(\"No font found named '\" + name + \"'\");\n    }\n    font.destroy();\n    delete BitmapFont.available[name];\n  };\n  /**\n   * Generates a bitmap-font for the given style and character set. This does not support\n   * kernings yet. With `style` properties, only the following non-layout properties are used:\n   *\n   * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n   * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n   * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n   * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n   * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n   * - {@link PIXI.TextStyle#fill|fill}\n   * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n   * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n   * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n   * - {@link PIXI.TextStyle#fontSize|fontSize}\n   * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n   * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n   * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n   * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n   * - {@link PIXI.TextStyle#stroke|stroke}\n   * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n   * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n   *\n   * @param {string} name - The name of the custom font to use with BitmapText.\n   * @param {object|PIXI.TextStyle} [style] - Style options to render with BitmapFont.\n   * @param {PIXI.IBitmapFontOptions} [options] - Setup options for font or name of the font.\n   * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n   *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n   *      Don't forget to include spaces ' ' in your character set!\n   * @param {number} [options.resolution=1] - Render resolution for glyphs.\n   * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n   * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n   * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n   * @return {PIXI.BitmapFont} Font generated by style options.\n   * @static\n   * @example\n   * PIXI.BitmapFont.from(\"TitleFont\", {\n   *     fontFamily: \"Arial\",\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: \"purple\"\n   * });\n   *\n   * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n   */\n  BitmapFont.from = function (name, textStyle, options) {\n    if (!name) {\n      throw new Error('[BitmapFont] Property `name` is required.');\n    }\n    var _a = Object.assign({}, BitmapFont.defaultOptions, options),\n      chars = _a.chars,\n      padding = _a.padding,\n      resolution = _a.resolution,\n      textureWidth = _a.textureWidth,\n      textureHeight = _a.textureHeight;\n    var charsList = resolveCharacters(chars);\n    var style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    var lineWidth = textureWidth;\n    var fontData = new BitmapFontData();\n    fontData.info[0] = {\n      face: style.fontFamily,\n      size: style.fontSize\n    };\n    fontData.common[0] = {\n      lineHeight: style.fontSize\n    };\n    var positionX = 0;\n    var positionY = 0;\n    var canvas;\n    var context;\n    var baseTexture;\n    var maxCharHeight = 0;\n    var textures = [];\n    for (var i = 0; i < charsList.length; i++) {\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.width = textureWidth;\n        canvas.height = textureHeight;\n        context = canvas.getContext('2d');\n        baseTexture = new BaseTexture(canvas, {\n          resolution: resolution\n        });\n        textures.push(new Texture(baseTexture));\n        fontData.page.push({\n          id: textures.length - 1,\n          file: ''\n        });\n      }\n      // Measure glyph dimensions\n      var metrics = TextMetrics.measureText(charsList[i], style, false, canvas);\n      var width = metrics.width;\n      var height = Math.ceil(metrics.height);\n      // This is ugly - but italics are given more space so they don't overlap\n      var textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n      // Can't fit char anymore: next canvas please!\n      if (positionY >= textureHeight - height * resolution) {\n        if (positionY === 0) {\n          // We don't want user debugging an infinite loop (or do we? :)\n          throw new Error(\"[BitmapFont] textureHeight \" + textureHeight + \"px is \" + (\"too small for \" + style.fontSize + \"px fonts\"));\n        }\n        --i;\n        // Create new atlas once current has filled up\n        canvas = null;\n        context = null;\n        baseTexture = null;\n        positionY = 0;\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n      maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n      // Wrap line once full row has been rendered\n      if (textureGlyphWidth * resolution + positionX >= lineWidth) {\n        --i;\n        positionY += maxCharHeight * resolution;\n        positionY = Math.ceil(positionY);\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n      drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n      // Unique (numeric) ID mapping to this glyph\n      var id = metrics.text.charCodeAt(0);\n      // Create a texture holding just the glyph\n      fontData.char.push({\n        id: id,\n        page: textures.length - 1,\n        x: positionX / resolution,\n        y: positionY / resolution,\n        width: textureGlyphWidth,\n        height: height,\n        xoffset: 0,\n        yoffset: 0,\n        xadvance: Math.ceil(width - (style.dropShadow ? style.dropShadowDistance : 0) - (style.stroke ? style.strokeThickness : 0))\n      });\n      positionX += (textureGlyphWidth + 2 * padding) * resolution;\n      positionX = Math.ceil(positionX);\n    }\n    var font = new BitmapFont(fontData, textures);\n    // Make it easier to replace a font\n    if (BitmapFont.available[name] !== undefined) {\n      BitmapFont.uninstall(name);\n    }\n    BitmapFont.available[name] = font;\n    return font;\n  };\n  /**\n   * This character set includes all the letters in the alphabet (both lower- and upper- case).\n   * @readonly\n   * @static\n   * @member {string[][]}\n   * @example\n   * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n   */\n  BitmapFont.ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n  /**\n   * This character set includes all decimal digits (from 0 to 9).\n   * @readonly\n   * @static\n   * @member {string[][]}\n   * @example\n   * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n   */\n  BitmapFont.NUMERIC = [['0', '9']];\n  /**\n   * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n   * @readonly\n   * @static\n   * @member {string[][]}\n   */\n  BitmapFont.ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n  /**\n   * This character set consists of all the ASCII table.\n   * @readonly\n   * @static\n   * @member {string[][]}\n   * @see http://www.asciitable.com/\n   */\n  BitmapFont.ASCII = [[' ', '~']];\n  /**\n   * Collection of default options when using `BitmapFont.from`.\n   *\n   * @readonly\n   * @static\n   * @member {PIXI.IBitmapFontOptions}\n   * @property {number} resolution=1\n   * @property {number} textureWidth=512\n   * @property {number} textureHeight=512\n   * @property {number} padding=4\n   * @property {string|string[]|string[][]} chars=PIXI.BitmapFont.ALPHANUMERIC\n   */\n  BitmapFont.defaultOptions = {\n    resolution: 1,\n    textureWidth: 512,\n    textureHeight: 512,\n    padding: 4,\n    chars: BitmapFont.ALPHANUMERIC\n  };\n  /**\n   * Collection of available/installed fonts.\n   *\n   * @readonly\n   * @static\n   * @member {Object.<string, PIXI.BitmapFont>}\n   */\n  BitmapFont.available = {};\n  return BitmapFont;\n}();\n/**\n * @memberof PIXI\n * @interface IBitmapFontOptions\n * @property {string | string[] | string[][]} [chars=PIXI.BitmapFont.ALPHANUMERIC] - the character set to generate\n * @property {number} [resolution=1] - the resolution for rendering\n * @property {number} [padding=4] - the padding between glyphs in the atlas\n * @property {number} [textureWidth=512] - the width of the texture atlas\n * @property {number} [textureHeight=512] - the height of the texture atlas\n */\n\nvar pageMeshDataPool = [];\nvar charRenderDataPool = [];\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {font: \"35px Desyrel\", align: \"right\"});\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nvar BitmapText = /** @class */function (_super) {\n  __extends(BitmapText, _super);\n  /**\n   * @param {string} text - A string that you would like the text to display.\n   * @param {object} style - The style parameters.\n   * @param {string} style.fontName - The installed BitmapFont name.\n   * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n   *.     this will default to the BitmapFont size.\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n   *      does not affect single line text.\n   * @param {number} [style.tint=0xFFFFFF] - The tint color.\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n   * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n   */\n  function BitmapText(text, style) {\n    if (style === void 0) {\n      style = {};\n    }\n    var _this = _super.call(this) || this;\n    _this._tint = 0xFFFFFF;\n    if (style.font) {\n      deprecation('5.3.0', 'PIXI.BitmapText constructor style.font property is deprecated.');\n      _this._upgradeStyle(style);\n    }\n    // Apply the defaults\n    var _a = Object.assign({}, BitmapText.styleDefaults, style),\n      align = _a.align,\n      tint = _a.tint,\n      maxWidth = _a.maxWidth,\n      letterSpacing = _a.letterSpacing,\n      fontName = _a.fontName,\n      fontSize = _a.fontSize;\n    if (!BitmapFont.available[fontName]) {\n      throw new Error(\"Missing BitmapFont \\\"\" + fontName + \"\\\"\");\n    }\n    /**\n     * Collection of page mesh data.\n     *\n     * @member {object}\n     * @private\n     */\n    _this._activePagesMeshData = [];\n    /**\n     * Private tracker for the width of the overall text\n     *\n     * @member {number}\n     * @private\n     */\n    _this._textWidth = 0;\n    /**\n     * Private tracker for the height of the overall text\n     *\n     * @member {number}\n     * @private\n     */\n    _this._textHeight = 0;\n    /**\n     * Private tracker for the current text align.\n     *\n     * @member {string}\n     * @private\n     */\n    _this._align = align;\n    /**\n     * Private tracker for the current tint.\n     *\n     * @member {number}\n     * @private\n     */\n    _this._tint = tint;\n    /**\n     * Private tracker for the current font name.\n     *\n     * @member {string}\n     * @private\n     */\n    _this._fontName = fontName;\n    /**\n     * Private tracker for the current font size.\n     *\n     * @member {number}\n     * @private\n     */\n    _this._fontSize = fontSize || BitmapFont.available[fontName].size;\n    /**\n     * Private tracker for the current text.\n     *\n     * @member {string}\n     * @private\n     */\n    _this._text = text;\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting value to 0\n     *\n     * @member {number}\n     * @private\n     */\n    _this._maxWidth = maxWidth;\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * ie: when trying to vertically align. (Internally used)\n     *\n     * @member {number}\n     * @private\n     */\n    _this._maxLineHeight = 0;\n    /**\n     * Letter spacing. This is useful for setting the space between characters.\n     * @member {number}\n     * @private\n     */\n    _this._letterSpacing = letterSpacing;\n    /**\n     * Text anchor. read-only\n     *\n     * @member {PIXI.ObservablePoint}\n     * @private\n     */\n    _this._anchor = new ObservablePoint(function () {\n      _this.dirty = true;\n    }, _this, 0, 0);\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    _this.roundPixels = settings.ROUND_PIXELS;\n    /**\n     * Set to `true` if the BitmapText needs to be redrawn.\n     *\n     * @member {boolean}\n     */\n    _this.dirty = true;\n    return _this;\n  }\n  /**\n   * Renders text and updates it when needed. This should only be called\n   * if the BitmapFont is regenerated.\n   */\n  BitmapText.prototype.updateText = function () {\n    var _a;\n    var data = BitmapFont.available[this._fontName];\n    var scale = this._fontSize / data.size;\n    var pos = new Point();\n    var chars = [];\n    var lineWidths = [];\n    var text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n    var textLength = text.length;\n    var maxWidth = this._maxWidth * data.size / this._fontSize;\n    var prevCharCode = null;\n    var lastLineWidth = 0;\n    var maxLineWidth = 0;\n    var line = 0;\n    var lastBreakPos = -1;\n    var lastBreakWidth = 0;\n    var spacesRemoved = 0;\n    var maxLineHeight = 0;\n    for (var i = 0; i < textLength; i++) {\n      var charCode = text.charCodeAt(i);\n      var char = text.charAt(i);\n      if (/(?:\\s)/.test(char)) {\n        lastBreakPos = i;\n        lastBreakWidth = lastLineWidth;\n      }\n      if (char === '\\r' || char === '\\n') {\n        lineWidths.push(lastLineWidth);\n        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        ++line;\n        ++spacesRemoved;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        continue;\n      }\n      var charData = data.chars[charCode];\n      if (!charData) {\n        continue;\n      }\n      if (prevCharCode && charData.kerning[prevCharCode]) {\n        pos.x += charData.kerning[prevCharCode];\n      }\n      var charRenderData = charRenderDataPool.pop() || {\n        texture: Texture.EMPTY,\n        line: 0,\n        charCode: 0,\n        position: new Point()\n      };\n      charRenderData.texture = charData.texture;\n      charRenderData.line = line;\n      charRenderData.charCode = charCode;\n      charRenderData.position.x = pos.x + charData.xOffset + this._letterSpacing / 2;\n      charRenderData.position.y = pos.y + charData.yOffset;\n      chars.push(charRenderData);\n      pos.x += charData.xAdvance + this._letterSpacing;\n      lastLineWidth = pos.x;\n      maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height);\n      prevCharCode = charCode;\n      if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth) {\n        ++spacesRemoved;\n        removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n        i = lastBreakPos;\n        lastBreakPos = -1;\n        lineWidths.push(lastBreakWidth);\n        maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n        line++;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n      }\n    }\n    var lastChar = text.charAt(text.length - 1);\n    if (lastChar !== '\\r' && lastChar !== '\\n') {\n      if (/(?:\\s)/.test(lastChar)) {\n        lastLineWidth = lastBreakWidth;\n      }\n      lineWidths.push(lastLineWidth);\n      maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n    }\n    var lineAlignOffsets = [];\n    for (var i = 0; i <= line; i++) {\n      var alignOffset = 0;\n      if (this._align === 'right') {\n        alignOffset = maxLineWidth - lineWidths[i];\n      } else if (this._align === 'center') {\n        alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n      }\n      lineAlignOffsets.push(alignOffset);\n    }\n    var lenChars = chars.length;\n    var pagesMeshData = {};\n    var newPagesMeshData = [];\n    var activePagesMeshData = this._activePagesMeshData;\n    for (var i = 0; i < activePagesMeshData.length; i++) {\n      pageMeshDataPool.push(activePagesMeshData[i]);\n    }\n    for (var i = 0; i < lenChars; i++) {\n      var texture = chars[i].texture;\n      var baseTextureUid = texture.baseTexture.uid;\n      if (!pagesMeshData[baseTextureUid]) {\n        var pageMeshData = pageMeshDataPool.pop();\n        if (!pageMeshData) {\n          var geometry = new MeshGeometry();\n          var material = new MeshMaterial(Texture.EMPTY);\n          var mesh = new Mesh(geometry, material);\n          pageMeshData = {\n            index: 0,\n            indexCount: 0,\n            vertexCount: 0,\n            uvsCount: 0,\n            total: 0,\n            mesh: mesh,\n            vertices: null,\n            uvs: null,\n            indices: null\n          };\n        }\n        // reset data..\n        pageMeshData.index = 0;\n        pageMeshData.indexCount = 0;\n        pageMeshData.vertexCount = 0;\n        pageMeshData.uvsCount = 0;\n        pageMeshData.total = 0;\n        // TODO need to get page texture here somehow..\n        pageMeshData.mesh.texture = new Texture(texture.baseTexture);\n        pageMeshData.mesh.tint = this._tint;\n        newPagesMeshData.push(pageMeshData);\n        pagesMeshData[baseTextureUid] = pageMeshData;\n      }\n      pagesMeshData[baseTextureUid].total++;\n    }\n    // lets find any previously active pageMeshDatas that are no longer required for\n    // the updated text (if any), removed and return them to the pool.\n    for (var i = 0; i < activePagesMeshData.length; i++) {\n      if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1) {\n        this.removeChild(activePagesMeshData[i].mesh);\n      }\n    }\n    // next lets add any new meshes, that have not yet been added to this BitmapText\n    // we only add if its not already a child of this BitmapObject\n    for (var i = 0; i < newPagesMeshData.length; i++) {\n      if (newPagesMeshData[i].mesh.parent !== this) {\n        this.addChild(newPagesMeshData[i].mesh);\n      }\n    }\n    // active page mesh datas are set to be the new pages added.\n    this._activePagesMeshData = newPagesMeshData;\n    for (var i in pagesMeshData) {\n      var pageMeshData = pagesMeshData[i];\n      var total = pageMeshData.total;\n      // lets only allocate new buffers if we can fit the new text in the current ones..\n      // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n      if (!(((_a = pageMeshData.indices) === null || _a === void 0 ? void 0 : _a.length) > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2) {\n        pageMeshData.vertices = new Float32Array(4 * 2 * total);\n        pageMeshData.uvs = new Float32Array(4 * 2 * total);\n        pageMeshData.indices = new Uint16Array(6 * total);\n      }\n      // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n      // to match the number of letters needed\n      pageMeshData.mesh.size = 6 * total;\n    }\n    for (var i = 0; i < lenChars; i++) {\n      var char = chars[i];\n      var xPos = (char.position.x + lineAlignOffsets[char.line]) * scale;\n      var yPos = char.position.y * scale;\n      var texture = char.texture;\n      var pageMesh = pagesMeshData[texture.baseTexture.uid];\n      var textureFrame = texture.frame;\n      var textureUvs = texture._uvs;\n      var index = pageMesh.index++;\n      pageMesh.indices[index * 6 + 0] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 1] = 1 + index * 4;\n      pageMesh.indices[index * 6 + 2] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 3] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 4] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 5] = 3 + index * 4;\n      pageMesh.vertices[index * 8 + 0] = xPos;\n      pageMesh.vertices[index * 8 + 1] = yPos;\n      pageMesh.vertices[index * 8 + 2] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 3] = yPos;\n      pageMesh.vertices[index * 8 + 4] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 5] = yPos + textureFrame.height * scale;\n      pageMesh.vertices[index * 8 + 6] = xPos;\n      pageMesh.vertices[index * 8 + 7] = yPos + textureFrame.height * scale;\n      pageMesh.uvs[index * 8 + 0] = textureUvs.x0;\n      pageMesh.uvs[index * 8 + 1] = textureUvs.y0;\n      pageMesh.uvs[index * 8 + 2] = textureUvs.x1;\n      pageMesh.uvs[index * 8 + 3] = textureUvs.y1;\n      pageMesh.uvs[index * 8 + 4] = textureUvs.x2;\n      pageMesh.uvs[index * 8 + 5] = textureUvs.y2;\n      pageMesh.uvs[index * 8 + 6] = textureUvs.x3;\n      pageMesh.uvs[index * 8 + 7] = textureUvs.y3;\n    }\n    this._textWidth = maxLineWidth * scale;\n    this._textHeight = (pos.y + data.lineHeight) * scale;\n    for (var i in pagesMeshData) {\n      var pageMeshData = pagesMeshData[i];\n      // apply anchor\n      if (this.anchor.x !== 0 || this.anchor.y !== 0) {\n        var vertexCount = 0;\n        var anchorOffsetX = this._textWidth * this.anchor.x;\n        var anchorOffsetY = this._textHeight * this.anchor.y;\n        for (var i_1 = 0; i_1 < pageMeshData.total; i_1++) {\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n        }\n      }\n      this._maxLineHeight = maxLineHeight * scale;\n      var vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n      var textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n      var indexBuffer = pageMeshData.mesh.geometry.getIndex();\n      vertexBuffer.data = pageMeshData.vertices;\n      textureBuffer.data = pageMeshData.uvs;\n      indexBuffer.data = pageMeshData.indices;\n      vertexBuffer.update();\n      textureBuffer.update();\n      indexBuffer.update();\n    }\n    for (var i = 0; i < chars.length; i++) {\n      charRenderDataPool.push(chars[i]);\n    }\n  };\n  /**\n   * Updates the transform of this object\n   *\n   * @private\n   */\n  BitmapText.prototype.updateTransform = function () {\n    this.validate();\n    this.containerUpdateTransform();\n  };\n  /**\n   * Validates text before calling parent's getLocalBounds\n   *\n   * @return {PIXI.Rectangle} The rectangular bounding area\n   */\n  BitmapText.prototype.getLocalBounds = function () {\n    this.validate();\n    return _super.prototype.getLocalBounds.call(this);\n  };\n  /**\n   * Updates text when needed\n   *\n   * @private\n   */\n  BitmapText.prototype.validate = function () {\n    if (this.dirty) {\n      this.updateText();\n      this.dirty = false;\n    }\n  };\n  Object.defineProperty(BitmapText.prototype, \"tint\", {\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @member {number}\n     * @default 0xffffff\n     */\n    get: function () {\n      return this._tint;\n    },\n    set: function (value) {\n      if (this._tint === value) {\n        return;\n      }\n      this._tint = value;\n      for (var i = 0; i < this._activePagesMeshData.length; i++) {\n        this._activePagesMeshData[i].mesh.tint = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"align\", {\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    get: function () {\n      return this._align;\n    },\n    set: function (value) {\n      if (this._align !== value) {\n        this._align = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"fontName\", {\n    /**\n     * The name of the BitmapFont.\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._fontName;\n    },\n    set: function (value) {\n      if (!BitmapFont.available[value]) {\n        throw new Error(\"Missing BitmapFont \\\"\" + value + \"\\\"\");\n      }\n      if (this._fontName !== value) {\n        this._fontName = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"fontSize\", {\n    /**\n     * The size of the font to display.\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._fontSize;\n    },\n    set: function (value) {\n      if (this._fontSize !== value) {\n        this._fontSize = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"anchor\", {\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     *\n     * @member {PIXI.Point | number}\n     */\n    get: function () {\n      return this._anchor;\n    },\n    set: function (value) {\n      if (typeof value === 'number') {\n        this._anchor.set(value);\n      } else {\n        this._anchor.copyFrom(value);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"text\", {\n    /**\n     * The text of the BitmapText object.\n     *\n     * @member {string}\n     */\n    get: function () {\n      return this._text;\n    },\n    set: function (text) {\n      text = String(text === null || text === undefined ? '' : text);\n      if (this._text === text) {\n        return;\n      }\n      this._text = text;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"maxWidth\", {\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._maxWidth;\n    },\n    set: function (value) {\n      if (this._maxWidth === value) {\n        return;\n      }\n      this._maxWidth = value;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"maxLineHeight\", {\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get: function () {\n      this.validate();\n      return this._maxLineHeight;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"textWidth\", {\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get: function () {\n      this.validate();\n      return this._textWidth;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"letterSpacing\", {\n    /**\n     * Additional space between characters.\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._letterSpacing;\n    },\n    set: function (value) {\n      if (this._letterSpacing !== value) {\n        this._letterSpacing = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"textHeight\", {\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get: function () {\n      this.validate();\n      return this._textHeight;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * For backward compatibility, convert old style.font constructor param to fontName & fontSize properties.\n   *\n   * @private\n   * @deprecated since 5.3.0\n   */\n  BitmapText.prototype._upgradeStyle = function (style) {\n    if (typeof style.font === 'string') {\n      var valueSplit = style.font.split(' ');\n      style.fontName = valueSplit.length === 1 ? valueSplit[0] : valueSplit.slice(1).join(' ');\n      if (valueSplit.length >= 2) {\n        style.fontSize = parseInt(valueSplit[0], 10);\n      }\n    } else {\n      style.fontName = style.font.name;\n      style.fontSize = typeof style.font.size === 'number' ? style.font.size : parseInt(style.font.size, 10);\n    }\n  };\n  /**\n   * Register a bitmap font with data and a texture.\n   *\n   * @deprecated since 5.3.0\n   * @see PIXI.BitmapFont.install\n   * @static\n   */\n  BitmapText.registerFont = function (data, textures) {\n    deprecation('5.3.0', 'PIXI.BitmapText.registerFont is deprecated, use PIXI.BitmapFont.install');\n    return BitmapFont.install(data, textures);\n  };\n  Object.defineProperty(BitmapText, \"fonts\", {\n    /**\n     * Get the list of installed fonts.\n     *\n     * @see PIXI.BitmapFont.available\n     * @deprecated since 5.3.0\n     * @static\n     * @readonly\n     * @member {Object.<string, PIXI.BitmapFont>}\n     */\n    get: function () {\n      deprecation('5.3.0', 'PIXI.BitmapText.fonts is deprecated, use PIXI.BitmapFont.available');\n      return BitmapFont.available;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BitmapText.styleDefaults = {\n    align: 'left',\n    tint: 0xFFFFFF,\n    maxWidth: 0,\n    letterSpacing: 0\n  };\n  return BitmapText;\n}(Container);\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nvar BitmapFontLoader = /** @class */function () {\n  function BitmapFontLoader() {}\n  /**\n   * Called when the plugin is installed.\n   *\n   * @see PIXI.Loader.registerPlugin\n   */\n  BitmapFontLoader.add = function () {\n    LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.DOCUMENT);\n  };\n  /**\n   * Called after a resource is loaded.\n   * @see PIXI.Loader.loaderMiddleware\n   * @param {PIXI.LoaderResource} resource\n   * @param {function} next\n   */\n  BitmapFontLoader.use = function (resource, next) {\n    var format = autoDetectFormat(resource.data);\n    // Resource was not recognised as any of the expected font data format\n    if (!format) {\n      next();\n      return;\n    }\n    var baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n    var data = format.parse(resource.data);\n    var textures = {};\n    // Handle completed, when the number of textures\n    // load is the same number as references in the fnt file\n    var completed = function (page) {\n      textures[page.metadata.pageFile] = page.texture;\n      if (Object.keys(textures).length === data.page.length) {\n        resource.bitmapFont = BitmapFont.install(data, textures);\n        next();\n      }\n    };\n    for (var i = 0; i < data.page.length; ++i) {\n      var pageFile = data.page[i].file;\n      var url = baseUrl + pageFile;\n      var exists = false;\n      // incase the image is loaded outside\n      // using the same loader, resource will be available\n      for (var name in this.resources) {\n        var bitmapResource = this.resources[name];\n        if (bitmapResource.url === url) {\n          bitmapResource.metadata.pageFile = pageFile;\n          if (bitmapResource.texture) {\n            completed(bitmapResource);\n          } else {\n            bitmapResource.onAfterMiddleware.add(completed);\n          }\n          exists = true;\n          break;\n        }\n      }\n      // texture is not loaded, we'll attempt to add\n      // it to the load and add the texture to the list\n      if (!exists) {\n        // Standard loading options for images\n        var options = {\n          crossOrigin: resource.crossOrigin,\n          loadType: LoaderResource.LOAD_TYPE.IMAGE,\n          metadata: Object.assign({\n            pageFile: pageFile\n          }, resource.metadata.imageMetadata),\n          parentResource: resource\n        };\n        this.add(url, options, completed);\n      }\n    }\n  };\n  /**\n   * Get folder path from a resource\n   * @private\n   * @param {PIXI.Loader} loader\n   * @param {PIXI.LoaderResource} resource\n   * @return {string}\n   */\n  BitmapFontLoader.getBaseUrl = function (loader, resource) {\n    var resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n    if (resource.isDataUrl) {\n      if (resUrl === '.') {\n        resUrl = '';\n      }\n      if (loader.baseUrl && resUrl) {\n        // if baseurl has a trailing slash then add one to resUrl so the replace works below\n        if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/') {\n          resUrl += '/';\n        }\n      }\n    }\n    // remove baseUrl from resUrl\n    resUrl = resUrl.replace(loader.baseUrl, '');\n    // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n    if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/') {\n      resUrl += '/';\n    }\n    return resUrl;\n  };\n  /**\n   * Replacement for NodeJS's path.dirname\n   * @private\n   * @param {string} url - Path to get directory for\n   */\n  BitmapFontLoader.dirname = function (url) {\n    var dir = url.replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n    .replace(/\\/$/, '') // replace trailing slash\n    .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n    // File request is relative, use current directory\n    if (dir === url) {\n      return '.';\n    }\n    // Started with a slash\n    else if (dir === '') {\n      return '/';\n    }\n    return dir;\n  };\n  return BitmapFontLoader;\n}();\nexport { BitmapFont, BitmapFontData, BitmapFontLoader, BitmapText };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","BitmapFontData","info","common","page","char","kerning","TextFormat","test","data","indexOf","parse","txt","items","match","rawData","chars","i","name","attributeList","itemData","i_1","split","key","strValue","replace","floatValue","parseFloat","value","isNaN","push","font","forEach","face","size","parseInt","lineHeight","id","file","x","y","width","height","xoffset","yoffset","xadvance","first","second","amount","XMLFormat","XMLDocument","getElementsByTagName","length","getAttribute","xml","letter","formats","autoDetectFormat","generateFillStyle","canvas","context","style","resolution","lines","metrics","fillStyle","fill","isArray","gradient","dropShadowCorrection","dropShadow","dropShadowDistance","padding","Math","ceil","slice","fillGradientStops","lengthPlus1","unshift","fillGradientType","TEXT_GRADIENT","LINEAR_VERTICAL","createLinearGradient","lastIterationStop","textHeight","fontProperties","fontSize","strokeThickness","gradStopLineHeight","thisLineTop","j","lineStop","globalStop","clampedStop","max","min","addColorStop","totalIterations","currentIteration","stop","drawGlyph","text","translate","scale","tx","ty","toFontString","lineWidth","textBaseline","lineJoin","miterLimit","strokeStyle","stroke","dropShadowColor","rgb","hex2rgb","string2hex","shadowColor","dropShadowAlpha","shadowBlur","dropShadowBlur","shadowOffsetX","cos","dropShadowAngle","shadowOffsetY","sin","strokeText","descent","fillText","setTransform","resolveCharacters","result","item","Error","startCode","charCodeAt","endCode","j_1","String","fromCharCode","apply","BitmapFont","textures","res","getResolutionOfUrl","pageTextures","_a","_b","page_1","_c","rect","Rectangle","frame","xOffset","yOffset","xAdvance","texture","Texture","baseTexture","_d","destroy","install","fontData","format","available","uninstall","from","textStyle","options","assign","defaultOptions","textureWidth","textureHeight","charsList","TextStyle","fontFamily","positionX","positionY","maxCharHeight","document","createElement","getContext","BaseTexture","TextMetrics","measureText","textureGlyphWidth","fontStyle","undefined","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","pageMeshDataPool","charRenderDataPool","BitmapText","_super","_this","call","_tint","deprecation","_upgradeStyle","styleDefaults","align","tint","maxWidth","letterSpacing","fontName","_activePagesMeshData","_textWidth","_textHeight","_align","_fontName","_fontSize","_text","_maxWidth","_maxLineHeight","_letterSpacing","_anchor","ObservablePoint","dirty","roundPixels","settings","ROUND_PIXELS","updateText","pos","Point","lineWidths","textLength","prevCharCode","lastLineWidth","maxLineWidth","line","lastBreakPos","lastBreakWidth","spacesRemoved","maxLineHeight","charCode","charAt","charData","charRenderData","pop","EMPTY","position","removeItems","lastChar","lineAlignOffsets","alignOffset","lenChars","pagesMeshData","newPagesMeshData","activePagesMeshData","baseTextureUid","uid","pageMeshData","geometry","MeshGeometry","material","MeshMaterial","mesh","Mesh","index","indexCount","vertexCount","uvsCount","total","vertices","uvs","indices","removeChild","parent","addChild","BATCHABLE_SIZE","Float32Array","Uint16Array","xPos","yPos","pageMesh","textureFrame","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","anchor","anchorOffsetX","anchorOffsetY","vertexBuffer","getBuffer","textureBuffer","indexBuffer","getIndex","update","updateTransform","validate","containerUpdateTransform","getLocalBounds","defineProperty","get","set","copyFrom","valueSplit","join","registerFont","Container","BitmapFontLoader","add","LoaderResource","setExtensionXhrType","XHR_RESPONSE_TYPE","DOCUMENT","use","resource","next","baseUrl","getBaseUrl","completed","metadata","pageFile","keys","bitmapFont","url","exists","resources","bitmapResource","onAfterMiddleware","crossOrigin","loadType","LOAD_TYPE","IMAGE","imageMetadata","parentResource","loader","resUrl","isDataUrl","dirname","dir"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/BitmapFontData.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/formats/TextFormat.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/formats/XMLFormat.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/formats/index.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/utils/generateFillStyle.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/utils/drawGlyph.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/utils/resolveCharacters.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/BitmapFont.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/BitmapText.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/text-bitmap/src/BitmapFontLoader.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n *\n * @class\n * @memberof PIXI\n */\nexport class BitmapFontData\n{\n    public info: IBitmapFontDataInfo[];\n    public common: IBitmapFontDataCommon[];\n    public page: IBitmapFontDataPage[];\n    public char: IBitmapFontDataChar[];\n    public kerning: IBitmapFontDataKerning[];\n\n    constructor()\n    {\n        /**\n         * @member {PIXI.IBitmapFontDataInfo[]}\n         * @readOnly\n         */\n        this.info = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataCommon[]}\n         * @readOnly\n         */\n        this.common = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataPage[]}\n         * @readOnly\n         */\n        this.page = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataChar[]}\n         * @readOnly\n         */\n        this.char = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataKerning[]}\n         * @readOnly\n         */\n        this.kerning = [];\n    }\n}\n\nexport interface IBitmapFontDataInfo {\n    face: string;\n    size: number;\n}\n\nexport interface IBitmapFontDataCommon {\n    lineHeight: number;\n}\n\nexport interface IBitmapFontDataPage {\n    id: number;\n    file: string;\n}\n\nexport interface IBitmapFontDataChar {\n    id: number;\n    page: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n}\n\nexport interface IBitmapFontDataKerning {\n    first: number;\n    second: number;\n    amount: number;\n}\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataInfo\n * @property {string} face\n * @property {number} size\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataCommon\n * @property {number} lineHeight\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataPage\n * @property {number} id\n * @property {string} file\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataChar\n * @property {string} id\n * @property {number} page\n * @property {number} x\n * @property {number} y\n * @property {number} width\n * @property {number} height\n * @property {number} xoffset\n * @property {number} yoffset\n * @property {number} xadvance\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataKerning\n * @property {number} first\n * @property {number} second\n * @property {number} amount\n */\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\ninterface IBitmapFontRawData {\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string;\n        page: string;\n        x: string;\n        y: string;\n        width: string;\n        height: string;\n        xoffset: string;\n        yoffset: string;\n        xadvance: string;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n}\n\n/**\n * BitmapFont format that's Text-based.\n *\n * @class\n * @private\n */\nexport class TextFormat\n{\n    /**\n     * Check if resource refers to txt font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return typeof data === 'string' && data.indexOf('info face=') === 0;\n    }\n\n    /**\n     * Convert text font data to a javascript object.\n     *\n     * @static\n     * @private\n     * @param {string} txt - Raw string data to be converted\n     * @return {PIXI.BitmapFontData} Parsed font data\n     */\n    static parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: IBitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font = new BitmapFontData();\n\n        rawData.info.forEach((info) => font.info.push({\n            face: info.face,\n            size: parseInt(info.size, 10),\n        }));\n\n        rawData.common.forEach((common) => font.common.push({\n            lineHeight: parseInt(common.lineHeight, 10),\n        }));\n\n        rawData.page.forEach((page) => font.page.push({\n            id: parseInt(page.id, 10),\n            file: page.file,\n        }));\n\n        rawData.char.forEach((char) => font.char.push({\n            id: parseInt(char.id, 10),\n            page: parseInt(char.page, 10),\n            x: parseInt(char.x, 10),\n            y: parseInt(char.y, 10),\n            width: parseInt(char.width, 10),\n            height: parseInt(char.height, 10),\n            xoffset: parseInt(char.xoffset, 10),\n            yoffset: parseInt(char.yoffset, 10),\n            xadvance: parseInt(char.xadvance, 10),\n        }));\n\n        rawData.kerning.forEach((kerning) => font.kerning.push({\n            first: parseInt(kerning.first, 10),\n            second: parseInt(kerning.second, 10),\n            amount: parseInt(kerning.amount, 10),\n        }));\n\n        return font;\n    }\n}\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @class\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return data instanceof XMLDocument\n            && data.getElementsByTagName('page').length\n            && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     *\n     * @static\n     * @private\n     * @param {XMLDocument} xml\n     * @return {BitmapFontData} Data to use for BitmapFont\n     */\n    static parse(xml: XMLDocument): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n","import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @return {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n","import { TextStyle, TextMetrics, TEXT_GRADIENT } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n *\n * @private\n * @param {object} style - The style.\n * @param {string[]} lines - The lines of text.\n * @return {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string|CanvasGradient|CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[]|CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = Math.ceil(canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = Math.ceil(canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n","import { generateFillStyle } from './generateFillStyle';\nimport { hex2rgb, string2hex } from '@pixi/utils';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    const dropShadowColor = style.dropShadowColor;\n    const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n    if (style.dropShadow)\n    {\n        context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n        context.shadowBlur = style.dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * style.dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = '0';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform();\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n","/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]}\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...item.split(''));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","import { getResolutionOfUrl } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { TextStyle, TextMetrics } from '@pixi/text';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFontData } from './BitmapFontData';\nimport { resolveCharacters, drawGlyph } from './utils';\n\nimport type { Dict } from '@pixi/utils';\nimport type { ITextStyle } from '@pixi/text';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: Dict<number>;\n}\n\nexport interface IBitmapFontOptions\n{\n    chars?: string | (string | string[])[];\n    resolution?: number;\n    padding?: number;\n    textureWidth?: number;\n    textureHeight?: number;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n *\n * @class\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @readonly\n     * @static\n     * @member {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     *\n     * @readonly\n     * @static\n     * @member {PIXI.IBitmapFontOptions}\n     * @property {number} resolution=1\n     * @property {number} textureWidth=512\n     * @property {number} textureHeight=512\n     * @property {number} padding=4\n     * @property {string|string[]|string[][]} chars=PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /**\n     * Collection of available/installed fonts.\n     *\n     * @readonly\n     * @static\n     * @member {Object.<string, PIXI.BitmapFont>}\n     */\n    public static readonly available: Dict<BitmapFont> = {};\n    public readonly font: string;\n    public readonly size: number;\n    public readonly lineHeight: number;\n    public readonly chars: Dict<IBitmapFontCharacter>;\n    public readonly pageTextures: Dict<Texture>;\n\n    /**\n     * @param {PIXI.BitmapFontData} data\n     * @param {PIXI.Texture[]|Object.<string, PIXI.Texture>} textures\n     */\n    constructor(data: BitmapFontData, textures: Texture[]|Dict<Texture>)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const res = getResolutionOfUrl(page.file);\n        const pageTextures: Dict<Texture> = {};\n\n        /**\n         * The name of the font face.\n         *\n         * @member {string}\n         * @readonly\n         */\n        this.font = info.face;\n\n        /**\n         * The size of the font face in pixels.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.size = info.size;\n\n        /**\n         * The line-height of the font face in pixels.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.lineHeight = common.lineHeight / res;\n\n        /**\n         * The map of characters by character code.\n         *\n         * @member {object}\n         * @readonly\n         */\n        this.chars = {};\n\n        /**\n         * The map of base page textures (i.e., sheets of glyphs).\n         *\n         * @member {object}\n         * @readonly\n         * @private\n         */\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n    }\n\n    /**\n     * Remove references to created glyph textures.\n     */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            this.pageTextures[id].destroy(true);\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     *\n     * @static\n     * @param {XMLDocument|string|PIXI.BitmapFontData} data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]}\n     *        textures - List of textures for each page.\n     * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string|XMLDocument|BitmapFontData,\n        textures: Texture|Texture[]|Dict<Texture>\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     *\n     * @static\n     * @param {string} name\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     *\n     * @param {string} name - The name of the custom font to use with BitmapText.\n     * @param {object|PIXI.TextStyle} [style] - Style options to render with BitmapFont.\n     * @param {PIXI.IBitmapFontOptions} [options] - Setup options for font or name of the font.\n     * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n     *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     *      Don't forget to include spaces ' ' in your character set!\n     * @param {number} [options.resolution=1] - Render resolution for glyphs.\n     * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n     * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n     * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n     * @return {PIXI.BitmapFont} Font generated by style options.\n     * @static\n     * @example\n     * PIXI.BitmapFont.from(\"TitleFont\", {\n     *     fontFamily: \"Arial\",\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: \"purple\"\n     * });\n     *\n     * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight } = Object.assign(\n            {}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas;\n        let context;\n        let baseTexture;\n        let maxCharHeight = 0;\n        const baseTextures = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = document.createElement('canvas');\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const metrics = TextMetrics.measureText(charsList[i], style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is `\n                        + `too small for ${style.fontSize}px fonts`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = metrics.text.charCodeAt(0);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: Math.ceil(width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0)),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        const font = new BitmapFont(fontData, textures);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n\n/**\n * @memberof PIXI\n * @interface IBitmapFontOptions\n * @property {string | string[] | string[][]} [chars=PIXI.BitmapFont.ALPHANUMERIC] - the character set to generate\n * @property {number} [resolution=1] - the resolution for rendering\n * @property {number} [padding=4] - the padding between glyphs in the atlas\n * @property {number} [textureWidth=512] - the width of the texture atlas\n * @property {number} [textureHeight=512] - the height of the texture atlas\n */\n\n","import { ObservablePoint, Point } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { removeItems, deprecation } from '@pixi/utils';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { Dict } from '@pixi/utils';\nimport type { Rectangle } from '@pixi/math';\nimport { Texture } from '@pixi/core';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\nimport type { TextStyleAlign } from '@pixi/text';\nimport type { BitmapFontData } from './BitmapFontData';\nimport { Container } from '@pixi/display';\n\ninterface PageMeshData {\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData {\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n}\n\nconst pageMeshDataPool: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {font: \"35px Desyrel\", align: \"right\"});\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n    public roundPixels: boolean;\n    public dirty: boolean;\n    protected _textWidth: number;\n    protected _textHeight: number;\n    protected _text: string;\n    protected _maxWidth: number;\n    protected _maxLineHeight: number;\n    protected _letterSpacing: number;\n    protected _anchor: ObservablePoint;\n    protected _fontName: string;\n    protected _fontSize: number;\n    protected _align: TextStyleAlign;\n    protected _activePagesMeshData: PageMeshData[];\n    protected _tint = 0xFFFFFF;\n\n    /**\n     * @param {string} text - A string that you would like the text to display.\n     * @param {object} style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *      does not affect single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        if (style.font)\n        {\n            deprecation('5.3.0', 'PIXI.BitmapText constructor style.font property is deprecated.');\n\n            this._upgradeStyle(style);\n        }\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        /**\n         * Collection of page mesh data.\n         *\n         * @member {object}\n         * @private\n         */\n        this._activePagesMeshData = [];\n\n        /**\n         * Private tracker for the width of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textWidth = 0;\n\n        /**\n         * Private tracker for the height of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textHeight = 0;\n\n        /**\n         * Private tracker for the current text align.\n         *\n         * @member {string}\n         * @private\n         */\n        this._align = align;\n\n        /**\n         * Private tracker for the current tint.\n         *\n         * @member {number}\n         * @private\n         */\n        this._tint = tint;\n\n        /**\n         * Private tracker for the current font name.\n         *\n         * @member {string}\n         * @private\n         */\n        this._fontName = fontName;\n\n        /**\n         * Private tracker for the current font size.\n         *\n         * @member {number}\n         * @private\n         */\n        this._fontSize = fontSize || BitmapFont.available[fontName].size;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = text;\n\n        /**\n         * The max width of this bitmap text in pixels. If the text provided is longer than the\n         * value provided, line breaks will be automatically inserted in the last whitespace.\n         * Disable by setting value to 0\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxWidth = maxWidth;\n\n        /**\n         * The max line height. This is useful when trying to use the total height of the Text,\n         * ie: when trying to vertically align. (Internally used)\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxLineHeight = 0;\n\n        /**\n         * Letter spacing. This is useful for setting the space between characters.\n         * @member {number}\n         * @private\n         */\n        this._letterSpacing = letterSpacing;\n\n        /**\n         * Text anchor. read-only\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default PIXI.settings.ROUND_PIXELS\n         */\n        this.roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Set to `true` if the BitmapText needs to be redrawn.\n         *\n         * @member {boolean}\n         */\n        this.dirty = true;\n    }\n\n    /**\n     * Renders text and updates it when needed. This should only be called\n     * if the BitmapFont is regenerated.\n     */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const scale = this._fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const textLength = text.length;\n        const maxWidth = this._maxWidth * data.size / this._fontSize;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n\n        for (let i = 0; i < textLength; i++)\n        {\n            const charCode = text.charCodeAt(i);\n            const char = text.charAt(i);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = pos.x + charData.xOffset + (this._letterSpacing / 2);\n            charRenderData.position.y = pos.y + charData.yOffset;\n\n            chars.push(charRenderData);\n\n            pos.x += charData.xAdvance + this._letterSpacing;\n            lastLineWidth = pos.x;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n            }\n        }\n\n        const lastChar = text.charAt(text.length - 1);\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            pageMeshDataPool.push(activePagesMeshData[i]);\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    const material = new MeshMaterial(Texture.EMPTY);\n\n                    const mesh = new Mesh(geometry, material);\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n                // TODO need to get page texture here somehow..\n                pageMeshData.mesh.texture = new Texture(texture.baseTexture);\n                pageMeshData.mesh.tint = this._tint;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1)\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            const xPos = (char.position.x + lineAlignOffsets[char.line]) * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n    }\n\n    /**\n     * Updates the transform of this object\n     *\n     * @private\n     */\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     *\n     * @return {PIXI.Rectangle} The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     *\n     * @private\n     */\n    protected validate(): void\n    {\n        if (this.dirty)\n        {\n            this.updateText();\n            this.dirty = false;\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @member {number}\n     * @default 0xffffff\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        if (this._tint === value) return;\n\n        this._tint = value;\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The name of the BitmapFont.\n     *\n     * @member {string}\n     */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The size of the font to display.\n     *\n     * @member {number}\n     */\n    public get fontSize(): number\n    {\n        return this._fontSize;\n    }\n\n    public set fontSize(value: number)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     *\n     * @member {PIXI.Point | number}\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /**\n     * The text of the BitmapText object.\n     *\n     * @member {string}\n     */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     *\n     * @member {number}\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /**\n     * Additional space between characters.\n     *\n     * @member {number}\n     */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    /**\n     * For backward compatibility, convert old style.font constructor param to fontName & fontSize properties.\n     *\n     * @private\n     * @deprecated since 5.3.0\n     */\n    _upgradeStyle(style: Partial<IBitmapTextStyle>): void\n    {\n        if (typeof style.font === 'string')\n        {\n            const valueSplit = style.font.split(' ');\n\n            style.fontName = valueSplit.length === 1\n                ? valueSplit[0]\n                : valueSplit.slice(1).join(' ');\n\n            if (valueSplit.length >= 2)\n            {\n                style.fontSize = parseInt(valueSplit[0], 10);\n            }\n        }\n        else\n        {\n            style.fontName = style.font.name;\n            style.fontSize = typeof style.font.size === 'number'\n                ? style.font.size\n                : parseInt(style.font.size, 10);\n        }\n    }\n\n    /**\n     * Register a bitmap font with data and a texture.\n     *\n     * @deprecated since 5.3.0\n     * @see PIXI.BitmapFont.install\n     * @static\n     */\n    static registerFont(data: string|XMLDocument|BitmapFontData, textures: Texture|Texture[]|Dict<Texture>): BitmapFont\n    {\n        deprecation('5.3.0', 'PIXI.BitmapText.registerFont is deprecated, use PIXI.BitmapFont.install');\n\n        return BitmapFont.install(data, textures);\n    }\n\n    /**\n     * Get the list of installed fonts.\n     *\n     * @see PIXI.BitmapFont.available\n     * @deprecated since 5.3.0\n     * @static\n     * @readonly\n     * @member {Object.<string, PIXI.BitmapFont>}\n     */\n    static get fonts(): Dict<BitmapFont>\n    {\n        deprecation('5.3.0', 'PIXI.BitmapText.fonts is deprecated, use PIXI.BitmapFont.available');\n\n        return BitmapFont.available;\n    }\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { ILoaderResource } from '@pixi/loaders';\nimport type { Dict } from '@pixi/utils';\nimport type { Loader } from '@pixi/loaders';\nimport type { Texture } from '@pixi/core';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class BitmapFontLoader\n{\n    /**\n     * Called when the plugin is installed.\n     *\n     * @see PIXI.Loader.registerPlugin\n     */\n    public static add(): void\n    {\n        LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.DOCUMENT);\n    }\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(this: Loader, resource: ILoaderResource, next: (...args: any[]) => void): void\n    {\n        const format = autoDetectFormat(resource.data);\n\n        // Resource was not recognised as any of the expected font data format\n        if (!format)\n        {\n            next();\n\n            return;\n        }\n\n        const baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n        const data = format.parse(resource.data);\n        const textures: Dict<Texture> = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page: ILoaderResource): void =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === data.page.length)\n            {\n                resource.bitmapFont = BitmapFont.install(data, textures);\n                next();\n            }\n        };\n\n        for (let i = 0; i < data.page.length; ++i)\n        {\n            const pageFile = data.page[i].file;\n            const url = baseUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource: ILoaderResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    }\n\n    /**\n     * Get folder path from a resource\n     * @private\n     * @param {PIXI.Loader} loader\n     * @param {PIXI.LoaderResource} resource\n     * @return {string}\n     */\n    private static getBaseUrl(loader: Loader, resource: ILoaderResource): string\n    {\n        let resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (resUrl === '.')\n            {\n                resUrl = '';\n            }\n\n            if (loader.baseUrl && resUrl)\n            {\n                // if baseurl has a trailing slash then add one to resUrl so the replace works below\n                if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/')\n                {\n                    resUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from resUrl\n        resUrl = resUrl.replace(loader.baseUrl, '');\n\n        // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/')\n        {\n            resUrl += '/';\n        }\n\n        return resUrl;\n    }\n\n    /**\n     * Replacement for NodeJS's path.dirname\n     * @private\n     * @param {string} url - Path to get directory for\n     */\n    private static dirname(url: string): string\n    {\n        const dir = url\n            .replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n            .replace(/\\/$/, '') // replace trailing slash\n            .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n\n        // File request is relative, use current directory\n        if (dir === url)\n        {\n            return '.';\n        }\n        // Started with a slash\n        else if (dir === '')\n        {\n            return '/';\n        }\n\n        return dir;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}