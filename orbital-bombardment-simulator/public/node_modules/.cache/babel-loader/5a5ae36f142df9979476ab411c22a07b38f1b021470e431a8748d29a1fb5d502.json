{"ast":null,"code":"/*!\n * @pixi/sprite-tiling - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/sprite-tiling is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { TextureMatrix, Texture, Shader, QuadUv, State, ObjectRenderer } from '@pixi/core';\nimport { Point, Transform, Rectangle, Matrix } from '@pixi/math';\nimport { Sprite } from '@pixi/sprite';\nimport { deprecation, premultiplyTintToRgba, correctBlendMode } from '@pixi/utils';\nimport { WRAP_MODES } from '@pixi/constants';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar tempPoint = new Point();\n/**\n * A tiling sprite is a fast way of rendering a tiling image\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nvar TilingSprite = /** @class */function (_super) {\n  __extends(TilingSprite, _super);\n  /**\n   * @param {PIXI.Texture} texture - the texture of the tiling sprite\n   * @param {number} [width=100] - the width of the tiling sprite\n   * @param {number} [height=100] - the height of the tiling sprite\n   */\n  function TilingSprite(texture, width, height) {\n    if (width === void 0) {\n      width = 100;\n    }\n    if (height === void 0) {\n      height = 100;\n    }\n    var _this = _super.call(this, texture) || this;\n    /**\n     * Tile transform\n     *\n     * @member {PIXI.Transform}\n     */\n    _this.tileTransform = new Transform();\n    /**\n     * The with of the tiling sprite\n     *\n     * @member {number}\n     * @private\n     */\n    _this._width = width;\n    /**\n     * The height of the tiling sprite\n     *\n     * @member {number}\n     * @private\n     */\n    _this._height = height;\n    /**\n     * matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space\n     *\n     * @member {PIXI.TextureMatrix}\n     */\n    _this.uvMatrix = texture.uvMatrix || new TextureMatrix(texture);\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' method.\n     *\n     * @member {string}\n     * @default 'tilingSprite'\n     */\n    _this.pluginName = 'tilingSprite';\n    /**\n     * Whether or not anchor affects uvs\n     *\n     * @member {boolean}\n     * @default false\n     */\n    _this.uvRespectAnchor = false;\n    return _this;\n  }\n  Object.defineProperty(TilingSprite.prototype, \"clampMargin\", {\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     *\n     * @default 0.5\n     * @member {number}\n     */\n    get: function () {\n      return this.uvMatrix.clampMargin;\n    },\n    set: function (value) {\n      this.uvMatrix.clampMargin = value;\n      this.uvMatrix.update(true);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TilingSprite.prototype, \"tileScale\", {\n    /**\n     * The scaling of the image that is being tiled\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get: function () {\n      return this.tileTransform.scale;\n    },\n    set: function (value) {\n      this.tileTransform.scale.copyFrom(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TilingSprite.prototype, \"tilePosition\", {\n    /**\n     * The offset of the image that is being tiled\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get: function () {\n      return this.tileTransform.position;\n    },\n    set: function (value) {\n      this.tileTransform.position.copyFrom(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @protected\n   */\n  TilingSprite.prototype._onTextureUpdate = function () {\n    if (this.uvMatrix) {\n      this.uvMatrix.texture = this._texture;\n    }\n    this._cachedTint = 0xFFFFFF;\n  };\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @protected\n   * @param {PIXI.Renderer} renderer - The renderer\n   */\n  TilingSprite.prototype._render = function (renderer) {\n    // tweak our texture temporarily..\n    var texture = this._texture;\n    if (!texture || !texture.valid) {\n      return;\n    }\n    this.tileTransform.updateLocalTransform();\n    this.uvMatrix.update();\n    renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  };\n  /**\n   * Updates the bounds of the tiling sprite.\n   *\n   * @protected\n   */\n  TilingSprite.prototype._calculateBounds = function () {\n    var minX = this._width * -this._anchor._x;\n    var minY = this._height * -this._anchor._y;\n    var maxX = this._width * (1 - this._anchor._x);\n    var maxY = this._height * (1 - this._anchor._y);\n    this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n  };\n  /**\n   * Gets the local bounds of the sprite object.\n   *\n   * @param {PIXI.Rectangle} rect - The output rectangle.\n   * @return {PIXI.Rectangle} The bounds.\n   */\n  TilingSprite.prototype.getLocalBounds = function (rect) {\n    // we can do a fast local bounds if the sprite has no children!\n    if (this.children.length === 0) {\n      this._bounds.minX = this._width * -this._anchor._x;\n      this._bounds.minY = this._height * -this._anchor._y;\n      this._bounds.maxX = this._width * (1 - this._anchor._x);\n      this._bounds.maxY = this._height * (1 - this._anchor._y);\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new Rectangle();\n        }\n        rect = this._localBoundsRect;\n      }\n      return this._bounds.getRectangle(rect);\n    }\n    return _super.prototype.getLocalBounds.call(this, rect);\n  };\n  /**\n   * Checks if a point is inside this tiling sprite.\n   *\n   * @param {PIXI.IPointData} point - the point to check\n   * @return {boolean} Whether or not the sprite contains the point.\n   */\n  TilingSprite.prototype.containsPoint = function (point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    var width = this._width;\n    var height = this._height;\n    var x1 = -width * this.anchor._x;\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      var y1 = -height * this.anchor._y;\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Destroys this sprite and optionally its texture and children\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n  TilingSprite.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n    this.tileTransform = null;\n    this.uvMatrix = null;\n  };\n  /**\n   * Helper function that creates a new tiling sprite based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   *\n   * @static\n   * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n   * @param {Object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n   * @param {number} options.width - required width of the tiling sprite\n   * @param {number} options.height - required height of the tiling sprite\n   * @return {PIXI.TilingSprite} The newly created texture\n   */\n  TilingSprite.from = function (source, options) {\n    // Deprecated\n    if (typeof options === 'number') {\n      deprecation('5.3.0', 'TilingSprite.from use options instead of width and height args');\n      // eslint-disable-next-line prefer-rest-params\n      options = {\n        width: options,\n        height: arguments[2]\n      };\n    }\n    return new TilingSprite(Texture.from(source, options), options.width, options.height);\n  };\n  Object.defineProperty(TilingSprite.prototype, \"width\", {\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TilingSprite.prototype, \"height\", {\n    /**\n     * The height of the TilingSprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TilingSprite;\n}(Sprite);\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTransform;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\nvar fragment = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\nuniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\\n\\nvoid main(void)\\n{\\n    vec2 coord = vTextureCoord - floor(vTextureCoord - uClampOffset);\\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\\n\\n    vec4 texSample = texture2D(uSampler, coord);\\n    gl_FragColor = texSample * uColor;\\n}\\n\";\nvar fragmentSimple = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec4 sample = texture2D(uSampler, vTextureCoord);\\n    gl_FragColor = sample * uColor;\\n}\\n\";\nvar tempMat = new Matrix();\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nvar TilingSpriteRenderer = /** @class */function (_super) {\n  __extends(TilingSpriteRenderer, _super);\n  /**\n   * constructor for renderer\n   *\n   * @param {PIXI.Renderer} renderer - The renderer this tiling awesomeness works for.\n   */\n  function TilingSpriteRenderer(renderer) {\n    var _this = _super.call(this, renderer) || this;\n    var uniforms = {\n      globals: _this.renderer.globalUniforms\n    };\n    _this.shader = Shader.from(vertex, fragment, uniforms);\n    _this.simpleShader = Shader.from(vertex, fragmentSimple, uniforms);\n    _this.quad = new QuadUv();\n    /**\n     * The WebGL state in which this renderer will work.\n     *\n     * @member {PIXI.State}\n     * @readonly\n     */\n    _this.state = State.for2d();\n    return _this;\n  }\n  /**\n   *\n   * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered\n   */\n  TilingSpriteRenderer.prototype.render = function (ts) {\n    var renderer = this.renderer;\n    var quad = this.quad;\n    var vertices = quad.vertices;\n    vertices[0] = vertices[6] = ts._width * -ts.anchor.x;\n    vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n    vertices[2] = vertices[4] = ts._width * (1.0 - ts.anchor.x);\n    vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n    if (ts.uvRespectAnchor) {\n      vertices = quad.uvs;\n      vertices[0] = vertices[6] = -ts.anchor.x;\n      vertices[1] = vertices[3] = -ts.anchor.y;\n      vertices[2] = vertices[4] = 1.0 - ts.anchor.x;\n      vertices[5] = vertices[7] = 1.0 - ts.anchor.y;\n    }\n    quad.invalidate();\n    var tex = ts._texture;\n    var baseTex = tex.baseTexture;\n    var lt = ts.tileTransform.localTransform;\n    var uv = ts.uvMatrix;\n    var isSimple = baseTex.isPowerOfTwo && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n    // auto, force repeat wrapMode for big tiling textures\n    if (isSimple) {\n      if (!baseTex._glTextures[renderer.CONTEXT_UID]) {\n        if (baseTex.wrapMode === WRAP_MODES.CLAMP) {\n          baseTex.wrapMode = WRAP_MODES.REPEAT;\n        }\n      } else {\n        isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n      }\n    }\n    var shader = isSimple ? this.simpleShader : this.shader;\n    var w = tex.width;\n    var h = tex.height;\n    var W = ts._width;\n    var H = ts._height;\n    tempMat.set(lt.a * w / W, lt.b * w / H, lt.c * h / W, lt.d * h / H, lt.tx / W, lt.ty / H);\n    // that part is the same as above:\n    // tempMat.identity();\n    // tempMat.scale(tex.width, tex.height);\n    // tempMat.prepend(lt);\n    // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n    tempMat.invert();\n    if (isSimple) {\n      tempMat.prepend(uv.mapCoord);\n    } else {\n      shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n      shader.uniforms.uClampFrame = uv.uClampFrame;\n      shader.uniforms.uClampOffset = uv.uClampOffset;\n    }\n    shader.uniforms.uTransform = tempMat.toArray(true);\n    shader.uniforms.uColor = premultiplyTintToRgba(ts.tint, ts.worldAlpha, shader.uniforms.uColor, baseTex.alphaMode);\n    shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n    shader.uniforms.uSampler = tex;\n    renderer.shader.bind(shader);\n    renderer.geometry.bind(quad);\n    this.state.blendMode = correctBlendMode(ts.blendMode, baseTex.alphaMode);\n    renderer.state.set(this.state);\n    renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n  };\n  return TilingSpriteRenderer;\n}(ObjectRenderer);\nexport { TilingSprite, TilingSpriteRenderer };","map":{"version":3,"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","tempPoint","Point","TilingSprite","_super","texture","width","height","_this","call","tileTransform","Transform","_width","_height","uvMatrix","TextureMatrix","pluginName","uvRespectAnchor","defineProperty","get","clampMargin","set","value","update","scale","copyFrom","position","_onTextureUpdate","_texture","_cachedTint","_render","renderer","valid","updateLocalTransform","batch","setObjectRenderer","plugins","render","_calculateBounds","minX","_anchor","_x","minY","_y","maxX","maxY","_bounds","addFrame","transform","getLocalBounds","rect","children","length","_localBoundsRect","Rectangle","getRectangle","containsPoint","point","worldTransform","applyInverse","x1","anchor","x","y1","y","destroy","options","from","source","deprecation","arguments","Texture","Sprite","tempMat","Matrix","TilingSpriteRenderer","uniforms","globals","globalUniforms","shader","Shader","vertex","fragment","simpleShader","fragmentSimple","quad","QuadUv","state","State","for2d","ts","vertices","uvs","invalidate","tex","baseTex","baseTexture","lt","localTransform","uv","isSimple","isPowerOfTwo","frame","_glTextures","CONTEXT_UID","wrapMode","WRAP_MODES","CLAMP","REPEAT","w","h","W","H","a","c","tx","ty","invert","prepend","mapCoord","uMapCoord","toArray","uClampFrame","uClampOffset","uTransform","uColor","premultiplyTintToRgba","tint","worldAlpha","alphaMode","translationMatrix","uSampler","bind","geometry","blendMode","correctBlendMode","draw","gl","TRIANGLES","ObjectRenderer"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/node_modules/tslib/tslib.es6.js","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/sprite-tiling/src/TilingSprite.ts","/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/node_modules/@pixi/sprite-tiling/src/TilingSpriteRenderer.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Texture, TextureMatrix } from '@pixi/core';\nimport { Point, Rectangle, Transform  } from '@pixi/math';\nimport { Sprite } from '@pixi/sprite';\nimport { deprecation } from '@pixi/utils';\nimport type { Renderer, IBaseTextureOptions, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { IPoint, IPointData, ISize, ObservablePoint } from '@pixi/math';\n\nconst tempPoint = new Point();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TilingSprite extends GlobalMixins.TilingSprite {}\n\n/**\n * A tiling sprite is a fast way of rendering a tiling image\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class TilingSprite extends Sprite\n{\n    public tileTransform: Transform;\n    public uvMatrix: TextureMatrix;\n    public uvRespectAnchor: boolean;\n\n    /**\n     * @param {PIXI.Texture} texture - the texture of the tiling sprite\n     * @param {number} [width=100] - the width of the tiling sprite\n     * @param {number} [height=100] - the height of the tiling sprite\n     */\n    constructor(texture: Texture, width = 100, height = 100)\n    {\n        super(texture);\n\n        /**\n         * Tile transform\n         *\n         * @member {PIXI.Transform}\n         */\n        this.tileTransform = new Transform();\n\n        /**\n         * The with of the tiling sprite\n         *\n         * @member {number}\n         * @private\n         */\n        this._width = width;\n\n        /**\n         * The height of the tiling sprite\n         *\n         * @member {number}\n         * @private\n         */\n        this._height = height;\n\n        /**\n         * matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space\n         *\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = texture.uvMatrix || new TextureMatrix(texture);\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         *\n         * @member {string}\n         * @default 'tilingSprite'\n         */\n        this.pluginName = 'tilingSprite';\n\n        /**\n         * Whether or not anchor affects uvs\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.uvRespectAnchor = false;\n    }\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     *\n     * @default 0.5\n     * @member {number}\n     */\n    get clampMargin(): number\n    {\n        return this.uvMatrix.clampMargin;\n    }\n\n    set clampMargin(value: number)\n    {\n        this.uvMatrix.clampMargin = value;\n        this.uvMatrix.update(true);\n    }\n\n    /**\n     * The scaling of the image that is being tiled\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get tileScale(): ObservablePoint\n    {\n        return this.tileTransform.scale;\n    }\n\n    set tileScale(value: ObservablePoint)\n    {\n        this.tileTransform.scale.copyFrom(value as IPoint);\n    }\n\n    /**\n     * The offset of the image that is being tiled\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get tilePosition(): ObservablePoint\n    {\n        return this.tileTransform.position;\n    }\n\n    set tilePosition(value: ObservablePoint)\n    {\n        this.tileTransform.position.copyFrom(value as IPoint);\n    }\n\n    /**\n     * @protected\n     */\n    protected _onTextureUpdate(): void\n    {\n        if (this.uvMatrix)\n        {\n            this.uvMatrix.texture = this._texture;\n        }\n        this._cachedTint = 0xFFFFFF;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // tweak our texture temporarily..\n        const texture = this._texture;\n\n        if (!texture || !texture.valid)\n        {\n            return;\n        }\n\n        this.tileTransform.updateLocalTransform();\n        this.uvMatrix.update();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n     * Updates the bounds of the tiling sprite.\n     *\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        const minX = this._width * -this._anchor._x;\n        const minY = this._height * -this._anchor._y;\n        const maxX = this._width * (1 - this._anchor._x);\n        const maxY = this._height * (1 - this._anchor._y);\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    public getLocalBounds(rect: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._width * -this._anchor._x;\n            this._bounds.minY = this._height * -this._anchor._y;\n            this._bounds.maxX = this._width * (1 - this._anchor._x);\n            this._bounds.maxY = this._height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Checks if a point is inside this tiling sprite.\n     *\n     * @param {PIXI.IPointData} point - the point to check\n     * @return {boolean} Whether or not the sprite contains the point.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._width;\n        const height = this._height;\n        const x1 = -width * this.anchor._x;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            const y1 = -height * this.anchor._y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this.tileTransform = null;\n        this.uvMatrix = null;\n    }\n\n    /**\n     * Helper function that creates a new tiling sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {Object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {number} options.width - required width of the tiling sprite\n     * @param {number} options.height - required height of the tiling sprite\n     * @return {PIXI.TilingSprite} The newly created texture\n     */\n    static from(source: TextureSource, options: ISize & IBaseTextureOptions): TilingSprite\n    {\n        // Deprecated\n        if (typeof options === 'number')\n        {\n            deprecation('5.3.0', 'TilingSprite.from use options instead of width and height args');\n            // eslint-disable-next-line prefer-rest-params\n            options = { width: options, height: arguments[2] } as ISize;\n        }\n\n        return new TilingSprite(\n            Texture.from(source, options),\n            options.width,\n            options.height\n        );\n    }\n\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n    }\n\n    /**\n     * The height of the TilingSprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n    }\n}\n","import { ObjectRenderer, Shader, State, QuadUv } from '@pixi/core';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba, correctBlendMode } from '@pixi/utils';\n\nimport vertex from './tilingSprite.vert';\nimport fragment from './tilingSprite.frag';\nimport fragmentSimple from './tilingSprite_simple.frag';\n\nimport type { Renderer } from '@pixi/core';\nimport type { TilingSprite } from './TilingSprite';\n\nconst tempMat = new Matrix();\n\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport class TilingSpriteRenderer extends ObjectRenderer\n{\n    public shader: Shader;\n    public simpleShader: Shader;\n    public quad: QuadUv;\n    public readonly state: State;\n\n    /**\n     * constructor for renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        const uniforms = { globals: this.renderer.globalUniforms };\n\n        this.shader = Shader.from(vertex, fragment, uniforms);\n\n        this.simpleShader = Shader.from(vertex, fragmentSimple, uniforms);\n\n        this.quad = new QuadUv();\n\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.state = State.for2d();\n    }\n\n    /**\n     *\n     * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered\n     */\n    public render(ts: TilingSprite): void\n    {\n        const renderer = this.renderer;\n        const quad = this.quad;\n\n        let vertices = quad.vertices;\n\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n\n        if (ts.uvRespectAnchor)\n        {\n            vertices = quad.uvs;\n\n            vertices[0] = vertices[6] = -ts.anchor.x;\n            vertices[1] = vertices[3] = -ts.anchor.y;\n\n            vertices[2] = vertices[4] = 1.0 - ts.anchor.x;\n            vertices[5] = vertices[7] = 1.0 - ts.anchor.y;\n        }\n\n        quad.invalidate();\n\n        const tex = ts._texture;\n        const baseTex = tex.baseTexture;\n        const lt = ts.tileTransform.localTransform;\n        const uv = ts.uvMatrix;\n        let isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple)\n        {\n            if (!baseTex._glTextures[renderer.CONTEXT_UID])\n            {\n                if (baseTex.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    baseTex.wrapMode = WRAP_MODES.REPEAT;\n                }\n            }\n            else\n            {\n                isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n            }\n        }\n\n        const shader = isSimple ? this.simpleShader : this.shader;\n\n        const w = tex.width;\n        const h = tex.height;\n        const W = ts._width;\n        const H = ts._height;\n\n        tempMat.set(lt.a * w / W,\n            lt.b * w / H,\n            lt.c * h / W,\n            lt.d * h / H,\n            lt.tx / W,\n            lt.ty / H);\n\n        // that part is the same as above:\n        // tempMat.identity();\n        // tempMat.scale(tex.width, tex.height);\n        // tempMat.prepend(lt);\n        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n        tempMat.invert();\n        if (isSimple)\n        {\n            tempMat.prepend(uv.mapCoord);\n        }\n        else\n        {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n\n        shader.uniforms.uTransform = tempMat.toArray(true);\n        shader.uniforms.uColor = premultiplyTintToRgba(ts.tint, ts.worldAlpha,\n            shader.uniforms.uColor, baseTex.alphaMode as any);\n        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n        shader.uniforms.uSampler = tex;\n\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(quad);\n\n        this.state.blendMode = correctBlendMode(ts.blendMode, baseTex.alphaMode as any);\n        renderer.state.set(this.state);\n        renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n    }\n}\n"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,IAAIA,aAAa,GAAG,SAAAA,CAASC,CAAC,EAAEC,CAAC,EAAE;EAC/BF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;IAAEC,SAAS,EAAE;EAAE,CAAE,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;IAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;EAAC,CAAG,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;IAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC;MAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC;QAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;MAAA;IAAA;EAAC,CAAE;EAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;CAC7B;AAED,SAAgBO,SAASA,CAACR,CAAC,EAAEC,CAAC,EAAE;EAC5BF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EACnB,SAASQ,EAAEA,CAAA,EAAG;IAAE,IAAI,CAACC,WAAW,GAAGV,CAAC;EAAC;EACrCA,CAAC,CAACW,SAAS,GAAGV,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACU,MAAM,CAACX,CAAC,CAAC,IAAIQ,EAAE,CAACE,SAAS,GAAGV,CAAC,CAACU,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;;AClBxF,IAAMI,SAAS,GAAG,IAAIC,KAAK,EAAE;;;;;;;;AAY7B,IAAAC,YAAA,0BAAAC,MAAA;EAAkCR,SAAA,CAAAO,YAAA,EAAAC,MAAA;;;;;;EAW9B,SAAAD,aAAYE,OAAgB,EAAEC,KAAW,EAAEC,MAAY;IAAzB,IAAAD,KAAA;MAAAA,KAAA,MAAW;IAAA;IAAE,IAAAC,MAAA;MAAAA,MAAA,MAAY;IAAA;IAAvD,IAAAC,KAAA,GAEIJ,MAAA,CAAAK,IAAA,OAAMJ,OAAO,CAAC;;;;;;IAOdG,KAAI,CAACE,aAAa,GAAG,IAAIC,SAAS,EAAE;;;;;;;IAQpCH,KAAI,CAACI,MAAM,GAAGN,KAAK;;;;;;;IAQnBE,KAAI,CAACK,OAAO,GAAGN,MAAM;;;;;;IAOrBC,KAAI,CAACM,QAAQ,GAAGT,OAAO,CAACS,QAAQ,IAAI,IAAIC,aAAa,CAACV,OAAO,CAAC;;;;;;;;IAS9DG,KAAI,CAACQ,UAAU,GAAG,cAAc;;;;;;;IAQhCR,KAAI,CAACS,eAAe,GAAG,KAAK;;;EAShC3B,MAAA,CAAA4B,cAAA,CAAIf,YAAA,CAAAJ,SAAA,eAAW;;;;;;;;SAAf,SAAAoB,CAAA;MAEI,OAAO,IAAI,CAACL,QAAQ,CAACM,WAAW;KACnC;SAED,SAAAC,CAAgBC,KAAa;MAEzB,IAAI,CAACR,QAAQ,CAACM,WAAW,GAAGE,KAAK;MACjC,IAAI,CAACR,QAAQ,CAACS,MAAM,CAAC,IAAI,CAAC;KAC7B;;;;EAODjC,MAAA,CAAA4B,cAAA,CAAIf,YAAA,CAAAJ,SAAA,aAAS;;;;;;SAAb,SAAAoB,CAAA;MAEI,OAAO,IAAI,CAACT,aAAa,CAACc,KAAK;KAClC;SAED,SAAAH,CAAcC,KAAsB;MAEhC,IAAI,CAACZ,aAAa,CAACc,KAAK,CAACC,QAAQ,CAACH,KAAe,CAAC;KACrD;;;;EAODhC,MAAA,CAAA4B,cAAA,CAAIf,YAAA,CAAAJ,SAAA,gBAAY;;;;;;SAAhB,SAAAoB,CAAA;MAEI,OAAO,IAAI,CAACT,aAAa,CAACgB,QAAQ;KACrC;SAED,SAAAL,CAAiBC,KAAsB;MAEnC,IAAI,CAACZ,aAAa,CAACgB,QAAQ,CAACD,QAAQ,CAACH,KAAe,CAAC;KACxD;;;;;;;EAKSnB,YAAA,CAAAJ,SAAA,CAAA4B,gBAAgB,GAA1B;IAEI,IAAI,IAAI,CAACb,QAAQ,EACjB;MACI,IAAI,CAACA,QAAQ,CAACT,OAAO,GAAG,IAAI,CAACuB,QAAQ;;IAEzC,IAAI,CAACC,WAAW,GAAG,QAAQ;GAC9B;;;;;;;EAQS1B,YAAA,CAAAJ,SAAA,CAAA+B,OAAO,GAAjB,UAAkBC,QAAkB;;IAGhC,IAAM1B,OAAO,GAAG,IAAI,CAACuB,QAAQ;IAE7B,IAAI,CAACvB,OAAO,IAAI,CAACA,OAAO,CAAC2B,KAAK,EAC9B;MACI;;IAGJ,IAAI,CAACtB,aAAa,CAACuB,oBAAoB,EAAE;IACzC,IAAI,CAACnB,QAAQ,CAACS,MAAM,EAAE;IAEtBQ,QAAQ,CAACG,KAAK,CAACC,iBAAiB,CAACJ,QAAQ,CAACK,OAAO,CAAC,IAAI,CAACpB,UAAU,CAAC,CAAC;IACnEe,QAAQ,CAACK,OAAO,CAAC,IAAI,CAACpB,UAAU,CAAC,CAACqB,MAAM,CAAC,IAAI,CAAC;GACjD;;;;;;EAOSlC,YAAA,CAAAJ,SAAA,CAAAuC,gBAAgB,GAA1B;IAEI,IAAMC,IAAI,GAAG,IAAI,CAAC3B,MAAM,GAAG,CAAC,IAAI,CAAC4B,OAAO,CAACC,EAAE;IAC3C,IAAMC,IAAI,GAAG,IAAI,CAAC7B,OAAO,GAAG,CAAC,IAAI,CAAC2B,OAAO,CAACG,EAAE;IAC5C,IAAMC,IAAI,GAAG,IAAI,CAAChC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC4B,OAAO,CAACC,EAAE,CAAC;IAChD,IAAMI,IAAI,GAAG,IAAI,CAAChC,OAAO,IAAI,CAAC,GAAG,IAAI,CAAC2B,OAAO,CAACG,EAAE,CAAC;IAEjD,IAAI,CAACG,OAAO,CAACC,QAAQ,CAAC,IAAI,CAACC,SAAS,EAAET,IAAI,EAAEG,IAAI,EAAEE,IAAI,EAAEC,IAAI,CAAC;GAChE;;;;;;;EAQM1C,YAAA,CAAAJ,SAAA,CAAAkD,cAAc,GAArB,UAAsBC,IAAe;;IAGjC,IAAI,IAAI,CAACC,QAAQ,CAACC,MAAM,KAAK,CAAC,EAC9B;MACI,IAAI,CAACN,OAAO,CAACP,IAAI,GAAG,IAAI,CAAC3B,MAAM,GAAG,CAAC,IAAI,CAAC4B,OAAO,CAACC,EAAE;MAClD,IAAI,CAACK,OAAO,CAACJ,IAAI,GAAG,IAAI,CAAC7B,OAAO,GAAG,CAAC,IAAI,CAAC2B,OAAO,CAACG,EAAE;MACnD,IAAI,CAACG,OAAO,CAACF,IAAI,GAAG,IAAI,CAAChC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC4B,OAAO,CAACC,EAAE,CAAC;MACvD,IAAI,CAACK,OAAO,CAACD,IAAI,GAAG,IAAI,CAAChC,OAAO,IAAI,CAAC,GAAG,IAAI,CAAC2B,OAAO,CAACG,EAAE,CAAC;MAExD,IAAI,CAACO,IAAI,EACT;QACI,IAAI,CAAC,IAAI,CAACG,gBAAgB,EAC1B;UACI,IAAI,CAACA,gBAAgB,GAAG,IAAIC,SAAS,EAAE;;QAG3CJ,IAAI,GAAG,IAAI,CAACG,gBAAgB;;MAGhC,OAAO,IAAI,CAACP,OAAO,CAACS,YAAY,CAACL,IAAI,CAAC;;IAG1C,OAAO9C,MAAA,CAAAL,SAAA,CAAMkD,cAAc,CAACxC,IAAI,CAAC,IAAI,EAAEyC,IAAI,CAAC;GAC/C;;;;;;;EAQM/C,YAAA,CAAAJ,SAAA,CAAAyD,aAAa,GAApB,UAAqBC,KAAiB;IAElC,IAAI,CAACC,cAAc,CAACC,YAAY,CAACF,KAAK,EAAExD,SAAS,CAAC;IAElD,IAAMK,KAAK,GAAG,IAAI,CAACM,MAAM;IACzB,IAAML,MAAM,GAAG,IAAI,CAACM,OAAO;IAC3B,IAAM+C,EAAE,GAAG,CAACtD,KAAK,GAAG,IAAI,CAACuD,MAAM,CAACpB,EAAE;IAElC,IAAIxC,SAAS,CAAC6D,CAAC,IAAIF,EAAE,IAAI3D,SAAS,CAAC6D,CAAC,GAAGF,EAAE,GAAGtD,KAAK,EACjD;MACI,IAAMyD,EAAE,GAAG,CAACxD,MAAM,GAAG,IAAI,CAACsD,MAAM,CAAClB,EAAE;MAEnC,IAAI1C,SAAS,CAAC+D,CAAC,IAAID,EAAE,IAAI9D,SAAS,CAAC+D,CAAC,GAAGD,EAAE,GAAGxD,MAAM,EAClD;QACI,OAAO,IAAI;;;IAInB,OAAO,KAAK;GACf;;;;;;;;;;;EAYMJ,YAAA,CAAAJ,SAAA,CAAAkE,OAAO,GAAd,UAAeC,OAAgC;IAE3C9D,MAAA,CAAAL,SAAA,CAAMkE,OAAO,CAAAxD,IAAA,OAACyD,OAAO,CAAC;IAEtB,IAAI,CAACxD,aAAa,GAAG,IAAI;IACzB,IAAI,CAACI,QAAQ,GAAG,IAAI;GACvB;;;;;;;;;;;;EAaMX,YAAA,CAAAgE,IAAI,GAAX,UAAYC,MAAqB,EAAEF,OAAoC;;IAGnE,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAC/B;MACIG,WAAW,CAAC,OAAO,EAAE,gEAAgE,CAAC;;MAEtFH,OAAO,GAAG;QAAE5D,KAAK,EAAE4D,OAAO;QAAE3D,MAAM,EAAE+D,SAAS,CAAC,CAAC;MAAC,CAAW;;IAG/D,OAAO,IAAInE,YAAY,CACnBoE,OAAO,CAACJ,IAAI,CAACC,MAAM,EAAEF,OAAO,CAAC,EAC7BA,OAAO,CAAC5D,KAAK,EACb4D,OAAO,CAAC3D,MAAM,CACjB;GACJ;EAODjB,MAAA,CAAA4B,cAAA,CAAIf,YAAA,CAAAJ,SAAA,SAAK;;;;;;SAAT,SAAAoB,CAAA;MAEI,OAAO,IAAI,CAACP,MAAM;KACrB;SAED,SAAAS,CAAUC,KAAa;MAEnB,IAAI,CAACV,MAAM,GAAGU,KAAK;KACtB;;;;EAODhC,MAAA,CAAA4B,cAAA,CAAIf,YAAA,CAAAJ,SAAA,UAAM;;;;;;SAAV,SAAAoB,CAAA;MAEI,OAAO,IAAI,CAACN,OAAO;KACtB;SAED,SAAAQ,CAAWC,KAAa;MAEpB,IAAI,CAACT,OAAO,GAAGS,KAAK;KACvB;;;;EACL,OAAAnB,YAAC;CAtSD,CAAkCqE,MAAM;;;;ACRxC,IAAMC,OAAO,GAAG,IAAIC,MAAM,EAAE;;;;;;;;AAS5B,IAAAC,oBAAA,0BAAAvE,MAAA;EAA0CR,SAAA,CAAA+E,oBAAA,EAAAvE,MAAA;;;;;;EAYtC,SAAAuE,qBAAY5C,QAAkB;IAA9B,IAAAvB,KAAA,GAEIJ,MAAA,CAAAK,IAAA,OAAMsB,QAAQ,CAAC;IAEf,IAAM6C,QAAQ,GAAG;MAAEC,OAAO,EAAErE,KAAI,CAACuB,QAAQ,CAAC+C;IAAc,CAAE;IAE1DtE,KAAI,CAACuE,MAAM,GAAGC,MAAM,CAACb,IAAI,CAACc,MAAM,EAAEC,QAAQ,EAAEN,QAAQ,CAAC;IAErDpE,KAAI,CAAC2E,YAAY,GAAGH,MAAM,CAACb,IAAI,CAACc,MAAM,EAAEG,cAAc,EAAER,QAAQ,CAAC;IAEjEpE,KAAI,CAAC6E,IAAI,GAAG,IAAIC,MAAM,EAAE;;;;;;;IAQxB9E,KAAI,CAAC+E,KAAK,GAAGC,KAAK,CAACC,KAAK,EAAE;;;;;;;EAOvBd,oBAAA,CAAA5E,SAAA,CAAAsC,MAAM,GAAb,UAAcqD,EAAgB;IAE1B,IAAM3D,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,IAAMsD,IAAI,GAAG,IAAI,CAACA,IAAI;IAEtB,IAAIM,QAAQ,GAAGN,IAAI,CAACM,QAAQ;IAE5BA,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAID,EAAE,CAAC9E,MAAM,GAAI,CAAC8E,EAAE,CAAC7B,MAAM,CAACC,CAAC;IACtD6B,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC7E,OAAO,GAAG,CAAC6E,EAAE,CAAC7B,MAAM,CAACG,CAAC;IAErD2B,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAID,EAAE,CAAC9E,MAAM,IAAK,GAAG,GAAG8E,EAAE,CAAC7B,MAAM,CAACC,CAAC,CAAC;IAC7D6B,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC7E,OAAO,IAAI,GAAG,GAAG6E,EAAE,CAAC7B,MAAM,CAACG,CAAC,CAAC;IAE5D,IAAI0B,EAAE,CAACzE,eAAe,EACtB;MACI0E,QAAQ,GAAGN,IAAI,CAACO,GAAG;MAEnBD,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAACD,EAAE,CAAC7B,MAAM,CAACC,CAAC;MACxC6B,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAACD,EAAE,CAAC7B,MAAM,CAACG,CAAC;MAExC2B,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGD,EAAE,CAAC7B,MAAM,CAACC,CAAC;MAC7C6B,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGD,EAAE,CAAC7B,MAAM,CAACG,CAAC;;IAGjDqB,IAAI,CAACQ,UAAU,EAAE;IAEjB,IAAMC,GAAG,GAAGJ,EAAE,CAAC9D,QAAQ;IACvB,IAAMmE,OAAO,GAAGD,GAAG,CAACE,WAAW;IAC/B,IAAMC,EAAE,GAAGP,EAAE,CAAChF,aAAa,CAACwF,cAAc;IAC1C,IAAMC,EAAE,GAAGT,EAAE,CAAC5E,QAAQ;IACtB,IAAIsF,QAAQ,GAAGL,OAAO,CAACM,YAAY,IAC5BP,GAAG,CAACQ,KAAK,CAAChG,KAAK,KAAKyF,OAAO,CAACzF,KAAK,IAAIwF,GAAG,CAACQ,KAAK,CAAC/F,MAAM,KAAKwF,OAAO,CAACxF,MAAM;;IAG/E,IAAI6F,QAAQ,EACZ;MACI,IAAI,CAACL,OAAO,CAACQ,WAAW,CAACxE,QAAQ,CAACyE,WAAW,CAAC,EAC9C;QACI,IAAIT,OAAO,CAACU,QAAQ,KAAKC,UAAU,CAACC,KAAK,EACzC;UACIZ,OAAO,CAACU,QAAQ,GAAGC,UAAU,CAACE,MAAM;;OAE3C,MAED;QACIR,QAAQ,GAAGL,OAAO,CAACU,QAAQ,KAAKC,UAAU,CAACC,KAAK;;;IAIxD,IAAM5B,MAAM,GAAGqB,QAAQ,GAAG,IAAI,CAACjB,YAAY,GAAG,IAAI,CAACJ,MAAM;IAEzD,IAAM8B,CAAC,GAAGf,GAAG,CAACxF,KAAK;IACnB,IAAMwG,CAAC,GAAGhB,GAAG,CAACvF,MAAM;IACpB,IAAMwG,CAAC,GAAGrB,EAAE,CAAC9E,MAAM;IACnB,IAAMoG,CAAC,GAAGtB,EAAE,CAAC7E,OAAO;IAEpB4D,OAAO,CAACpD,GAAG,CAAC4E,EAAE,CAACgB,CAAC,GAAGJ,CAAC,GAAGE,CAAC,EACpBd,EAAE,CAAC5G,CAAC,GAAGwH,CAAC,GAAGG,CAAC,EACZf,EAAE,CAACiB,CAAC,GAAGJ,CAAC,GAAGC,CAAC,EACZd,EAAE,CAAC7G,CAAC,GAAG0H,CAAC,GAAGE,CAAC,EACZf,EAAE,CAACkB,EAAE,GAAGJ,CAAC,EACTd,EAAE,CAACmB,EAAE,GAAGJ,CAAC,CAAC;;;;;;IAQdvC,OAAO,CAAC4C,MAAM,EAAE;IAChB,IAAIjB,QAAQ,EACZ;MACI3B,OAAO,CAAC6C,OAAO,CAACnB,EAAE,CAACoB,QAAQ,CAAC;KAC/B,MAED;MACIxC,MAAM,CAACH,QAAQ,CAAC4C,SAAS,GAAGrB,EAAE,CAACoB,QAAQ,CAACE,OAAO,CAAC,IAAI,CAAC;MACrD1C,MAAM,CAACH,QAAQ,CAAC8C,WAAW,GAAGvB,EAAE,CAACuB,WAAW;MAC5C3C,MAAM,CAACH,QAAQ,CAAC+C,YAAY,GAAGxB,EAAE,CAACwB,YAAY;;IAGlD5C,MAAM,CAACH,QAAQ,CAACgD,UAAU,GAAGnD,OAAO,CAACgD,OAAO,CAAC,IAAI,CAAC;IAClD1C,MAAM,CAACH,QAAQ,CAACiD,MAAM,GAAGC,qBAAqB,CAACpC,EAAE,CAACqC,IAAI,EAAErC,EAAE,CAACsC,UAAU,EACjEjD,MAAM,CAACH,QAAQ,CAACiD,MAAM,EAAE9B,OAAO,CAACkC,SAAgB,CAAC;IACrDlD,MAAM,CAACH,QAAQ,CAACsD,iBAAiB,GAAGxC,EAAE,CAAC1C,SAAS,CAACU,cAAc,CAAC+D,OAAO,CAAC,IAAI,CAAC;IAC7E1C,MAAM,CAACH,QAAQ,CAACuD,QAAQ,GAAGrC,GAAG;IAE9B/D,QAAQ,CAACgD,MAAM,CAACqD,IAAI,CAACrD,MAAM,CAAC;IAC5BhD,QAAQ,CAACsG,QAAQ,CAACD,IAAI,CAAC/C,IAAI,CAAC;IAE5B,IAAI,CAACE,KAAK,CAAC+C,SAAS,GAAGC,gBAAgB,CAAC7C,EAAE,CAAC4C,SAAS,EAAEvC,OAAO,CAACkC,SAAgB,CAAC;IAC/ElG,QAAQ,CAACwD,KAAK,CAAClE,GAAG,CAAC,IAAI,CAACkE,KAAK,CAAC;IAC9BxD,QAAQ,CAACsG,QAAQ,CAACG,IAAI,CAAC,IAAI,CAACzG,QAAQ,CAAC0G,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;GAC3D;EACL,OAAA/D,oBAAC;CAnID,CAA0CgE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}