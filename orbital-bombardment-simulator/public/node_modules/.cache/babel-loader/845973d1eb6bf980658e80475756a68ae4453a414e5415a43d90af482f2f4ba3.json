{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\nconst ASSET_PATHS = {\n  BACKGROUND: '/assets/game_background.png',\n  SHIPS: {\n    [SHIPS.SMALL.id]: '/assets/small_ship.png',\n    [SHIPS.MEDIUM.id]: '/assets/medium_ship.png',\n    [SHIPS.LARGE.id]: '/assets/big_ship.png'\n  },\n  PLANETS: {\n    MERCURY: '/assets/planets/mercury.png',\n    VENUS: '/assets/planets/venus.png',\n    EARTH: '/assets/planets/earth.png',\n    MARS: '/assets/planets/mars.png',\n    JUPITER: '/assets/planets/jupiter.png'\n  }\n};\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      if (!ship || !ship.type || !ship.type.id) {\n        console.error('Invalid ship object:', ship);\n        throw new Error('Invalid ship object');\n      }\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.SMALL.id]),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.MEDIUM.id]),\n        [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.LARGE.id])\n      };\n      if (!this.textures[ship.type.id]) {\n        console.error('Invalid ship type:', ship.type.id);\n        throw new Error('Invalid ship type');\n      }\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n      throw error;\n    }\n  }\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n      switch (ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.25);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.3);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(0.37);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(0.5);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\nclass BulletRenderer {\n  constructor(bullet) {\n    this.sprite = new PIXI.Graphics();\n    this.updateSprite(bullet);\n  }\n  updateSprite(bullet) {\n    this.sprite.clear();\n    this.sprite.beginFill(0xFFFF00);\n    this.sprite.drawCircle(0, 0, 2);\n    this.sprite.endFill();\n  }\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\nclass PlanetRenderer {\n  constructor(planet) {\n    try {\n      if (!planet || !planet.id) {\n        console.error('Invalid planet object:', planet);\n        throw new Error('Invalid planet object');\n      }\n      this.textures = {\n        MERCURY: PIXI.Texture.from(ASSET_PATHS.PLANETS.MERCURY),\n        VENUS: PIXI.Texture.from(ASSET_PATHS.PLANETS.VENUS),\n        EARTH: PIXI.Texture.from(ASSET_PATHS.PLANETS.EARTH),\n        MARS: PIXI.Texture.from(ASSET_PATHS.PLANETS.MARS),\n        JUPITER: PIXI.Texture.from(ASSET_PATHS.PLANETS.JUPITER)\n      };\n      if (!this.textures[planet.id.toUpperCase()]) {\n        console.error('Invalid planet type:', planet.id);\n        throw new Error('Invalid planet type');\n      }\n      this.sprite = new PIXI.Sprite(this.textures[planet.id.toUpperCase()]);\n      this.sprite.anchor.set(0.5);\n      this.healthBarSprite = new PIXI.Graphics();\n      this.nameText = new PIXI.Text(planet.name, {\n        fontFamily: \"'Exo', sans-serif\",\n        fontSize: 18,\n        fill: 0xFFFFFF,\n        align: 'center'\n      });\n      this.nameText.anchor.set(0.5);\n      this.namePadding = 30; // Padding between planet and name (adjust as needed)\n      this.healthBarPadding = 20; // Padding between planet and health bar (adjust as needed)\n\n      this.updateSprite(planet);\n    } catch (error) {\n      console.error('Error in PlanetRenderer constructor:', error);\n      throw error;\n    }\n  }\n  updateSprite(planet) {\n    try {\n      if (!planet || !planet.id) return;\n      this.sprite.texture = this.textures[planet.id.toUpperCase()];\n      switch (planet.id.toUpperCase()) {\n        case 'MERCURY':\n          this.sprite.scale.set(0.375);\n          break;\n        case 'VENUS':\n          this.sprite.scale.set(0.4375);\n          break;\n        case 'EARTH':\n          this.sprite.scale.set(0.5);\n          break;\n        case 'MARS':\n          this.sprite.scale.set(0.4375);\n          break;\n        case 'JUPITER':\n          this.sprite.scale.set(0.625);\n          break;\n        default:\n          console.warn(`Unexpected planet type: ${planet.id}`);\n          this.sprite.scale.set(0.5);\n      }\n      const scaledHeight = this.sprite.height * this.sprite.scale.y;\n\n      // Update health bar position\n      this.healthBarSprite.x = -50; // Center the health bar\n      this.healthBarSprite.y = scaledHeight / 2 + this.healthBarPadding;\n\n      // Update name text position\n      this.nameText.y = -(scaledHeight / 2) - this.namePadding;\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n  updateRotation(deltaTime) {\n    const rotationSpeed = 0.1; // Adjust this value to change rotation speed\n    this.sprite.rotation += rotationSpeed * deltaTime;\n  }\n  render(planet, health) {\n    try {\n      this.healthBarSprite.clear();\n      this.healthBarSprite.beginFill(0x00FF00);\n      this.healthBarSprite.drawRect(0, 0, health / planet.maxHealth * 100, 10);\n      this.healthBarSprite.endFill();\n      this.nameText.text = planet.name;\n    } catch (error) {\n      console.error('Error in PlanetRenderer render:', error);\n    }\n  }\n}\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000\n      });\n      container.appendChild(this.app.view);\n      this.background = PIXI.Sprite.from(ASSET_PATHS.BACKGROUND);\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n      this.planetRenderer = new PlanetRenderer(initialPlanet);\n      this.planetRenderer.sprite.x = width / 2;\n      this.planetRenderer.sprite.y = height / 2;\n      this.app.stage.addChild(this.planetRenderer.sprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n      this.shipPool = new ObjectPool(() => new ShipRenderer({\n        type: {\n          id: SHIPS.SMALL.id\n        }\n      }));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({}));\n      this.lastUpdateTime = Date.now();\n      this.preloadTextures();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n  preloadTextures() {\n    Object.values(ASSET_PATHS.SHIPS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.PLANETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n  }\n  getShipRenderer(ship) {\n    try {\n      if (!this.shipRenderers.has(ship)) {\n        console.log('Creating new ShipRenderer for ship:', ship);\n        const renderer = this.shipPool.get();\n        renderer.updateSprite(ship);\n        this.app.stage.addChild(renderer.sprite);\n        this.shipRenderers.set(ship, renderer);\n      }\n      return this.shipRenderers.get(ship);\n    } catch (error) {\n      console.error('Error in getShipRenderer:', error);\n      console.error('Ship object:', ship);\n      throw error;\n    }\n  }\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.sprite.texture !== this.planetRenderer.textures[planet.id.toUpperCase()]) {\n      this.planetRenderer.updateSprite(planet);\n    }\n    return this.planetRenderer;\n  }\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n      simulation.ships.forEach(ship => {\n        try {\n          const renderer = this.getShipRenderer(ship);\n          renderer.render(ship);\n        } catch (error) {\n          console.error('Error rendering ship:', error);\n          console.error('Problematic ship:', ship);\n        }\n      });\n      this.shipRenderers.forEach((renderer, ship) => {\n        if (!simulation.ships.includes(ship)) {\n          this.removeShipRenderer(ship);\n        }\n      });\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(currentPlanet, simulation.getPlanetHealth());\n      planetRenderer.sprite.x = this.width / 2;\n      planetRenderer.sprite.y = this.height / 2;\n      planetRenderer.healthBarSprite.x = this.width / 2 - 50; // Center the health bar\n      planetRenderer.healthBarSprite.y = this.height / 2 + planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2 + planetRenderer.healthBarPadding;\n\n      // Update name text position\n      planetRenderer.nameText.x = this.width / 2;\n      planetRenderer.nameText.y = this.height / 2 - planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2 - planetRenderer.namePadding;\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n  destroy() {\n    this.app.destroy(true);\n  }\n}","map":{"version":3,"names":["PIXI","PLANET_RENDERER_CONFIGS","SHIPS","ObjectPool","ASSET_PATHS","BACKGROUND","SMALL","id","MEDIUM","LARGE","PLANETS","MERCURY","VENUS","EARTH","MARS","JUPITER","ShipRenderer","constructor","ship","type","console","error","Error","textures","Texture","from","sprite","Sprite","anchor","set","updateSprite","texture","scale","warn","render","x","y","rotation","angle","Math","PI","BulletRenderer","bullet","Graphics","clear","beginFill","drawCircle","endFill","PlanetRenderer","planet","toUpperCase","healthBarSprite","nameText","Text","name","fontFamily","fontSize","fill","align","namePadding","healthBarPadding","scaledHeight","height","updateRotation","deltaTime","rotationSpeed","health","drawRect","maxHealth","text","GameRenderer","container","width","initialPlanet","app","Application","backgroundColor","appendChild","view","background","stage","addChild","shipRenderers","Map","bulletRenderers","planetRenderer","shipPool","bulletPool","lastUpdateTime","Date","now","preloadTextures","Object","values","forEach","path","getShipRenderer","has","log","renderer","get","getBulletRenderer","getPlanetRenderer","removeShipRenderer","removeChild","release","delete","removeBulletRenderer","updatePlanetRotation","currentTime","simulation","ships","includes","bullets","currentPlanet","getCurrentPlanet","getPlanetHealth","destroy"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/src/render/renderer.js"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\n\nconst ASSET_PATHS = {\n  BACKGROUND: '/assets/game_background.png',\n  SHIPS: {\n    [SHIPS.SMALL.id]: '/assets/small_ship.png',\n    [SHIPS.MEDIUM.id]: '/assets/medium_ship.png',\n    [SHIPS.LARGE.id]: '/assets/big_ship.png',\n  },\n  PLANETS: {\n    MERCURY: '/assets/planets/mercury.png',\n    VENUS: '/assets/planets/venus.png',\n    EARTH: '/assets/planets/earth.png',\n    MARS: '/assets/planets/mars.png',\n    JUPITER: '/assets/planets/jupiter.png',\n  }\n};\n\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      if (!ship || !ship.type || !ship.type.id) {\n        console.error('Invalid ship object:', ship);\n        throw new Error('Invalid ship object');\n      }\n\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.SMALL.id]),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.MEDIUM.id]),\n        [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.LARGE.id]),\n      };\n\n      if (!this.textures[ship.type.id]) {\n        console.error('Invalid ship type:', ship.type.id);\n        throw new Error('Invalid ship type');\n      }\n\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n      throw error;\n    }\n  }\n\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n\n      switch(ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.25);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.3);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(0.37);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(0.5);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\n\nclass BulletRenderer {\n  constructor(bullet) {\n    this.sprite = new PIXI.Graphics();\n    this.updateSprite(bullet);\n  }\n\n  updateSprite(bullet) {\n    this.sprite.clear();\n    this.sprite.beginFill(0xFFFF00);\n    this.sprite.drawCircle(0, 0, 2);\n    this.sprite.endFill();\n  }\n\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\n\nclass PlanetRenderer {\n  constructor(planet) {\n    try {\n      if (!planet || !planet.id) {\n        console.error('Invalid planet object:', planet);\n        throw new Error('Invalid planet object');\n      }\n\n      this.textures = {\n        MERCURY: PIXI.Texture.from(ASSET_PATHS.PLANETS.MERCURY),\n        VENUS: PIXI.Texture.from(ASSET_PATHS.PLANETS.VENUS),\n        EARTH: PIXI.Texture.from(ASSET_PATHS.PLANETS.EARTH),\n        MARS: PIXI.Texture.from(ASSET_PATHS.PLANETS.MARS),\n        JUPITER: PIXI.Texture.from(ASSET_PATHS.PLANETS.JUPITER),\n      };\n\n      if (!this.textures[planet.id.toUpperCase()]) {\n        console.error('Invalid planet type:', planet.id);\n        throw new Error('Invalid planet type');\n      }\n\n      this.sprite = new PIXI.Sprite(this.textures[planet.id.toUpperCase()]);\n      this.sprite.anchor.set(0.5);\n\n      this.healthBarSprite = new PIXI.Graphics();\n      this.nameText = new PIXI.Text(planet.name, {\n        fontFamily: \"'Exo', sans-serif\",\n        fontSize: 18,\n        fill: 0xFFFFFF,\n        align: 'center'\n      });\n      this.nameText.anchor.set(0.5);\n\n      this.namePadding = 30;  // Padding between planet and name (adjust as needed)\n      this.healthBarPadding = 20;  // Padding between planet and health bar (adjust as needed)\n\n      this.updateSprite(planet);\n    } catch (error) {\n      console.error('Error in PlanetRenderer constructor:', error);\n      throw error;\n    }\n  }\n\n  updateSprite(planet) {\n    try {\n      if (!planet || !planet.id) return;\n      this.sprite.texture = this.textures[planet.id.toUpperCase()];\n\n      switch(planet.id.toUpperCase()) {\n        case 'MERCURY':\n          this.sprite.scale.set(0.375);\n          break;\n        case 'VENUS':\n          this.sprite.scale.set(0.4375);\n          break;\n        case 'EARTH':\n          this.sprite.scale.set(0.5);\n          break;\n        case 'MARS':\n          this.sprite.scale.set(0.4375);\n          break;\n        case 'JUPITER':\n          this.sprite.scale.set(0.625);\n          break;\n        default:\n          console.warn(`Unexpected planet type: ${planet.id}`);\n          this.sprite.scale.set(0.5);\n      }\n\n      const scaledHeight = this.sprite.height * this.sprite.scale.y;\n\n      // Update health bar position\n      this.healthBarSprite.x = -50;  // Center the health bar\n      this.healthBarSprite.y = (scaledHeight / 2) + this.healthBarPadding;\n\n      // Update name text position\n      this.nameText.y = -(scaledHeight / 2) - this.namePadding;\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n\n  updateRotation(deltaTime) {\n    const rotationSpeed = 0.1; // Adjust this value to change rotation speed\n    this.sprite.rotation += rotationSpeed * deltaTime;\n  }\n\n  render(planet, health) {\n    try {\n      this.healthBarSprite.clear();\n      this.healthBarSprite.beginFill(0x00FF00);\n      this.healthBarSprite.drawRect(0, 0, (health / planet.maxHealth) * 100, 10);\n      this.healthBarSprite.endFill();\n\n      this.nameText.text = planet.name;\n    } catch (error) {\n      console.error('Error in PlanetRenderer render:', error);\n    }\n  }\n}\n\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000,\n      });\n      container.appendChild(this.app.view);\n\n      this.background = PIXI.Sprite.from(ASSET_PATHS.BACKGROUND);\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n      this.planetRenderer = new PlanetRenderer(initialPlanet);\n      this.planetRenderer.sprite.x = width / 2;\n      this.planetRenderer.sprite.y = height / 2;\n\n      this.app.stage.addChild(this.planetRenderer.sprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n\n      this.shipPool = new ObjectPool(() => new ShipRenderer({type: {id: SHIPS.SMALL.id}}));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({}));\n\n      this.lastUpdateTime = Date.now();\n\n      this.preloadTextures();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n\n  preloadTextures() {\n    Object.values(ASSET_PATHS.SHIPS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.PLANETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n  }\n\n  getShipRenderer(ship) {\n    try {\n      if (!this.shipRenderers.has(ship)) {\n        console.log('Creating new ShipRenderer for ship:', ship);\n        const renderer = this.shipPool.get();\n        renderer.updateSprite(ship);\n        this.app.stage.addChild(renderer.sprite);\n        this.shipRenderers.set(ship, renderer);\n      }\n      return this.shipRenderers.get(ship);\n    } catch (error) {\n      console.error('Error in getShipRenderer:', error);\n      console.error('Ship object:', ship);\n      throw error;\n    }\n  }\n\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.sprite.texture !== this.planetRenderer.textures[planet.id.toUpperCase()]) {\n      this.planetRenderer.updateSprite(planet);\n    }\n    return this.planetRenderer;\n  }\n\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n\n      simulation.ships.forEach(ship => {\n        try {\n          const renderer = this.getShipRenderer(ship);\n          renderer.render(ship);\n        } catch (error) {\n          console.error('Error rendering ship:', error);\n          console.error('Problematic ship:', ship);\n        }\n      });\n\n      this.shipRenderers.forEach((renderer, ship) => {\n        if (!simulation.ships.includes(ship)) {\n          this.removeShipRenderer(ship);\n        }\n      });\n\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(currentPlanet, simulation.getPlanetHealth());\n\n      planetRenderer.sprite.x = this.width / 2;\n      planetRenderer.sprite.y = this.height / 2;\n      planetRenderer.healthBarSprite.x = this.width / 2 - 50;  // Center the health bar\n      planetRenderer.healthBarSprite.y = this.height / 2 +\n        (planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2) +\n        planetRenderer.healthBarPadding;\n\n      // Update name text position\n      planetRenderer.nameText.x = this.width / 2;\n      planetRenderer.nameText.y = this.height / 2 -\n        (planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2) -\n        planetRenderer.namePadding;\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n\n  destroy() {\n    this.app.destroy(true);\n  }\n}"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,SAAS;AAC/B,SAASC,uBAAuB,QAAQ,kBAAkB;AAC1D,SAASC,KAAK,QAAQ,gCAAgC;AACtD,SAASC,UAAU,QAAQ,SAAS;AAEpC,MAAMC,WAAW,GAAG;EAClBC,UAAU,EAAE,6BAA6B;EACzCH,KAAK,EAAE;IACL,CAACA,KAAK,CAACI,KAAK,CAACC,EAAE,GAAG,wBAAwB;IAC1C,CAACL,KAAK,CAACM,MAAM,CAACD,EAAE,GAAG,yBAAyB;IAC5C,CAACL,KAAK,CAACO,KAAK,CAACF,EAAE,GAAG;EACpB,CAAC;EACDG,OAAO,EAAE;IACPC,OAAO,EAAE,6BAA6B;IACtCC,KAAK,EAAE,2BAA2B;IAClCC,KAAK,EAAE,2BAA2B;IAClCC,IAAI,EAAE,0BAA0B;IAChCC,OAAO,EAAE;EACX;AACF,CAAC;AAED,MAAMC,YAAY,CAAC;EACjBC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI;MACF,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,IAAI,IAAI,CAACD,IAAI,CAACC,IAAI,CAACZ,EAAE,EAAE;QACxCa,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEH,IAAI,CAAC;QAC3C,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,IAAI,CAACC,QAAQ,GAAG;QACd,CAACrB,KAAK,CAACI,KAAK,CAACC,EAAE,GAAGP,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACrB,WAAW,CAACF,KAAK,CAACA,KAAK,CAACI,KAAK,CAACC,EAAE,CAAC,CAAC;QACtE,CAACL,KAAK,CAACM,MAAM,CAACD,EAAE,GAAGP,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACrB,WAAW,CAACF,KAAK,CAACA,KAAK,CAACM,MAAM,CAACD,EAAE,CAAC,CAAC;QACxE,CAACL,KAAK,CAACO,KAAK,CAACF,EAAE,GAAGP,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACrB,WAAW,CAACF,KAAK,CAACA,KAAK,CAACO,KAAK,CAACF,EAAE,CAAC;MACvE,CAAC;MAED,IAAI,CAAC,IAAI,CAACgB,QAAQ,CAACL,IAAI,CAACC,IAAI,CAACZ,EAAE,CAAC,EAAE;QAChCa,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEH,IAAI,CAACC,IAAI,CAACZ,EAAE,CAAC;QACjD,MAAM,IAAIe,KAAK,CAAC,mBAAmB,CAAC;MACtC;MAEA,IAAI,CAACI,MAAM,GAAG,IAAI1B,IAAI,CAAC2B,MAAM,CAAC,IAAI,CAACJ,QAAQ,CAACL,IAAI,CAACC,IAAI,CAACZ,EAAE,CAAC,CAAC;MAC1D,IAAI,CAACmB,MAAM,CAACE,MAAM,CAACC,GAAG,CAAC,GAAG,CAAC;MAC3B,IAAI,CAACC,YAAY,CAACZ,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF;EAEAS,YAAYA,CAACZ,IAAI,EAAE;IACjB,IAAI;MACF,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,IAAI,EAAE;MACzB,IAAI,CAACO,MAAM,CAACK,OAAO,GAAG,IAAI,CAACR,QAAQ,CAACL,IAAI,CAACC,IAAI,CAACZ,EAAE,CAAC;MAEjD,QAAOW,IAAI,CAACC,IAAI,CAACZ,EAAE;QACjB,KAAKL,KAAK,CAACI,KAAK,CAACC,EAAE;UACjB,IAAI,CAACmB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,IAAI,CAAC;UAC3B;QACF,KAAK3B,KAAK,CAACM,MAAM,CAACD,EAAE;UAClB,IAAI,CAACmB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,GAAG,CAAC;UAC1B;QACF,KAAK3B,KAAK,CAACO,KAAK,CAACF,EAAE;UACjB,IAAI,CAACmB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,IAAI,CAAC;UAC3B;QACF;UACET,OAAO,CAACa,IAAI,CAAC,yBAAyBf,IAAI,CAACC,IAAI,CAACZ,EAAE,EAAE,CAAC;UACrD,IAAI,CAACmB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,GAAG,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF;EAEAa,MAAMA,CAAChB,IAAI,EAAE;IACX,IAAI;MACF,IAAI,CAACQ,MAAM,CAACS,CAAC,GAAGjB,IAAI,CAACiB,CAAC;MACtB,IAAI,CAACT,MAAM,CAACU,CAAC,GAAGlB,IAAI,CAACkB,CAAC;MACtB,IAAI,CAACV,MAAM,CAACW,QAAQ,GAAGnB,IAAI,CAACoB,KAAK,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;IACjD,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF;AACF;AAEA,MAAMoB,cAAc,CAAC;EACnBxB,WAAWA,CAACyB,MAAM,EAAE;IAClB,IAAI,CAAChB,MAAM,GAAG,IAAI1B,IAAI,CAAC2C,QAAQ,CAAC,CAAC;IACjC,IAAI,CAACb,YAAY,CAACY,MAAM,CAAC;EAC3B;EAEAZ,YAAYA,CAACY,MAAM,EAAE;IACnB,IAAI,CAAChB,MAAM,CAACkB,KAAK,CAAC,CAAC;IACnB,IAAI,CAAClB,MAAM,CAACmB,SAAS,CAAC,QAAQ,CAAC;IAC/B,IAAI,CAACnB,MAAM,CAACoB,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAI,CAACpB,MAAM,CAACqB,OAAO,CAAC,CAAC;EACvB;EAEAb,MAAMA,CAACQ,MAAM,EAAE;IACb,IAAI,CAAChB,MAAM,CAACS,CAAC,GAAGO,MAAM,CAACP,CAAC;IACxB,IAAI,CAACT,MAAM,CAACU,CAAC,GAAGM,MAAM,CAACN,CAAC;EAC1B;AACF;AAEA,MAAMY,cAAc,CAAC;EACnB/B,WAAWA,CAACgC,MAAM,EAAE;IAClB,IAAI;MACF,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAAC1C,EAAE,EAAE;QACzBa,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAE4B,MAAM,CAAC;QAC/C,MAAM,IAAI3B,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,IAAI,CAACC,QAAQ,GAAG;QACdZ,OAAO,EAAEX,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACrB,WAAW,CAACM,OAAO,CAACC,OAAO,CAAC;QACvDC,KAAK,EAAEZ,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACrB,WAAW,CAACM,OAAO,CAACE,KAAK,CAAC;QACnDC,KAAK,EAAEb,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACrB,WAAW,CAACM,OAAO,CAACG,KAAK,CAAC;QACnDC,IAAI,EAAEd,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACrB,WAAW,CAACM,OAAO,CAACI,IAAI,CAAC;QACjDC,OAAO,EAAEf,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACrB,WAAW,CAACM,OAAO,CAACK,OAAO;MACxD,CAAC;MAED,IAAI,CAAC,IAAI,CAACQ,QAAQ,CAAC0B,MAAM,CAAC1C,EAAE,CAAC2C,WAAW,CAAC,CAAC,CAAC,EAAE;QAC3C9B,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAE4B,MAAM,CAAC1C,EAAE,CAAC;QAChD,MAAM,IAAIe,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,IAAI,CAACI,MAAM,GAAG,IAAI1B,IAAI,CAAC2B,MAAM,CAAC,IAAI,CAACJ,QAAQ,CAAC0B,MAAM,CAAC1C,EAAE,CAAC2C,WAAW,CAAC,CAAC,CAAC,CAAC;MACrE,IAAI,CAACxB,MAAM,CAACE,MAAM,CAACC,GAAG,CAAC,GAAG,CAAC;MAE3B,IAAI,CAACsB,eAAe,GAAG,IAAInD,IAAI,CAAC2C,QAAQ,CAAC,CAAC;MAC1C,IAAI,CAACS,QAAQ,GAAG,IAAIpD,IAAI,CAACqD,IAAI,CAACJ,MAAM,CAACK,IAAI,EAAE;QACzCC,UAAU,EAAE,mBAAmB;QAC/BC,QAAQ,EAAE,EAAE;QACZC,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE;MACT,CAAC,CAAC;MACF,IAAI,CAACN,QAAQ,CAACxB,MAAM,CAACC,GAAG,CAAC,GAAG,CAAC;MAE7B,IAAI,CAAC8B,WAAW,GAAG,EAAE,CAAC,CAAE;MACxB,IAAI,CAACC,gBAAgB,GAAG,EAAE,CAAC,CAAE;;MAE7B,IAAI,CAAC9B,YAAY,CAACmB,MAAM,CAAC;IAC3B,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;EACF;EAEAS,YAAYA,CAACmB,MAAM,EAAE;IACnB,IAAI;MACF,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAAC1C,EAAE,EAAE;MAC3B,IAAI,CAACmB,MAAM,CAACK,OAAO,GAAG,IAAI,CAACR,QAAQ,CAAC0B,MAAM,CAAC1C,EAAE,CAAC2C,WAAW,CAAC,CAAC,CAAC;MAE5D,QAAOD,MAAM,CAAC1C,EAAE,CAAC2C,WAAW,CAAC,CAAC;QAC5B,KAAK,SAAS;UACZ,IAAI,CAACxB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,KAAK,CAAC;UAC5B;QACF,KAAK,OAAO;UACV,IAAI,CAACH,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,MAAM,CAAC;UAC7B;QACF,KAAK,OAAO;UACV,IAAI,CAACH,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,GAAG,CAAC;UAC1B;QACF,KAAK,MAAM;UACT,IAAI,CAACH,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,MAAM,CAAC;UAC7B;QACF,KAAK,SAAS;UACZ,IAAI,CAACH,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,KAAK,CAAC;UAC5B;QACF;UACET,OAAO,CAACa,IAAI,CAAC,2BAA2BgB,MAAM,CAAC1C,EAAE,EAAE,CAAC;UACpD,IAAI,CAACmB,MAAM,CAACM,KAAK,CAACH,GAAG,CAAC,GAAG,CAAC;MAC9B;MAEA,MAAMgC,YAAY,GAAG,IAAI,CAACnC,MAAM,CAACoC,MAAM,GAAG,IAAI,CAACpC,MAAM,CAACM,KAAK,CAACI,CAAC;;MAE7D;MACA,IAAI,CAACe,eAAe,CAAChB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAE;MAC/B,IAAI,CAACgB,eAAe,CAACf,CAAC,GAAIyB,YAAY,GAAG,CAAC,GAAI,IAAI,CAACD,gBAAgB;;MAEnE;MACA,IAAI,CAACR,QAAQ,CAAChB,CAAC,GAAG,EAAEyB,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAACF,WAAW;IAC1D,CAAC,CAAC,OAAOtC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF;EAEA0C,cAAcA,CAACC,SAAS,EAAE;IACxB,MAAMC,aAAa,GAAG,GAAG,CAAC,CAAC;IAC3B,IAAI,CAACvC,MAAM,CAACW,QAAQ,IAAI4B,aAAa,GAAGD,SAAS;EACnD;EAEA9B,MAAMA,CAACe,MAAM,EAAEiB,MAAM,EAAE;IACrB,IAAI;MACF,IAAI,CAACf,eAAe,CAACP,KAAK,CAAC,CAAC;MAC5B,IAAI,CAACO,eAAe,CAACN,SAAS,CAAC,QAAQ,CAAC;MACxC,IAAI,CAACM,eAAe,CAACgB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAGD,MAAM,GAAGjB,MAAM,CAACmB,SAAS,GAAI,GAAG,EAAE,EAAE,CAAC;MAC1E,IAAI,CAACjB,eAAe,CAACJ,OAAO,CAAC,CAAC;MAE9B,IAAI,CAACK,QAAQ,CAACiB,IAAI,GAAGpB,MAAM,CAACK,IAAI;IAClC,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF;AACF;AAEA,OAAO,MAAMiD,YAAY,CAAC;EACxBrD,WAAWA,CAACsD,SAAS,EAAEC,KAAK,EAAEV,MAAM,EAAEW,aAAa,EAAE;IACnD,IAAI;MACF,IAAI,CAACD,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACV,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACY,GAAG,GAAG,IAAI1E,IAAI,CAAC2E,WAAW,CAAC;QAC9BH,KAAK;QACLV,MAAM;QACNc,eAAe,EAAE;MACnB,CAAC,CAAC;MACFL,SAAS,CAACM,WAAW,CAAC,IAAI,CAACH,GAAG,CAACI,IAAI,CAAC;MAEpC,IAAI,CAACC,UAAU,GAAG/E,IAAI,CAAC2B,MAAM,CAACF,IAAI,CAACrB,WAAW,CAACC,UAAU,CAAC;MAC1D,IAAI,CAAC0E,UAAU,CAACP,KAAK,GAAGA,KAAK;MAC7B,IAAI,CAACO,UAAU,CAACjB,MAAM,GAAGA,MAAM;MAC/B,IAAI,CAACY,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACF,UAAU,CAAC;MAExC,IAAI,CAACG,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC9B,IAAI,CAACC,eAAe,GAAG,IAAID,GAAG,CAAC,CAAC;MAChC,IAAI,CAACE,cAAc,GAAG,IAAIrC,cAAc,CAACyB,aAAa,CAAC;MACvD,IAAI,CAACY,cAAc,CAAC3D,MAAM,CAACS,CAAC,GAAGqC,KAAK,GAAG,CAAC;MACxC,IAAI,CAACa,cAAc,CAAC3D,MAAM,CAACU,CAAC,GAAG0B,MAAM,GAAG,CAAC;MAEzC,IAAI,CAACY,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACI,cAAc,CAAC3D,MAAM,CAAC;MACnD,IAAI,CAACgD,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACI,cAAc,CAAClC,eAAe,CAAC;MAC5D,IAAI,CAACuB,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACI,cAAc,CAACjC,QAAQ,CAAC;MAErD,IAAI,CAACkC,QAAQ,GAAG,IAAInF,UAAU,CAAC,MAAM,IAAIa,YAAY,CAAC;QAACG,IAAI,EAAE;UAACZ,EAAE,EAAEL,KAAK,CAACI,KAAK,CAACC;QAAE;MAAC,CAAC,CAAC,CAAC;MACpF,IAAI,CAACgF,UAAU,GAAG,IAAIpF,UAAU,CAAC,MAAM,IAAIsC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;MAE9D,IAAI,CAAC+C,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAEhC,IAAI,CAACC,eAAe,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOtE,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF;EAEAsE,eAAeA,CAAA,EAAG;IAChBC,MAAM,CAACC,MAAM,CAACzF,WAAW,CAACF,KAAK,CAAC,CAAC4F,OAAO,CAACC,IAAI,IAAI;MAC/C/F,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACsE,IAAI,CAAC;IACzB,CAAC,CAAC;IACFH,MAAM,CAACC,MAAM,CAACzF,WAAW,CAACM,OAAO,CAAC,CAACoF,OAAO,CAACC,IAAI,IAAI;MACjD/F,IAAI,CAACwB,OAAO,CAACC,IAAI,CAACsE,IAAI,CAAC;IACzB,CAAC,CAAC;EACJ;EAEAC,eAAeA,CAAC9E,IAAI,EAAE;IACpB,IAAI;MACF,IAAI,CAAC,IAAI,CAACgE,aAAa,CAACe,GAAG,CAAC/E,IAAI,CAAC,EAAE;QACjCE,OAAO,CAAC8E,GAAG,CAAC,qCAAqC,EAAEhF,IAAI,CAAC;QACxD,MAAMiF,QAAQ,GAAG,IAAI,CAACb,QAAQ,CAACc,GAAG,CAAC,CAAC;QACpCD,QAAQ,CAACrE,YAAY,CAACZ,IAAI,CAAC;QAC3B,IAAI,CAACwD,GAAG,CAACM,KAAK,CAACC,QAAQ,CAACkB,QAAQ,CAACzE,MAAM,CAAC;QACxC,IAAI,CAACwD,aAAa,CAACrD,GAAG,CAACX,IAAI,EAAEiF,QAAQ,CAAC;MACxC;MACA,OAAO,IAAI,CAACjB,aAAa,CAACkB,GAAG,CAAClF,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDD,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEH,IAAI,CAAC;MACnC,MAAMG,KAAK;IACb;EACF;EAEAgF,iBAAiBA,CAAC3D,MAAM,EAAE;IACxB,IAAI,CAAC,IAAI,CAAC0C,eAAe,CAACa,GAAG,CAACvD,MAAM,CAAC,EAAE;MACrC,MAAMyD,QAAQ,GAAG,IAAI,CAACZ,UAAU,CAACa,GAAG,CAAC,CAAC;MACtCD,QAAQ,CAACrE,YAAY,CAACY,MAAM,CAAC;MAC7B,IAAI,CAACgC,GAAG,CAACM,KAAK,CAACC,QAAQ,CAACkB,QAAQ,CAACzE,MAAM,CAAC;MACxC,IAAI,CAAC0D,eAAe,CAACvD,GAAG,CAACa,MAAM,EAAEyD,QAAQ,CAAC;IAC5C;IACA,OAAO,IAAI,CAACf,eAAe,CAACgB,GAAG,CAAC1D,MAAM,CAAC;EACzC;EAEA4D,iBAAiBA,CAACrD,MAAM,EAAE;IACxB,IAAI,IAAI,CAACoC,cAAc,CAAC3D,MAAM,CAACK,OAAO,KAAK,IAAI,CAACsD,cAAc,CAAC9D,QAAQ,CAAC0B,MAAM,CAAC1C,EAAE,CAAC2C,WAAW,CAAC,CAAC,CAAC,EAAE;MAChG,IAAI,CAACmC,cAAc,CAACvD,YAAY,CAACmB,MAAM,CAAC;IAC1C;IACA,OAAO,IAAI,CAACoC,cAAc;EAC5B;EAEAkB,kBAAkBA,CAACrF,IAAI,EAAE;IACvB,MAAMiF,QAAQ,GAAG,IAAI,CAACjB,aAAa,CAACkB,GAAG,CAAClF,IAAI,CAAC;IAC7C,IAAIiF,QAAQ,EAAE;MACZ,IAAI,CAACzB,GAAG,CAACM,KAAK,CAACwB,WAAW,CAACL,QAAQ,CAACzE,MAAM,CAAC;MAC3C,IAAI,CAAC4D,QAAQ,CAACmB,OAAO,CAACN,QAAQ,CAAC;MAC/B,IAAI,CAACjB,aAAa,CAACwB,MAAM,CAACxF,IAAI,CAAC;IACjC;EACF;EAEAyF,oBAAoBA,CAACjE,MAAM,EAAE;IAC3B,MAAMyD,QAAQ,GAAG,IAAI,CAACf,eAAe,CAACgB,GAAG,CAAC1D,MAAM,CAAC;IACjD,IAAIyD,QAAQ,EAAE;MACZ,IAAI,CAACzB,GAAG,CAACM,KAAK,CAACwB,WAAW,CAACL,QAAQ,CAACzE,MAAM,CAAC;MAC3C,IAAI,CAAC6D,UAAU,CAACkB,OAAO,CAACN,QAAQ,CAAC;MACjC,IAAI,CAACf,eAAe,CAACsB,MAAM,CAAChE,MAAM,CAAC;IACrC;EACF;EAEAkE,oBAAoBA,CAAA,EAAG;IACrB,MAAMC,WAAW,GAAGpB,IAAI,CAACC,GAAG,CAAC,CAAC;IAC9B,MAAM1B,SAAS,GAAG,CAAC6C,WAAW,GAAG,IAAI,CAACrB,cAAc,IAAI,IAAI;IAC5D,IAAI,CAACH,cAAc,CAACtB,cAAc,CAACC,SAAS,CAAC;IAC7C,IAAI,CAACwB,cAAc,GAAGqB,WAAW;EACnC;EAEA3E,MAAMA,CAAC4E,UAAU,EAAE;IACjB,IAAI;MACF,IAAI,CAACF,oBAAoB,CAAC,CAAC;MAE3BE,UAAU,CAACC,KAAK,CAACjB,OAAO,CAAC5E,IAAI,IAAI;QAC/B,IAAI;UACF,MAAMiF,QAAQ,GAAG,IAAI,CAACH,eAAe,CAAC9E,IAAI,CAAC;UAC3CiF,QAAQ,CAACjE,MAAM,CAAChB,IAAI,CAAC;QACvB,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;UAC7CD,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEH,IAAI,CAAC;QAC1C;MACF,CAAC,CAAC;MAEF,IAAI,CAACgE,aAAa,CAACY,OAAO,CAAC,CAACK,QAAQ,EAAEjF,IAAI,KAAK;QAC7C,IAAI,CAAC4F,UAAU,CAACC,KAAK,CAACC,QAAQ,CAAC9F,IAAI,CAAC,EAAE;UACpC,IAAI,CAACqF,kBAAkB,CAACrF,IAAI,CAAC;QAC/B;MACF,CAAC,CAAC;MAEF4F,UAAU,CAACG,OAAO,CAACnB,OAAO,CAACpD,MAAM,IAAI;QACnC,MAAMyD,QAAQ,GAAG,IAAI,CAACE,iBAAiB,CAAC3D,MAAM,CAAC;QAC/CyD,QAAQ,CAACjE,MAAM,CAACQ,MAAM,CAAC;MACzB,CAAC,CAAC;MAEF,IAAI,CAAC0C,eAAe,CAACU,OAAO,CAAC,CAACK,QAAQ,EAAEzD,MAAM,KAAK;QACjD,IAAI,CAACoE,UAAU,CAACG,OAAO,CAACD,QAAQ,CAACtE,MAAM,CAAC,EAAE;UACxC,IAAI,CAACiE,oBAAoB,CAACjE,MAAM,CAAC;QACnC;MACF,CAAC,CAAC;MAEF,MAAMwE,aAAa,GAAGJ,UAAU,CAACK,gBAAgB,CAAC,CAAC;MACnD,MAAM9B,cAAc,GAAG,IAAI,CAACiB,iBAAiB,CAACY,aAAa,CAAC;MAC5D7B,cAAc,CAACnD,MAAM,CAACgF,aAAa,EAAEJ,UAAU,CAACM,eAAe,CAAC,CAAC,CAAC;MAElE/B,cAAc,CAAC3D,MAAM,CAACS,CAAC,GAAG,IAAI,CAACqC,KAAK,GAAG,CAAC;MACxCa,cAAc,CAAC3D,MAAM,CAACU,CAAC,GAAG,IAAI,CAAC0B,MAAM,GAAG,CAAC;MACzCuB,cAAc,CAAClC,eAAe,CAAChB,CAAC,GAAG,IAAI,CAACqC,KAAK,GAAG,CAAC,GAAG,EAAE,CAAC,CAAE;MACzDa,cAAc,CAAClC,eAAe,CAACf,CAAC,GAAG,IAAI,CAAC0B,MAAM,GAAG,CAAC,GAC/CuB,cAAc,CAAC3D,MAAM,CAACoC,MAAM,GAAGuB,cAAc,CAAC3D,MAAM,CAACM,KAAK,CAACI,CAAC,GAAG,CAAE,GAClEiD,cAAc,CAACzB,gBAAgB;;MAEjC;MACAyB,cAAc,CAACjC,QAAQ,CAACjB,CAAC,GAAG,IAAI,CAACqC,KAAK,GAAG,CAAC;MAC1Ca,cAAc,CAACjC,QAAQ,CAAChB,CAAC,GAAG,IAAI,CAAC0B,MAAM,GAAG,CAAC,GACxCuB,cAAc,CAAC3D,MAAM,CAACoC,MAAM,GAAGuB,cAAc,CAAC3D,MAAM,CAACM,KAAK,CAACI,CAAC,GAAG,CAAE,GAClEiD,cAAc,CAAC1B,WAAW;IAC9B,CAAC,CAAC,OAAOtC,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF;EAEAgG,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC3C,GAAG,CAAC2C,OAAO,CAAC,IAAI,CAAC;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}