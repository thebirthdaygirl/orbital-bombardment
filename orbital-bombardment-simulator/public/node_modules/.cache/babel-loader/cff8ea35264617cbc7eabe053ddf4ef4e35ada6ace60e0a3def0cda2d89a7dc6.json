{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\nconst ASSET_PATHS = {\n  BACKGROUND: '/assets/game_background.png',\n  SHIPS: {\n    [SHIPS.SMALL.id]: '/assets/small_ship.png',\n    [SHIPS.MEDIUM.id]: '/assets/medium_ship.png',\n    [SHIPS.LARGE.id]: '/assets/big_ship.png'\n  },\n  PLANETS: {\n    MERCURY: '/assets/planets/mercury.png',\n    VENUS: '/assets/planets/venus.png',\n    EARTH: '/assets/planets/earth.png',\n    MARS: '/assets/planets/mars.png',\n    JUPITER: '/assets/planets/jupiter.png'\n  },\n  BULLETS: {\n    SMALL: '/assets/bullet_small.png',\n    MEDIUM: '/assets/bullet_medium.png',\n    LARGE: '/assets/bullet_large.png'\n  },\n  EXPLOSION: '/assets/explosion_spritesheet.png'\n};\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      if (!ship || !ship.type || !ship.type.id) {\n        console.error('Invalid ship object:', ship);\n        throw new Error('Invalid ship object');\n      }\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.SMALL.id]),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.MEDIUM.id]),\n        [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.LARGE.id])\n      };\n      if (!this.textures[ship.type.id]) {\n        console.error('Invalid ship type:', ship.type.id);\n        throw new Error('Invalid ship type');\n      }\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n      throw error;\n    }\n  }\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n      switch (ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.25);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.3);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(0.37);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(0.5);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\nclass BulletRenderer {\n  constructor(bullet) {\n    this.textures = {\n      [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.SMALL),\n      [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.MEDIUM),\n      [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.LARGE)\n    };\n    this.sprite = new PIXI.Sprite(this.textures[SHIPS.SMALL.id]); // Default to small bullet\n    this.sprite.anchor.set(0.5);\n    this.updateSprite(bullet);\n  }\n  updateSprite(bullet) {\n    if (!bullet || !bullet.shipType) {\n      console.warn('Invalid bullet object:', bullet);\n      return;\n    }\n    if (this.textures[bullet.shipType]) {\n      this.sprite.texture = this.textures[bullet.shipType];\n    } else {\n      console.warn(`Unexpected ship type for bullet: ${bullet.shipType}`);\n      this.sprite.texture = this.textures[SHIPS.SMALL.id];\n    }\n\n    // You might want to adjust the scale based on the bullet type\n    switch (bullet.shipType) {\n      case SHIPS.SMALL.id:\n        this.sprite.scale.set(1);\n        break;\n      case SHIPS.MEDIUM.id:\n        this.sprite.scale.set(1);\n        break;\n      case SHIPS.LARGE.id:\n        this.sprite.scale.set(1);\n        break;\n    }\n  }\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\nclass PlanetRenderer {\n  constructor(planet) {\n    try {\n      if (!planet || !planet.id) {\n        console.error('Invalid planet object:', planet);\n        throw new Error('Invalid planet object');\n      }\n      this.textures = {\n        MERCURY: PIXI.Texture.from(ASSET_PATHS.PLANETS.MERCURY),\n        VENUS: PIXI.Texture.from(ASSET_PATHS.PLANETS.VENUS),\n        EARTH: PIXI.Texture.from(ASSET_PATHS.PLANETS.EARTH),\n        MARS: PIXI.Texture.from(ASSET_PATHS.PLANETS.MARS),\n        JUPITER: PIXI.Texture.from(ASSET_PATHS.PLANETS.JUPITER)\n      };\n      if (!this.textures[planet.id.toUpperCase()]) {\n        console.error('Invalid planet type:', planet.id);\n        throw new Error('Invalid planet type');\n      }\n      this.sprite = new PIXI.Sprite(this.textures[planet.id.toUpperCase()]);\n      this.sprite.anchor.set(0.5);\n      this.healthBarSprite = new PIXI.Graphics();\n      this.nameText = new PIXI.Text(planet.name.toUpperCase(), {\n        fontFamily: \"'Exo', sans-serif\",\n        fontSize: 18,\n        fill: 0xFFFFFF,\n        align: 'center'\n      });\n      this.nameText.anchor.set(0.5);\n      this.namePadding = 30;\n      this.healthBarPadding = 20;\n      this.healthBarWidth = 100;\n      this.healthBarHeight = 10;\n\n      // Create explosion animated sprite\n      const explosionTextures = [];\n      const spritesheet = PIXI.BaseTexture.from(ASSET_PATHS.EXPLOSION);\n      for (let i = 0; i < 8; i++) {\n        explosionTextures.push(new PIXI.Texture(spritesheet, new PIXI.Rectangle(i * 135, 0, 135, 135)));\n      }\n      console.log(`Created ${explosionTextures.length} explosion frames`); // Add this line to verify\n      this.explosionSprite = new PIXI.AnimatedSprite(explosionTextures);\n      this.explosionSprite.anchor.set(0.5);\n      this.explosionSprite.loop = false;\n      this.explosionSprite.onComplete = () => {\n        this.explosionSprite.visible = false;\n      };\n      this.explosionSprite.animationSpeed = 0.3;\n      this.explosionSprite.visible = false;\n      this.explosionSprite.scale.set(1); // Adjust scale as needed\n      this.explosionTriggered = false;\n      this.updateSprite(planet);\n    } catch (error) {\n      console.error('Error in PlanetRenderer constructor:', error);\n      throw error;\n    }\n  }\n  updateSprite(planet) {\n    try {\n      if (!planet || !planet.id) return;\n      this.sprite.texture = this.textures[planet.id.toUpperCase()];\n      switch (planet.id.toUpperCase()) {\n        case 'MERCURY':\n          this.sprite.scale.set(1);\n          break;\n        case 'VENUS':\n          this.sprite.scale.set(1);\n          break;\n        case 'EARTH':\n          this.sprite.scale.set(1.25);\n          break;\n        case 'MARS':\n          this.sprite.scale.set(1.25);\n          break;\n        case 'JUPITER':\n          this.sprite.scale.set(1.5);\n          break;\n        default:\n          console.warn(`Unexpected planet type: ${planet.id}`);\n          this.sprite.scale.set(0.5);\n      }\n      const scaledHeight = this.sprite.height * this.sprite.scale.y;\n      this.healthBarSprite.x = -this.healthBarWidth / 2;\n      this.healthBarSprite.y = scaledHeight / 2 + this.healthBarPadding;\n      this.nameText.y = -(scaledHeight / 2) - this.namePadding;\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n  updateRotation(deltaTime) {\n    const rotationSpeed = 0.1;\n    this.sprite.rotation += rotationSpeed * deltaTime;\n  }\n  render(planet, health) {\n    try {\n      if (health <= 0 && !this.explosionSprite.playing) {\n        this.sprite.visible = false;\n        this.healthBarSprite.visible = false;\n        this.nameText.visible = false;\n        this.explosionSprite.visible = true;\n        this.explosionSprite.gotoAndPlay(0);\n        this.explosionTriggered = true;\n      } else if (health > 0) {\n        this.explosionTriggered = false;\n        this.sprite.visible = true;\n        this.healthBarSprite.visible = true;\n        this.nameText.visible = true;\n        this.explosionSprite.visible = false;\n        this.healthBarSprite.clear();\n        this.healthBarSprite.beginFill(0x191123);\n        this.healthBarSprite.drawRect(0, 0, this.healthBarWidth, this.healthBarHeight);\n        this.healthBarSprite.endFill();\n        const healthPercentage = health / planet.maxHealth;\n        const healthFillWidth = this.healthBarWidth * healthPercentage;\n        this.healthBarSprite.beginFill(0xFF4C4C);\n        this.healthBarSprite.drawRect(0, 0, healthFillWidth, this.healthBarHeight);\n        this.healthBarSprite.endFill();\n        this.nameText.text = planet.name.toUpperCase();\n      }\n    } catch (error) {\n      console.error('Error in PlanetRenderer render:', error);\n    }\n  }\n}\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000\n      });\n      container.appendChild(this.app.view);\n      this.background = PIXI.Sprite.from(ASSET_PATHS.BACKGROUND);\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n      this.planetRenderer = new PlanetRenderer(initialPlanet);\n      this.planetRenderer.sprite.x = width / 2;\n      this.planetRenderer.sprite.y = height / 2;\n      this.planetRenderer.explosionSprite.x = width / 2;\n      this.planetRenderer.explosionSprite.y = height / 2;\n      this.app.stage.addChild(this.planetRenderer.sprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n      this.app.stage.addChild(this.planetRenderer.explosionSprite);\n      this.shipPool = new ObjectPool(() => new ShipRenderer({\n        type: {\n          id: SHIPS.SMALL.id\n        }\n      }));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({\n        shipType: SHIPS.SMALL.id\n      }));\n      this.lastUpdateTime = Date.now();\n      this.preloadTextures();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n  preloadTextures() {\n    Object.values(ASSET_PATHS.SHIPS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.PLANETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.BULLETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n  }\n  getShipRenderer(ship) {\n    try {\n      if (!this.shipRenderers.has(ship)) {\n        console.log('Creating new ShipRenderer for ship:', ship);\n        const renderer = this.shipPool.get();\n        renderer.updateSprite(ship);\n        this.app.stage.addChild(renderer.sprite);\n        this.shipRenderers.set(ship, renderer);\n      }\n      return this.shipRenderers.get(ship);\n    } catch (error) {\n      console.error('Error in getShipRenderer:', error);\n      console.error('Ship object:', ship);\n      throw error;\n    }\n  }\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet); // This will now use the correct sprite based on bullet.shipType\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.sprite.texture !== this.planetRenderer.textures[planet.id.toUpperCase()]) {\n      this.planetRenderer.updateSprite(planet);\n    }\n    return this.planetRenderer;\n  }\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n      simulation.ships.forEach(ship => {\n        try {\n          const renderer = this.getShipRenderer(ship);\n          renderer.render(ship);\n        } catch (error) {\n          console.error('Error rendering ship:', error);\n          console.error('Problematic ship:', ship);\n        }\n      });\n      this.shipRenderers.forEach((renderer, ship) => {\n        if (!simulation.ships.includes(ship)) {\n          this.removeShipRenderer(ship);\n        }\n      });\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(currentPlanet, simulation.getPlanetHealth());\n      planetRenderer.sprite.x = this.width / 2;\n      planetRenderer.sprite.y = this.height / 2;\n      planetRenderer.explosionSprite.x = this.width / 2;\n      planetRenderer.explosionSprite.y = this.height / 2;\n      planetRenderer.healthBarSprite.x = this.width / 2 - planetRenderer.healthBarWidth / 2;\n      planetRenderer.healthBarSprite.y = this.height / 2 + planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2 + planetRenderer.healthBarPadding;\n      planetRenderer.nameText.x = this.width / 2;\n      planetRenderer.nameText.y = this.height / 2 - planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2 - planetRenderer.namePadding;\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n  destroy() {\n    this.app.destroy(true);\n  }\n}","map":{"version":3,"names":["PIXI","PLANET_RENDERER_CONFIGS","SHIPS","ObjectPool","ASSET_PATHS","BACKGROUND","SMALL","id","MEDIUM","LARGE","PLANETS","MERCURY","VENUS","EARTH","MARS","JUPITER","BULLETS","EXPLOSION","ShipRenderer","constructor","ship","type","console","error","Error","textures","Texture","from","sprite","Sprite","anchor","set","updateSprite","texture","scale","warn","render","x","y","rotation","angle","Math","PI","BulletRenderer","bullet","shipType","PlanetRenderer","planet","toUpperCase","healthBarSprite","Graphics","nameText","Text","name","fontFamily","fontSize","fill","align","namePadding","healthBarPadding","healthBarWidth","healthBarHeight","explosionTextures","spritesheet","BaseTexture","i","push","Rectangle","log","length","explosionSprite","AnimatedSprite","loop","onComplete","visible","animationSpeed","explosionTriggered","scaledHeight","height","updateRotation","deltaTime","rotationSpeed","health","playing","gotoAndPlay","clear","beginFill","drawRect","endFill","healthPercentage","maxHealth","healthFillWidth","text","GameRenderer","container","width","initialPlanet","app","Application","backgroundColor","appendChild","view","background","stage","addChild","shipRenderers","Map","bulletRenderers","planetRenderer","shipPool","bulletPool","lastUpdateTime","Date","now","preloadTextures","Object","values","forEach","path","getShipRenderer","has","renderer","get","getBulletRenderer","getPlanetRenderer","removeShipRenderer","removeChild","release","delete","removeBulletRenderer","updatePlanetRotation","currentTime","simulation","ships","includes","bullets","currentPlanet","getCurrentPlanet","getPlanetHealth","destroy"],"sources":["/Users/kareenarachel/Documents/Github/orbital-bombardment-simulator/orbital-bombardment-simulator/src/render/renderer.js"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport { PLANET_RENDERER_CONFIGS } from './rendererModels';\nimport { SHIPS } from '../simulation/simulationModels';\nimport { ObjectPool } from './utils';\n\nconst ASSET_PATHS = {\n  BACKGROUND: '/assets/game_background.png',\n  SHIPS: {\n    [SHIPS.SMALL.id]: '/assets/small_ship.png',\n    [SHIPS.MEDIUM.id]: '/assets/medium_ship.png',\n    [SHIPS.LARGE.id]: '/assets/big_ship.png',\n  },\n  PLANETS: {\n    MERCURY: '/assets/planets/mercury.png',\n    VENUS: '/assets/planets/venus.png',\n    EARTH: '/assets/planets/earth.png',\n    MARS: '/assets/planets/mars.png',\n    JUPITER: '/assets/planets/jupiter.png',\n  },\n  BULLETS: {\n    SMALL: '/assets/bullet_small.png',\n    MEDIUM: '/assets/bullet_medium.png',\n    LARGE: '/assets/bullet_large.png',\n  },\n  EXPLOSION: '/assets/explosion_spritesheet.png'\n};\n\nclass ShipRenderer {\n  constructor(ship) {\n    try {\n      if (!ship || !ship.type || !ship.type.id) {\n        console.error('Invalid ship object:', ship);\n        throw new Error('Invalid ship object');\n      }\n\n      this.textures = {\n        [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.SMALL.id]),\n        [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.MEDIUM.id]),\n        [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.SHIPS[SHIPS.LARGE.id]),\n      };\n\n      if (!this.textures[ship.type.id]) {\n        console.error('Invalid ship type:', ship.type.id);\n        throw new Error('Invalid ship type');\n      }\n\n      this.sprite = new PIXI.Sprite(this.textures[ship.type.id]);\n      this.sprite.anchor.set(0.5);\n      this.updateSprite(ship);\n    } catch (error) {\n      console.error('Error in ShipRenderer constructor:', error);\n      throw error;\n    }\n  }\n\n  updateSprite(ship) {\n    try {\n      if (!ship || !ship.type) return;\n      this.sprite.texture = this.textures[ship.type.id];\n\n      switch(ship.type.id) {\n        case SHIPS.SMALL.id:\n          this.sprite.scale.set(0.25);\n          break;\n        case SHIPS.MEDIUM.id:\n          this.sprite.scale.set(0.3);\n          break;\n        case SHIPS.LARGE.id:\n          this.sprite.scale.set(0.37);\n          break;\n        default:\n          console.warn(`Unexpected ship type: ${ship.type.id}`);\n          this.sprite.scale.set(0.5);\n      }\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n\n  render(ship) {\n    try {\n      this.sprite.x = ship.x;\n      this.sprite.y = ship.y;\n      this.sprite.rotation = ship.angle + Math.PI / 2;\n    } catch (error) {\n      console.error('Error in ShipRenderer render:', error);\n    }\n  }\n}\n\nclass BulletRenderer {\n  constructor(bullet) {\n    this.textures = {\n      [SHIPS.SMALL.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.SMALL),\n      [SHIPS.MEDIUM.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.MEDIUM),\n      [SHIPS.LARGE.id]: PIXI.Texture.from(ASSET_PATHS.BULLETS.LARGE),\n    };\n    this.sprite = new PIXI.Sprite(this.textures[SHIPS.SMALL.id]); // Default to small bullet\n    this.sprite.anchor.set(0.5);\n    this.updateSprite(bullet);\n  }\n\n  updateSprite(bullet) {\n    if (!bullet || !bullet.shipType) {\n      console.warn('Invalid bullet object:', bullet);\n      return;\n    }\n\n    if (this.textures[bullet.shipType]) {\n      this.sprite.texture = this.textures[bullet.shipType];\n    } else {\n      console.warn(`Unexpected ship type for bullet: ${bullet.shipType}`);\n      this.sprite.texture = this.textures[SHIPS.SMALL.id];\n    }\n\n    // You might want to adjust the scale based on the bullet type\n    switch (bullet.shipType) {\n      case SHIPS.SMALL.id:\n        this.sprite.scale.set(1);\n        break;\n      case SHIPS.MEDIUM.id:\n        this.sprite.scale.set(1);\n        break;\n      case SHIPS.LARGE.id:\n        this.sprite.scale.set(1);\n        break;\n    }\n  }\n\n  render(bullet) {\n    this.sprite.x = bullet.x;\n    this.sprite.y = bullet.y;\n  }\n}\n\nclass PlanetRenderer {\n  constructor(planet) {\n    try {\n      if (!planet || !planet.id) {\n        console.error('Invalid planet object:', planet);\n        throw new Error('Invalid planet object');\n      }\n\n      this.textures = {\n        MERCURY: PIXI.Texture.from(ASSET_PATHS.PLANETS.MERCURY),\n        VENUS: PIXI.Texture.from(ASSET_PATHS.PLANETS.VENUS),\n        EARTH: PIXI.Texture.from(ASSET_PATHS.PLANETS.EARTH),\n        MARS: PIXI.Texture.from(ASSET_PATHS.PLANETS.MARS),\n        JUPITER: PIXI.Texture.from(ASSET_PATHS.PLANETS.JUPITER),\n      };\n\n      if (!this.textures[planet.id.toUpperCase()]) {\n        console.error('Invalid planet type:', planet.id);\n        throw new Error('Invalid planet type');\n      }\n\n      this.sprite = new PIXI.Sprite(this.textures[planet.id.toUpperCase()]);\n      this.sprite.anchor.set(0.5);\n\n      this.healthBarSprite = new PIXI.Graphics();\n      this.nameText = new PIXI.Text(planet.name.toUpperCase(), {\n        fontFamily: \"'Exo', sans-serif\",\n        fontSize: 18,\n        fill: 0xFFFFFF,\n        align: 'center'\n      });\n      this.nameText.anchor.set(0.5);\n\n      this.namePadding = 30;\n      this.healthBarPadding = 20;\n      this.healthBarWidth = 100;\n      this.healthBarHeight = 10;\n\n      // Create explosion animated sprite\n      const explosionTextures = [];\n      const spritesheet = PIXI.BaseTexture.from(ASSET_PATHS.EXPLOSION);\n      for (let i = 0; i < 8; i++) {\n        explosionTextures.push(new PIXI.Texture(spritesheet, new PIXI.Rectangle(i * 135, 0, 135, 135)));\n      }\n      console.log(`Created ${explosionTextures.length} explosion frames`); // Add this line to verify\n      this.explosionSprite = new PIXI.AnimatedSprite(explosionTextures);\n      this.explosionSprite.anchor.set(0.5);\n      this.explosionSprite.loop = false;\n      this.explosionSprite.onComplete = () => {\n       this.explosionSprite.visible = false;\n};\n      this.explosionSprite.animationSpeed = 0.3;\n      this.explosionSprite.visible = false;\n      this.explosionSprite.scale.set(1); // Adjust scale as needed\n      this.explosionTriggered = false;\n\n      this.updateSprite(planet);\n    } catch (error) {\n      console.error('Error in PlanetRenderer constructor:', error);\n      throw error;\n    }\n  }\n\n  updateSprite(planet) {\n    try {\n      if (!planet || !planet.id) return;\n      this.sprite.texture = this.textures[planet.id.toUpperCase()];\n\n      switch(planet.id.toUpperCase()) {\n        case 'MERCURY':\n          this.sprite.scale.set(1);\n          break;\n        case 'VENUS':\n          this.sprite.scale.set(1);\n          break;\n        case 'EARTH':\n          this.sprite.scale.set(1.25);\n          break;\n        case 'MARS':\n          this.sprite.scale.set(1.25);\n          break;\n        case 'JUPITER':\n          this.sprite.scale.set(1.5);\n          break;\n        default:\n          console.warn(`Unexpected planet type: ${planet.id}`);\n          this.sprite.scale.set(0.5);\n      }\n\n      const scaledHeight = this.sprite.height * this.sprite.scale.y;\n\n      this.healthBarSprite.x = -this.healthBarWidth / 2;\n      this.healthBarSprite.y = (scaledHeight / 2) + this.healthBarPadding;\n\n      this.nameText.y = -(scaledHeight / 2) - this.namePadding;\n    } catch (error) {\n      console.error('Error in updateSprite:', error);\n    }\n  }\n\n  updateRotation(deltaTime) {\n    const rotationSpeed = 0.1;\n    this.sprite.rotation += rotationSpeed * deltaTime;\n  }\n\n  render(planet, health) {\n    try {\n      if (health <= 0 && !this.explosionSprite.playing) {\n        this.sprite.visible = false;\n        this.healthBarSprite.visible = false;\n        this.nameText.visible = false;\n        this.explosionSprite.visible = true;\n        this.explosionSprite.gotoAndPlay(0);\n        this.explosionTriggered = true;\n      } else if (health > 0) {\n        this.explosionTriggered = false;\n        this.sprite.visible = true;\n        this.healthBarSprite.visible = true;\n        this.nameText.visible = true;\n        this.explosionSprite.visible = false;\n\n        this.healthBarSprite.clear();\n        this.healthBarSprite.beginFill(0x191123);\n        this.healthBarSprite.drawRect(0, 0, this.healthBarWidth, this.healthBarHeight);\n        this.healthBarSprite.endFill();\n\n        const healthPercentage = health / planet.maxHealth;\n        const healthFillWidth = this.healthBarWidth * healthPercentage;\n\n        this.healthBarSprite.beginFill(0xFF4C4C);\n        this.healthBarSprite.drawRect(0, 0, healthFillWidth, this.healthBarHeight);\n        this.healthBarSprite.endFill();\n\n        this.nameText.text = planet.name.toUpperCase();\n      }\n    } catch (error) {\n      console.error('Error in PlanetRenderer render:', error);\n    }\n  }\n}\n\nexport class GameRenderer {\n  constructor(container, width, height, initialPlanet) {\n    try {\n      this.width = width;\n      this.height = height;\n      this.app = new PIXI.Application({\n        width,\n        height,\n        backgroundColor: 0x000000,\n      });\n      container.appendChild(this.app.view);\n\n      this.background = PIXI.Sprite.from(ASSET_PATHS.BACKGROUND);\n      this.background.width = width;\n      this.background.height = height;\n      this.app.stage.addChild(this.background);\n\n      this.shipRenderers = new Map();\n      this.bulletRenderers = new Map();\n\n      this.planetRenderer = new PlanetRenderer(initialPlanet);\n      this.planetRenderer.sprite.x = width / 2;\n      this.planetRenderer.sprite.y = height / 2;\n      this.planetRenderer.explosionSprite.x = width / 2;\n      this.planetRenderer.explosionSprite.y = height / 2;\n\n      this.app.stage.addChild(this.planetRenderer.sprite);\n      this.app.stage.addChild(this.planetRenderer.healthBarSprite);\n      this.app.stage.addChild(this.planetRenderer.nameText);\n      this.app.stage.addChild(this.planetRenderer.explosionSprite);\n\n      this.shipPool = new ObjectPool(() => new ShipRenderer({type: {id: SHIPS.SMALL.id}}));\n      this.bulletPool = new ObjectPool(() => new BulletRenderer({shipType: SHIPS.SMALL.id}));\n\n      this.lastUpdateTime = Date.now();\n\n      this.preloadTextures();\n    } catch (error) {\n      console.error('Error in GameRenderer constructor:', error);\n    }\n  }\n\n  preloadTextures() {\n    Object.values(ASSET_PATHS.SHIPS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.PLANETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n    Object.values(ASSET_PATHS.BULLETS).forEach(path => {\n      PIXI.Texture.from(path);\n    });\n  }\n\n  getShipRenderer(ship) {\n    try {\n      if (!this.shipRenderers.has(ship)) {\n        console.log('Creating new ShipRenderer for ship:', ship);\n        const renderer = this.shipPool.get();\n        renderer.updateSprite(ship);\n        this.app.stage.addChild(renderer.sprite);\n        this.shipRenderers.set(ship, renderer);\n      }\n      return this.shipRenderers.get(ship);\n    } catch (error) {\n      console.error('Error in getShipRenderer:', error);\n      console.error('Ship object:', ship);\n      throw error;\n    }\n  }\n\n  getBulletRenderer(bullet) {\n    if (!this.bulletRenderers.has(bullet)) {\n      const renderer = this.bulletPool.get();\n      renderer.updateSprite(bullet);  // This will now use the correct sprite based on bullet.shipType\n      this.app.stage.addChild(renderer.sprite);\n      this.bulletRenderers.set(bullet, renderer);\n    }\n    return this.bulletRenderers.get(bullet);\n  }\n\n\n  getPlanetRenderer(planet) {\n    if (this.planetRenderer.sprite.texture !== this.planetRenderer.textures[planet.id.toUpperCase()]) {\n      this.planetRenderer.updateSprite(planet);\n    }\n    return this.planetRenderer;\n  }\n\n  removeShipRenderer(ship) {\n    const renderer = this.shipRenderers.get(ship);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.shipPool.release(renderer);\n      this.shipRenderers.delete(ship);\n    }\n  }\n\n  removeBulletRenderer(bullet) {\n    const renderer = this.bulletRenderers.get(bullet);\n    if (renderer) {\n      this.app.stage.removeChild(renderer.sprite);\n      this.bulletPool.release(renderer);\n      this.bulletRenderers.delete(bullet);\n    }\n  }\n\n  updatePlanetRotation() {\n    const currentTime = Date.now();\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000;\n    this.planetRenderer.updateRotation(deltaTime);\n    this.lastUpdateTime = currentTime;\n  }\n\n  render(simulation) {\n    try {\n      this.updatePlanetRotation();\n\n      simulation.ships.forEach(ship => {\n        try {\n          const renderer = this.getShipRenderer(ship);\n          renderer.render(ship);\n        } catch (error) {\n          console.error('Error rendering ship:', error);\n          console.error('Problematic ship:', ship);\n        }\n      });\n\n      this.shipRenderers.forEach((renderer, ship) => {\n        if (!simulation.ships.includes(ship)) {\n          this.removeShipRenderer(ship);\n        }\n      });\n\n      simulation.bullets.forEach(bullet => {\n        const renderer = this.getBulletRenderer(bullet);\n        renderer.render(bullet);\n      });\n\n      this.bulletRenderers.forEach((renderer, bullet) => {\n        if (!simulation.bullets.includes(bullet)) {\n          this.removeBulletRenderer(bullet);\n        }\n      });\n\n      const currentPlanet = simulation.getCurrentPlanet();\n      const planetRenderer = this.getPlanetRenderer(currentPlanet);\n      planetRenderer.render(currentPlanet, simulation.getPlanetHealth());\n\n      planetRenderer.sprite.x = this.width / 2;\n      planetRenderer.sprite.y = this.height / 2;\n      planetRenderer.explosionSprite.x = this.width / 2;\n      planetRenderer.explosionSprite.y = this.height / 2;\n      planetRenderer.healthBarSprite.x = this.width / 2 - planetRenderer.healthBarWidth / 2;\n      planetRenderer.healthBarSprite.y = this.height / 2 +\n        (planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2) +\n        planetRenderer.healthBarPadding;\n\n      planetRenderer.nameText.x = this.width / 2;\n      planetRenderer.nameText.y = this.height / 2 -\n        (planetRenderer.sprite.height * planetRenderer.sprite.scale.y / 2) -\n        planetRenderer.namePadding;\n    } catch (error) {\n      console.error('Error in GameRenderer render:', error);\n    }\n  }\n\n  destroy() {\n    this.app.destroy(true);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}